"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@elizaos";
exports.ids = ["vendor-chunks/@elizaos"];
exports.modules = {

/***/ "(rsc)/./node_modules/@elizaos/core/dist/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@elizaos/core/dist/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AgentRuntime: () => (/* binding */ AgentRuntime),\n/* harmony export */   AgentStatus: () => (/* binding */ AgentStatus),\n/* harmony export */   CacheKeyPrefix: () => (/* binding */ CacheKeyPrefix),\n/* harmony export */   ChannelType: () => (/* binding */ ChannelType),\n/* harmony export */   ContentType: () => (/* binding */ ContentType),\n/* harmony export */   DatabaseAdapter: () => (/* binding */ DatabaseAdapter),\n/* harmony export */   EventType: () => (/* binding */ EventType),\n/* harmony export */   IBrowserService: () => (/* binding */ IBrowserService),\n/* harmony export */   IEmailService: () => (/* binding */ IEmailService),\n/* harmony export */   ILpService: () => (/* binding */ ILpService),\n/* harmony export */   IMessageService: () => (/* binding */ IMessageService),\n/* harmony export */   IPdfService: () => (/* binding */ IPdfService),\n/* harmony export */   IPostService: () => (/* binding */ IPostService),\n/* harmony export */   ITokenDataService: () => (/* binding */ ITokenDataService),\n/* harmony export */   ITranscriptionService: () => (/* binding */ ITranscriptionService),\n/* harmony export */   IVideoService: () => (/* binding */ IVideoService),\n/* harmony export */   IWalletService: () => (/* binding */ IWalletService),\n/* harmony export */   IWebSearchService: () => (/* binding */ IWebSearchService),\n/* harmony export */   KnowledgeScope: () => (/* binding */ KnowledgeScope),\n/* harmony export */   MODEL_SETTINGS: () => (/* binding */ MODEL_SETTINGS),\n/* harmony export */   MemoryType: () => (/* binding */ MemoryType),\n/* harmony export */   ModelType: () => (/* binding */ ModelType),\n/* harmony export */   PlatformPrefix: () => (/* binding */ PlatformPrefix),\n/* harmony export */   Role: () => (/* binding */ Role),\n/* harmony export */   SOCKET_MESSAGE_TYPE: () => (/* binding */ SOCKET_MESSAGE_TYPE),\n/* harmony export */   Semaphore: () => (/* binding */ Semaphore),\n/* harmony export */   Sentry: () => (/* reexport module object */ _sentry_browser__WEBPACK_IMPORTED_MODULE_10__),\n/* harmony export */   Service: () => (/* binding */ Service),\n/* harmony export */   ServiceBuilder: () => (/* binding */ ServiceBuilder),\n/* harmony export */   ServiceType: () => (/* binding */ ServiceType),\n/* harmony export */   TEEMode: () => (/* binding */ TEEMode),\n/* harmony export */   TeeType: () => (/* binding */ TeeType),\n/* harmony export */   VECTOR_DIMS: () => (/* binding */ VECTOR_DIMS),\n/* harmony export */   addHeader: () => (/* binding */ addHeader),\n/* harmony export */   asUUID: () => (/* binding */ asUUID),\n/* harmony export */   booleanFooter: () => (/* binding */ booleanFooter),\n/* harmony export */   characterSchema: () => (/* binding */ characterSchema),\n/* harmony export */   composeActionExamples: () => (/* binding */ composeActionExamples),\n/* harmony export */   composePrompt: () => (/* binding */ composePrompt),\n/* harmony export */   composePromptFromState: () => (/* binding */ composePromptFromState),\n/* harmony export */   createActionResult: () => (/* binding */ createActionResult),\n/* harmony export */   createLogger: () => (/* binding */ createLogger),\n/* harmony export */   createMessageMemory: () => (/* binding */ createMessageMemory),\n/* harmony export */   createService: () => (/* binding */ createService),\n/* harmony export */   createServiceError: () => (/* binding */ createServiceError),\n/* harmony export */   createSettingFromConfig: () => (/* binding */ createSettingFromConfig),\n/* harmony export */   createUniqueUuid: () => (/* binding */ createUniqueUuid),\n/* harmony export */   decryptObjectValues: () => (/* binding */ decryptObjectValues),\n/* harmony export */   decryptSecret: () => (/* binding */ decryptStringValue),\n/* harmony export */   decryptStringValue: () => (/* binding */ decryptStringValue),\n/* harmony export */   decryptedCharacter: () => (/* binding */ decryptedCharacter),\n/* harmony export */   defineService: () => (/* binding */ defineService),\n/* harmony export */   elizaLogger: () => (/* binding */ elizaLogger),\n/* harmony export */   encryptObjectValues: () => (/* binding */ encryptObjectValues),\n/* harmony export */   encryptStringValue: () => (/* binding */ encryptStringValue),\n/* harmony export */   encryptedCharacter: () => (/* binding */ encryptedCharacter),\n/* harmony export */   findEntityByName: () => (/* binding */ findEntityByName),\n/* harmony export */   findWorldsForOwner: () => (/* binding */ findWorldsForOwner),\n/* harmony export */   formatActionNames: () => (/* binding */ formatActionNames),\n/* harmony export */   formatActions: () => (/* binding */ formatActions),\n/* harmony export */   formatEntities: () => (/* binding */ formatEntities),\n/* harmony export */   formatMessages: () => (/* binding */ formatMessages),\n/* harmony export */   formatPosts: () => (/* binding */ formatPosts),\n/* harmony export */   formatTimestamp: () => (/* binding */ formatTimestamp),\n/* harmony export */   getContentTypeFromMimeType: () => (/* binding */ getContentTypeFromMimeType),\n/* harmony export */   getEntityDetails: () => (/* binding */ getEntityDetails),\n/* harmony export */   getLocalServerUrl: () => (/* binding */ getLocalServerUrl),\n/* harmony export */   getMemoryText: () => (/* binding */ getMemoryText),\n/* harmony export */   getModelSpecificSettingKey: () => (/* binding */ getModelSpecificSettingKey),\n/* harmony export */   getSalt: () => (/* binding */ getSalt),\n/* harmony export */   getTypedService: () => (/* binding */ getTypedService),\n/* harmony export */   getUserServerRole: () => (/* binding */ getUserServerRole),\n/* harmony export */   getWorldSettings: () => (/* binding */ getWorldSettings),\n/* harmony export */   imageDescriptionTemplate: () => (/* binding */ imageDescriptionTemplate),\n/* harmony export */   initializeOnboarding: () => (/* binding */ initializeOnboarding),\n/* harmony export */   isCustomMetadata: () => (/* binding */ isCustomMetadata),\n/* harmony export */   isDescriptionMetadata: () => (/* binding */ isDescriptionMetadata),\n/* harmony export */   isDocumentMemory: () => (/* binding */ isDocumentMemory),\n/* harmony export */   isDocumentMetadata: () => (/* binding */ isDocumentMetadata),\n/* harmony export */   isFragmentMemory: () => (/* binding */ isFragmentMemory),\n/* harmony export */   isFragmentMetadata: () => (/* binding */ isFragmentMetadata),\n/* harmony export */   isMessageMetadata: () => (/* binding */ isMessageMetadata),\n/* harmony export */   isValidCharacter: () => (/* binding */ isValidCharacter),\n/* harmony export */   logger: () => (/* binding */ logger),\n/* harmony export */   messageHandlerTemplate: () => (/* binding */ messageHandlerTemplate),\n/* harmony export */   normalizeJsonString: () => (/* binding */ normalizeJsonString),\n/* harmony export */   parseAndValidateCharacter: () => (/* binding */ parseAndValidateCharacter),\n/* harmony export */   parseBooleanFromText: () => (/* binding */ parseBooleanFromText2),\n/* harmony export */   parseJSONObjectFromText: () => (/* binding */ parseJSONObjectFromText),\n/* harmony export */   parseKeyValueXml: () => (/* binding */ parseKeyValueXml),\n/* harmony export */   postCreationTemplate: () => (/* binding */ postCreationTemplate),\n/* harmony export */   safeReplacer: () => (/* binding */ safeReplacer),\n/* harmony export */   saltSettingValue: () => (/* binding */ saltSettingValue),\n/* harmony export */   saltWorldSettings: () => (/* binding */ saltWorldSettings),\n/* harmony export */   shouldRespondTemplate: () => (/* binding */ shouldRespondTemplate),\n/* harmony export */   splitChunks: () => (/* binding */ splitChunks),\n/* harmony export */   stringToUuid: () => (/* binding */ stringToUuid),\n/* harmony export */   trimTokens: () => (/* binding */ trimTokens),\n/* harmony export */   truncateToCompleteSentence: () => (/* binding */ truncateToCompleteSentence),\n/* harmony export */   unsaltSettingValue: () => (/* binding */ unsaltSettingValue),\n/* harmony export */   unsaltWorldSettings: () => (/* binding */ unsaltWorldSettings),\n/* harmony export */   updateWorldSettings: () => (/* binding */ updateWorldSettings),\n/* harmony export */   validateCharacter: () => (/* binding */ validateCharacter),\n/* harmony export */   validateUuid: () => (/* binding */ validateUuid)\n/* harmony export */ });\n/* harmony import */ var handlebars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! handlebars */ \"(rsc)/./node_modules/handlebars/lib/index.js\");\n/* harmony import */ var js_sha1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! js-sha1 */ \"(rsc)/./node_modules/js-sha1/src/sha1.js\");\n/* harmony import */ var langchain_text_splitter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! langchain/text_splitter */ \"(rsc)/./node_modules/langchain/text_splitter.js\");\n/* harmony import */ var unique_names_generator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! unique-names-generator */ \"(rsc)/./node_modules/unique-names-generator/dist/index.m.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var pino__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! pino */ \"(rsc)/./node_modules/pino/pino.js\");\n/* harmony import */ var _sentry_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/browser */ \"(rsc)/./node_modules/@sentry/browser/build/npm/esm/sdk.js\");\n/* harmony import */ var _sentry_browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/browser */ \"(rsc)/./node_modules/@sentry/core/build/esm/exports.js\");\n/* harmony import */ var _sentry_browser__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @sentry/browser */ \"(rsc)/./node_modules/@sentry/browser/build/npm/esm/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/@elizaos/core/node_modules/uuid/dist/esm/v4.js\");\n/* harmony import */ var crypto_browserify__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! crypto-browserify */ \"(rsc)/./node_modules/crypto-browserify/index.js\");\nvar __require = /* @__PURE__ */ ((x) => typeof require !== \"undefined\" ? require : typeof Proxy !== \"undefined\" ? new Proxy(x, {\n  get: (a, b) => (typeof require !== \"undefined\" ? require : a)[b]\n}) : x)(function(x) {\n  if (typeof require !== \"undefined\") return require.apply(this, arguments);\n  throw Error('Dynamic require of \"' + x + '\" is not supported');\n});\n\n// src/types/primitives.ts\nfunction asUUID(id) {\n  if (!id || !/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(id)) {\n    throw new Error(`Invalid UUID format: ${id}`);\n  }\n  return id;\n}\nvar ContentType = /* @__PURE__ */ ((ContentType2) => {\n  ContentType2[\"IMAGE\"] = \"image\";\n  ContentType2[\"VIDEO\"] = \"video\";\n  ContentType2[\"AUDIO\"] = \"audio\";\n  ContentType2[\"DOCUMENT\"] = \"document\";\n  ContentType2[\"LINK\"] = \"link\";\n  return ContentType2;\n})(ContentType || {});\n\n// src/types/memory.ts\nvar MemoryType = /* @__PURE__ */ ((MemoryType2) => {\n  MemoryType2[\"DOCUMENT\"] = \"document\";\n  MemoryType2[\"FRAGMENT\"] = \"fragment\";\n  MemoryType2[\"MESSAGE\"] = \"message\";\n  MemoryType2[\"DESCRIPTION\"] = \"description\";\n  MemoryType2[\"CUSTOM\"] = \"custom\";\n  return MemoryType2;\n})(MemoryType || {});\nfunction createMessageMemory(params) {\n  return {\n    ...params,\n    createdAt: Date.now(),\n    metadata: {\n      type: \"message\" /* MESSAGE */,\n      timestamp: Date.now(),\n      scope: params.agentId ? \"private\" : \"shared\"\n    }\n  };\n}\nfunction isDocumentMetadata(metadata) {\n  return metadata.type === \"document\" /* DOCUMENT */;\n}\nfunction isFragmentMetadata(metadata) {\n  return metadata.type === \"fragment\" /* FRAGMENT */;\n}\nfunction isMessageMetadata(metadata) {\n  return metadata.type === \"message\" /* MESSAGE */;\n}\nfunction isDescriptionMetadata(metadata) {\n  return metadata.type === \"description\" /* DESCRIPTION */;\n}\nfunction isCustomMetadata(metadata) {\n  return metadata.type !== \"document\" /* DOCUMENT */ && metadata.type !== \"fragment\" /* FRAGMENT */ && metadata.type !== \"message\" /* MESSAGE */ && metadata.type !== \"description\" /* DESCRIPTION */;\n}\nfunction isDocumentMemory(memory) {\n  return memory.metadata?.type === \"document\" /* DOCUMENT */;\n}\nfunction isFragmentMemory(memory) {\n  return memory.metadata?.type === \"fragment\" /* FRAGMENT */;\n}\nfunction getMemoryText(memory, defaultValue = \"\") {\n  return memory.content.text ?? defaultValue;\n}\n\n// src/types/knowledge.ts\nvar KnowledgeScope = /* @__PURE__ */ ((KnowledgeScope2) => {\n  KnowledgeScope2[\"SHARED\"] = \"shared\";\n  KnowledgeScope2[\"PRIVATE\"] = \"private\";\n  return KnowledgeScope2;\n})(KnowledgeScope || {});\nvar CacheKeyPrefix = /* @__PURE__ */ ((CacheKeyPrefix2) => {\n  CacheKeyPrefix2[\"KNOWLEDGE\"] = \"knowledge\";\n  return CacheKeyPrefix2;\n})(CacheKeyPrefix || {});\n\n// src/types/environment.ts\nvar Role = /* @__PURE__ */ ((Role2) => {\n  Role2[\"OWNER\"] = \"OWNER\";\n  Role2[\"ADMIN\"] = \"ADMIN\";\n  Role2[\"NONE\"] = \"NONE\";\n  return Role2;\n})(Role || {});\nvar ChannelType = /* @__PURE__ */ ((ChannelType2) => {\n  ChannelType2[\"SELF\"] = \"SELF\";\n  ChannelType2[\"DM\"] = \"DM\";\n  ChannelType2[\"GROUP\"] = \"GROUP\";\n  ChannelType2[\"VOICE_DM\"] = \"VOICE_DM\";\n  ChannelType2[\"VOICE_GROUP\"] = \"VOICE_GROUP\";\n  ChannelType2[\"FEED\"] = \"FEED\";\n  ChannelType2[\"THREAD\"] = \"THREAD\";\n  ChannelType2[\"WORLD\"] = \"WORLD\";\n  ChannelType2[\"FORUM\"] = \"FORUM\";\n  ChannelType2[\"API\"] = \"API\";\n  return ChannelType2;\n})(ChannelType || {});\n\n// src/types/agent.ts\nvar AgentStatus = /* @__PURE__ */ ((AgentStatus2) => {\n  AgentStatus2[\"ACTIVE\"] = \"active\";\n  AgentStatus2[\"INACTIVE\"] = \"inactive\";\n  return AgentStatus2;\n})(AgentStatus || {});\n\n// src/types/components.ts\nfunction createActionResult(partial = {}) {\n  return {\n    success: true,\n    // Default to success\n    ...partial\n  };\n}\n\n// src/types/service.ts\nvar ServiceType = {\n  TRANSCRIPTION: \"transcription\",\n  VIDEO: \"video\",\n  BROWSER: \"browser\",\n  PDF: \"pdf\",\n  REMOTE_FILES: \"aws_s3\",\n  WEB_SEARCH: \"web_search\",\n  EMAIL: \"email\",\n  TEE: \"tee\",\n  TASK: \"task\",\n  WALLET: \"wallet\",\n  LP_POOL: \"lp_pool\",\n  TOKEN_DATA: \"token_data\",\n  MESSAGE: \"message\",\n  POST: \"post\",\n  UNKNOWN: \"unknown\"\n};\nvar Service = class {\n  constructor(runtime) {\n    if (runtime) {\n      this.runtime = runtime;\n    }\n  }\n  /** Start service connection */\n  static async start(_runtime) {\n    throw new Error(\"Not implemented\");\n  }\n  /** Stop service connection */\n  static async stop(_runtime) {\n    throw new Error(\"Not implemented\");\n  }\n};\nfunction getTypedService(runtime, serviceType) {\n  return runtime.getService(serviceType);\n}\nfunction createServiceError(error, code = \"UNKNOWN_ERROR\") {\n  if (error instanceof Error) {\n    return {\n      code,\n      message: error.message,\n      cause: error\n    };\n  }\n  return {\n    code,\n    message: String(error)\n  };\n}\n\n// src/types/model.ts\nvar ModelType = {\n  SMALL: \"TEXT_SMALL\",\n  // kept for backwards compatibility\n  MEDIUM: \"TEXT_LARGE\",\n  // kept for backwards compatibility\n  LARGE: \"TEXT_LARGE\",\n  // kept for backwards compatibility\n  TEXT_SMALL: \"TEXT_SMALL\",\n  TEXT_LARGE: \"TEXT_LARGE\",\n  TEXT_EMBEDDING: \"TEXT_EMBEDDING\",\n  TEXT_TOKENIZER_ENCODE: \"TEXT_TOKENIZER_ENCODE\",\n  TEXT_TOKENIZER_DECODE: \"TEXT_TOKENIZER_DECODE\",\n  TEXT_REASONING_SMALL: \"REASONING_SMALL\",\n  TEXT_REASONING_LARGE: \"REASONING_LARGE\",\n  TEXT_COMPLETION: \"TEXT_COMPLETION\",\n  IMAGE: \"IMAGE\",\n  IMAGE_DESCRIPTION: \"IMAGE_DESCRIPTION\",\n  TRANSCRIPTION: \"TRANSCRIPTION\",\n  TEXT_TO_SPEECH: \"TEXT_TO_SPEECH\",\n  AUDIO: \"AUDIO\",\n  VIDEO: \"VIDEO\",\n  OBJECT_SMALL: \"OBJECT_SMALL\",\n  OBJECT_LARGE: \"OBJECT_LARGE\"\n};\nvar MODEL_SETTINGS = {\n  // Default settings - apply to all model types unless overridden\n  DEFAULT_MAX_TOKENS: \"DEFAULT_MAX_TOKENS\",\n  DEFAULT_TEMPERATURE: \"DEFAULT_TEMPERATURE\",\n  DEFAULT_FREQUENCY_PENALTY: \"DEFAULT_FREQUENCY_PENALTY\",\n  DEFAULT_PRESENCE_PENALTY: \"DEFAULT_PRESENCE_PENALTY\",\n  // TEXT_SMALL specific settings\n  TEXT_SMALL_MAX_TOKENS: \"TEXT_SMALL_MAX_TOKENS\",\n  TEXT_SMALL_TEMPERATURE: \"TEXT_SMALL_TEMPERATURE\",\n  TEXT_SMALL_FREQUENCY_PENALTY: \"TEXT_SMALL_FREQUENCY_PENALTY\",\n  TEXT_SMALL_PRESENCE_PENALTY: \"TEXT_SMALL_PRESENCE_PENALTY\",\n  // TEXT_LARGE specific settings\n  TEXT_LARGE_MAX_TOKENS: \"TEXT_LARGE_MAX_TOKENS\",\n  TEXT_LARGE_TEMPERATURE: \"TEXT_LARGE_TEMPERATURE\",\n  TEXT_LARGE_FREQUENCY_PENALTY: \"TEXT_LARGE_FREQUENCY_PENALTY\",\n  TEXT_LARGE_PRESENCE_PENALTY: \"TEXT_LARGE_PRESENCE_PENALTY\",\n  // OBJECT_SMALL specific settings\n  OBJECT_SMALL_MAX_TOKENS: \"OBJECT_SMALL_MAX_TOKENS\",\n  OBJECT_SMALL_TEMPERATURE: \"OBJECT_SMALL_TEMPERATURE\",\n  OBJECT_SMALL_FREQUENCY_PENALTY: \"OBJECT_SMALL_FREQUENCY_PENALTY\",\n  OBJECT_SMALL_PRESENCE_PENALTY: \"OBJECT_SMALL_PRESENCE_PENALTY\",\n  // OBJECT_LARGE specific settings\n  OBJECT_LARGE_MAX_TOKENS: \"OBJECT_LARGE_MAX_TOKENS\",\n  OBJECT_LARGE_TEMPERATURE: \"OBJECT_LARGE_TEMPERATURE\",\n  OBJECT_LARGE_FREQUENCY_PENALTY: \"OBJECT_LARGE_FREQUENCY_PENALTY\",\n  OBJECT_LARGE_PRESENCE_PENALTY: \"OBJECT_LARGE_PRESENCE_PENALTY\",\n  // Legacy keys for backwards compatibility (will be treated as defaults)\n  MODEL_MAX_TOKEN: \"MODEL_MAX_TOKEN\",\n  MODEL_TEMPERATURE: \"MODEL_TEMPERATURE\",\n  MODEL_FREQ_PENALTY: \"MODEL_FREQ_PENALTY\",\n  MODEL_PRESENCE_PENALTY: \"MODEL_PRESENCE_PENALTY\"\n};\nfunction getModelSpecificSettingKey(modelType, param) {\n  const supportedModelTypes = [\"TEXT_SMALL\", \"TEXT_LARGE\", \"OBJECT_SMALL\", \"OBJECT_LARGE\"];\n  if (!supportedModelTypes.includes(modelType)) {\n    return null;\n  }\n  return `${modelType}_${param}`;\n}\n\n// src/types/database.ts\nvar VECTOR_DIMS = {\n  SMALL: 384,\n  MEDIUM: 512,\n  LARGE: 768,\n  XL: 1024,\n  XXL: 1536,\n  XXXL: 3072\n};\n\n// src/types/events.ts\nvar EventType = /* @__PURE__ */ ((EventType2) => {\n  EventType2[\"WORLD_JOINED\"] = \"WORLD_JOINED\";\n  EventType2[\"WORLD_CONNECTED\"] = \"WORLD_CONNECTED\";\n  EventType2[\"WORLD_LEFT\"] = \"WORLD_LEFT\";\n  EventType2[\"ENTITY_JOINED\"] = \"ENTITY_JOINED\";\n  EventType2[\"ENTITY_LEFT\"] = \"ENTITY_LEFT\";\n  EventType2[\"ENTITY_UPDATED\"] = \"ENTITY_UPDATED\";\n  EventType2[\"ROOM_JOINED\"] = \"ROOM_JOINED\";\n  EventType2[\"ROOM_LEFT\"] = \"ROOM_LEFT\";\n  EventType2[\"MESSAGE_RECEIVED\"] = \"MESSAGE_RECEIVED\";\n  EventType2[\"MESSAGE_SENT\"] = \"MESSAGE_SENT\";\n  EventType2[\"MESSAGE_DELETED\"] = \"MESSAGE_DELETED\";\n  EventType2[\"CHANNEL_CLEARED\"] = \"CHANNEL_CLEARED\";\n  EventType2[\"VOICE_MESSAGE_RECEIVED\"] = \"VOICE_MESSAGE_RECEIVED\";\n  EventType2[\"VOICE_MESSAGE_SENT\"] = \"VOICE_MESSAGE_SENT\";\n  EventType2[\"REACTION_RECEIVED\"] = \"REACTION_RECEIVED\";\n  EventType2[\"POST_GENERATED\"] = \"POST_GENERATED\";\n  EventType2[\"INTERACTION_RECEIVED\"] = \"INTERACTION_RECEIVED\";\n  EventType2[\"RUN_STARTED\"] = \"RUN_STARTED\";\n  EventType2[\"RUN_ENDED\"] = \"RUN_ENDED\";\n  EventType2[\"RUN_TIMEOUT\"] = \"RUN_TIMEOUT\";\n  EventType2[\"ACTION_STARTED\"] = \"ACTION_STARTED\";\n  EventType2[\"ACTION_COMPLETED\"] = \"ACTION_COMPLETED\";\n  EventType2[\"EVALUATOR_STARTED\"] = \"EVALUATOR_STARTED\";\n  EventType2[\"EVALUATOR_COMPLETED\"] = \"EVALUATOR_COMPLETED\";\n  EventType2[\"MODEL_USED\"] = \"MODEL_USED\";\n  return EventType2;\n})(EventType || {});\nvar PlatformPrefix = /* @__PURE__ */ ((PlatformPrefix2) => {\n  PlatformPrefix2[\"DISCORD\"] = \"DISCORD\";\n  PlatformPrefix2[\"TELEGRAM\"] = \"TELEGRAM\";\n  PlatformPrefix2[\"TWITTER\"] = \"TWITTER\";\n  return PlatformPrefix2;\n})(PlatformPrefix || {});\n\n// src/types/tee.ts\nvar TEEMode = /* @__PURE__ */ ((TEEMode2) => {\n  TEEMode2[\"OFF\"] = \"OFF\";\n  TEEMode2[\"LOCAL\"] = \"LOCAL\";\n  TEEMode2[\"DOCKER\"] = \"DOCKER\";\n  TEEMode2[\"PRODUCTION\"] = \"PRODUCTION\";\n  return TEEMode2;\n})(TEEMode || {});\nvar TeeType = /* @__PURE__ */ ((TeeType2) => {\n  TeeType2[\"TDX_DSTACK\"] = \"tdx_dstack\";\n  return TeeType2;\n})(TeeType || {});\n\n// src/types/token.ts\nvar ITokenDataService = class extends Service {\n  constructor() {\n    super(...arguments);\n    this.capabilityDescription = \"Provides standardized access to token market data.\";\n  }\n  static {\n    this.serviceType = ServiceType.TOKEN_DATA;\n  }\n  // Future potential methods:\n  // getHistoricalPriceData(address: string, chain: string, timeFrame: string): Promise<any[]>;\n  // getTokenMarketChart(address: string, chain: string, days: number): Promise<any[]>;\n};\n\n// src/types/messaging.ts\nvar SOCKET_MESSAGE_TYPE = /* @__PURE__ */ ((SOCKET_MESSAGE_TYPE2) => {\n  SOCKET_MESSAGE_TYPE2[SOCKET_MESSAGE_TYPE2[\"ROOM_JOINING\"] = 1] = \"ROOM_JOINING\";\n  SOCKET_MESSAGE_TYPE2[SOCKET_MESSAGE_TYPE2[\"SEND_MESSAGE\"] = 2] = \"SEND_MESSAGE\";\n  SOCKET_MESSAGE_TYPE2[SOCKET_MESSAGE_TYPE2[\"MESSAGE\"] = 3] = \"MESSAGE\";\n  SOCKET_MESSAGE_TYPE2[SOCKET_MESSAGE_TYPE2[\"ACK\"] = 4] = \"ACK\";\n  SOCKET_MESSAGE_TYPE2[SOCKET_MESSAGE_TYPE2[\"THINKING\"] = 5] = \"THINKING\";\n  SOCKET_MESSAGE_TYPE2[SOCKET_MESSAGE_TYPE2[\"CONTROL\"] = 6] = \"CONTROL\";\n  return SOCKET_MESSAGE_TYPE2;\n})(SOCKET_MESSAGE_TYPE || {});\n\n// src/types/wallet.ts\nvar IWalletService = class extends Service {\n  constructor() {\n    super(...arguments);\n    this.capabilityDescription = \"Provides standardized access to wallet balances and portfolios.\";\n  }\n  static {\n    this.serviceType = ServiceType.WALLET;\n  }\n};\n\n// src/types/lp.ts\nvar ILpService = class extends Service {\n  constructor() {\n    super(...arguments);\n    this.capabilityDescription = \"Provides standardized access to DEX liquidity pools.\";\n  }\n  static {\n    this.serviceType = \"lp\";\n  }\n};\n\n// src/types/pdf.ts\nvar IPdfService = class extends Service {\n  constructor() {\n    super(...arguments);\n    this.capabilityDescription = \"PDF processing, extraction, and generation capabilities\";\n  }\n  static {\n    this.serviceType = ServiceType.PDF;\n  }\n};\n\n// src/types/video.ts\nvar IVideoService = class extends Service {\n  constructor() {\n    super(...arguments);\n    this.capabilityDescription = \"Video download, processing, and conversion capabilities\";\n  }\n  static {\n    this.serviceType = ServiceType.VIDEO;\n  }\n};\n\n// src/types/browser.ts\nvar IBrowserService = class extends Service {\n  constructor() {\n    super(...arguments);\n    this.capabilityDescription = \"Web browser automation and scraping capabilities\";\n  }\n  static {\n    this.serviceType = ServiceType.BROWSER;\n  }\n};\n\n// src/types/transcription.ts\nvar ITranscriptionService = class extends Service {\n  constructor() {\n    super(...arguments);\n    this.capabilityDescription = \"Audio transcription and speech processing capabilities\";\n  }\n  static {\n    this.serviceType = ServiceType.TRANSCRIPTION;\n  }\n};\n\n// src/types/web-search.ts\nvar IWebSearchService = class extends Service {\n  constructor() {\n    super(...arguments);\n    this.capabilityDescription = \"Web search and content discovery capabilities\";\n  }\n  static {\n    this.serviceType = ServiceType.WEB_SEARCH;\n  }\n};\n\n// src/types/email.ts\nvar IEmailService = class extends Service {\n  constructor() {\n    super(...arguments);\n    this.capabilityDescription = \"Email sending, receiving, and management capabilities\";\n  }\n  static {\n    this.serviceType = ServiceType.EMAIL;\n  }\n};\n\n// src/types/message.ts\nvar IMessageService = class extends Service {\n  constructor() {\n    super(...arguments);\n    this.capabilityDescription = \"Message sending, receiving, and management capabilities\";\n  }\n  static {\n    this.serviceType = ServiceType.MESSAGE;\n  }\n};\n\n// src/types/post.ts\nvar IPostService = class extends Service {\n  constructor() {\n    super(...arguments);\n    this.capabilityDescription = \"Social media posting and content management capabilities\";\n  }\n  static {\n    this.serviceType = ServiceType.POST;\n  }\n};\n\n// src/utils.ts\n\n\n\n\n\n\n// src/logger.ts\n\n\n// src/sentry/instrument.ts\n\nvar dsn = process.env.SENTRY_DSN || \"https://c20e2d51b66c14a783b0689d536f7e5c@o4509349865259008.ingest.us.sentry.io/4509352524120064\";\nif (process.env.SENTRY_LOGGING !== \"false\") {\n  _sentry_browser__WEBPACK_IMPORTED_MODULE_4__.onLoad(() => {\n    _sentry_browser__WEBPACK_IMPORTED_MODULE_4__.init({\n      dsn,\n      environment: process.env.SENTRY_ENVIRONMENT || \"development\",\n      tracesSampleRate: parseFloat(process.env.SENTRY_TRACES_SAMPLE_RATE ?? \"\") || 1,\n      sendDefaultPii: process.env.SENTRY_SEND_DEFAULT_PII === \"true\"\n    });\n  });\n}\n\n// src/logger.ts\nfunction parseBooleanFromText(value) {\n  if (!value) return false;\n  const normalized = value.toLowerCase().trim();\n  return normalized === \"true\" || normalized === \"1\" || normalized === \"yes\" || normalized === \"on\";\n}\nvar InMemoryDestination = class {\n  /**\n   * Constructor for creating a new instance of the class.\n   * @param {DestinationStream|null} stream - The stream to assign to the instance. Can be null.\n   */\n  constructor(stream) {\n    this.logs = [];\n    this.maxLogs = 1e3;\n    this.stream = stream;\n  }\n  /**\n   * Writes a log entry to the memory buffer and forwards it to the pretty print stream if available.\n   *\n   * @param {string | LogEntry} data - The data to be written, which can be either a string or a LogEntry object.\n   * @returns {void}\n   */\n  write(data) {\n    let logEntry;\n    let stringData;\n    if (typeof data === \"string\") {\n      stringData = data;\n      try {\n        logEntry = JSON.parse(data);\n      } catch (e) {\n        if (this.stream) {\n          this.stream.write(data);\n        }\n        return;\n      }\n    } else {\n      logEntry = data;\n      stringData = JSON.stringify(data);\n    }\n    if (!logEntry.time) {\n      logEntry.time = Date.now();\n    }\n    const isDebugMode2 = (process?.env?.LOG_LEVEL || \"\").toLowerCase() === \"debug\";\n    const isLoggingDiagnostic = Boolean(process?.env?.LOG_DIAGNOSTIC);\n    if (isLoggingDiagnostic) {\n      logEntry.diagnostic = true;\n    }\n    if (!isDebugMode2) {\n      if (logEntry.agentName && logEntry.agentId) {\n        const msg = logEntry.msg || \"\";\n        if (typeof msg === \"string\" && (msg.includes(\"registered successfully\") || msg.includes(\"Registering\") || msg.includes(\"Success:\") || msg.includes(\"linked to\") || msg.includes(\"Started\"))) {\n          if (isLoggingDiagnostic) {\n            console.error(\"Filtered log:\", stringData);\n          }\n          return;\n        }\n      }\n    }\n    this.logs.push(logEntry);\n    if (this.logs.length > this.maxLogs) {\n      this.logs.shift();\n    }\n    if (this.stream) {\n      this.stream.write(stringData);\n    }\n  }\n  /**\n   * Retrieves the recent logs from the system.\n   *\n   * @returns {LogEntry[]} An array of LogEntry objects representing the recent logs.\n   */\n  recentLogs() {\n    return this.logs;\n  }\n  /**\n   * Clears all logs from memory.\n   *\n   * @returns {void}\n   */\n  clear() {\n    this.logs = [];\n  }\n};\nvar customLevels = {\n  fatal: 60,\n  error: 50,\n  warn: 40,\n  info: 30,\n  log: 29,\n  progress: 28,\n  success: 27,\n  debug: 20,\n  trace: 10\n};\nvar raw = parseBooleanFromText(process?.env?.LOG_JSON_FORMAT) || false;\nvar isDebugMode = (process?.env?.LOG_LEVEL || \"\").toLowerCase() === \"debug\";\nvar effectiveLogLevel = isDebugMode ? \"debug\" : process?.env?.DEFAULT_LOG_LEVEL || \"info\";\nvar showTimestamps = process?.env?.LOG_TIMESTAMPS !== void 0 ? parseBooleanFromText(process?.env?.LOG_TIMESTAMPS) : true;\nvar createPrettyConfig = () => ({\n  colorize: true,\n  translateTime: showTimestamps ? \"yyyy-mm-dd HH:MM:ss\" : false,\n  ignore: showTimestamps ? \"pid,hostname\" : \"pid,hostname,time\",\n  levelColors: {\n    60: \"red\",\n    // fatal\n    50: \"red\",\n    // error\n    40: \"yellow\",\n    // warn\n    30: \"blue\",\n    // info\n    29: \"green\",\n    // log\n    28: \"cyan\",\n    // progress\n    27: \"greenBright\",\n    // success\n    20: \"magenta\",\n    // debug\n    10: \"grey\",\n    // trace\n    \"*\": \"white\"\n    // default for any unspecified level\n  },\n  customPrettifiers: {\n    level: (inputData) => {\n      let level;\n      if (typeof inputData === \"object\" && inputData !== null) {\n        level = inputData.level || inputData.value;\n      } else {\n        level = inputData;\n      }\n      const levelNames = {\n        10: \"TRACE\",\n        20: \"DEBUG\",\n        27: \"SUCCESS\",\n        28: \"PROGRESS\",\n        29: \"LOG\",\n        30: \"INFO\",\n        40: \"WARN\",\n        50: \"ERROR\",\n        60: \"FATAL\"\n      };\n      if (typeof level === \"number\") {\n        return levelNames[level] || `LEVEL${level}`;\n      }\n      if (level === void 0 || level === null) {\n        return \"UNKNOWN\";\n      }\n      return String(level).toUpperCase();\n    },\n    // Add a custom prettifier for error messages\n    msg: (msg) => {\n      return msg.replace(/ERROR \\([^)]+\\):/g, \"ERROR:\");\n    }\n  },\n  messageFormat: \"{msg}\"\n});\nvar createStream = async () => {\n  if (raw) {\n    return void 0;\n  }\n  const pretty = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/pino-pretty\"), __webpack_require__.e(\"vendor-chunks/fast-copy\"), __webpack_require__.e(\"vendor-chunks/dateformat\"), __webpack_require__.e(\"vendor-chunks/fast-safe-stringify\"), __webpack_require__.e(\"vendor-chunks/colorette\"), __webpack_require__.e(\"vendor-chunks/split2\"), __webpack_require__.e(\"vendor-chunks/pino-abstract-transport\"), __webpack_require__.e(\"vendor-chunks/end-of-stream\"), __webpack_require__.e(\"vendor-chunks/pump\"), __webpack_require__.e(\"vendor-chunks/once\"), __webpack_require__.e(\"vendor-chunks/wrappy\")]).then(__webpack_require__.t.bind(__webpack_require__, /*! pino-pretty */ \"(rsc)/./node_modules/pino-pretty/index.js\", 19));\n  return pretty.default(createPrettyConfig());\n};\nvar options = {\n  level: effectiveLogLevel,\n  // Use more restrictive level unless in debug mode\n  customLevels,\n  hooks: {\n    logMethod(inputArgs, method) {\n      const [arg1, ...rest] = inputArgs;\n      if (process.env.SENTRY_LOGGING !== \"false\") {\n        if (arg1 instanceof Error) {\n          _sentry_browser__WEBPACK_IMPORTED_MODULE_5__.captureException(arg1);\n        } else {\n          for (const item of rest) {\n            if (item instanceof Error) {\n              _sentry_browser__WEBPACK_IMPORTED_MODULE_5__.captureException(item);\n            }\n          }\n        }\n      }\n      const formatError = (err) => ({\n        message: `(${err.name}) ${err.message}`,\n        stack: err.stack?.split(\"\\n\").map((line) => line.trim())\n      });\n      if (typeof arg1 === \"object\") {\n        if (arg1 instanceof Error) {\n          method.apply(this, [\n            {\n              error: formatError(arg1)\n            }\n          ]);\n        } else {\n          const messageParts = rest.map(\n            (arg) => typeof arg === \"string\" ? arg : JSON.stringify(arg)\n          );\n          const message = messageParts.join(\" \");\n          method.apply(this, [arg1, message]);\n        }\n      } else {\n        const context = {};\n        const messageParts = [arg1, ...rest].map((arg) => {\n          if (arg instanceof Error) {\n            return formatError(arg);\n          }\n          return typeof arg === \"string\" ? arg : arg;\n        });\n        const message = messageParts.filter((part) => typeof part === \"string\").join(\" \");\n        const jsonParts = messageParts.filter((part) => typeof part === \"object\");\n        Object.assign(context, ...jsonParts);\n        method.apply(this, [context, message]);\n      }\n    }\n  }\n};\nvar createLogger = (bindings = false) => {\n  const opts = { ...options };\n  if (bindings) {\n    opts.base = bindings;\n    opts.transport = {\n      target: \"pino-pretty\",\n      // this is just a string, not a dynamic import\n      options: {\n        colorize: true,\n        translateTime: showTimestamps ? \"SYS:standard\" : false,\n        ignore: showTimestamps ? \"pid,hostname\" : \"pid,hostname,time\"\n      }\n    };\n  }\n  const logger2 = pino__WEBPACK_IMPORTED_MODULE_3__(opts);\n  return logger2;\n};\nvar logger = pino__WEBPACK_IMPORTED_MODULE_3__(options);\nif (typeof process !== \"undefined\") {\n  let stream = null;\n  if (!raw) {\n    try {\n      const pretty = __require(\"pino-pretty\");\n      stream = pretty.default ? pretty.default(createPrettyConfig()) : null;\n    } catch (e) {\n      createStream().then((prettyStream) => {\n        const destination = new InMemoryDestination(prettyStream);\n        logger = pino__WEBPACK_IMPORTED_MODULE_3__(options, destination);\n        logger[Symbol.for(\"pino-destination\")] = destination;\n        logger.clear = () => {\n          const destination2 = logger[Symbol.for(\"pino-destination\")];\n          if (destination2 instanceof InMemoryDestination) {\n            destination2.clear();\n          }\n        };\n      });\n    }\n  }\n  if (stream !== null || raw) {\n    const destination = new InMemoryDestination(stream);\n    logger = pino__WEBPACK_IMPORTED_MODULE_3__(options, destination);\n    logger[Symbol.for(\"pino-destination\")] = destination;\n    logger.clear = () => {\n      const destination2 = logger[Symbol.for(\"pino-destination\")];\n      if (destination2 instanceof InMemoryDestination) {\n        destination2.clear();\n      }\n    };\n  }\n}\nvar elizaLogger = logger;\nvar logger_default = logger;\n\n// src/utils.ts\nfunction upgradeDoubleToTriple(tpl) {\n  return tpl.replace(\n    // ────────╮ negative-LB: not already \"{{{\"\n    //          │   {{     ─ opening braces\n    //          │    ╰──── negative-LA: not {, #, /, !, >\n    //          ▼\n    /(?<!{){{(?![{#\\/!>])([\\s\\S]*?)}}/g,\n    (_match, inner) => {\n      if (inner.trim() === \"else\") return `{{${inner}}}`;\n      return `{{{${inner}}}}`;\n    }\n  );\n}\nvar composePrompt = ({\n  state,\n  template\n}) => {\n  const templateStr = typeof template === \"function\" ? template({ state }) : template;\n  const templateFunction = handlebars__WEBPACK_IMPORTED_MODULE_0__.compile(upgradeDoubleToTriple(templateStr));\n  const output = composeRandomUser(templateFunction(state), 10);\n  return output;\n};\nvar composePromptFromState = ({\n  state,\n  template\n}) => {\n  const templateStr = typeof template === \"function\" ? template({ state }) : template;\n  const templateFunction = handlebars__WEBPACK_IMPORTED_MODULE_0__.compile(upgradeDoubleToTriple(templateStr));\n  const stateKeys = Object.keys(state);\n  const filteredKeys = stateKeys.filter((key) => ![\"text\", \"values\", \"data\"].includes(key));\n  const filteredState = filteredKeys.reduce((acc, key) => {\n    acc[key] = state[key];\n    return acc;\n  }, {});\n  const output = composeRandomUser(templateFunction({ ...filteredState, ...state.values }), 10);\n  return output;\n};\nvar addHeader = (header, body) => {\n  return body.length > 0 ? `${header ? `${header}\n` : header}${body}\n` : \"\";\n};\nvar composeRandomUser = (template, length) => {\n  const exampleNames = Array.from(\n    { length },\n    () => (0,unique_names_generator__WEBPACK_IMPORTED_MODULE_6__.uniqueNamesGenerator)({ dictionaries: [unique_names_generator__WEBPACK_IMPORTED_MODULE_6__.names] })\n  );\n  let result = template;\n  for (let i = 0; i < exampleNames.length; i++) {\n    result = result.replaceAll(`{{name${i + 1}}}`, exampleNames[i]);\n  }\n  return result;\n};\nvar formatPosts = ({\n  messages,\n  entities,\n  conversationHeader = true\n}) => {\n  const groupedMessages = {};\n  messages.forEach((message) => {\n    if (message.roomId) {\n      if (!groupedMessages[message.roomId]) {\n        groupedMessages[message.roomId] = [];\n      }\n      groupedMessages[message.roomId].push(message);\n    }\n  });\n  Object.values(groupedMessages).forEach((roomMessages) => {\n    roomMessages.sort((a, b) => a.createdAt - b.createdAt);\n  });\n  const sortedRooms = Object.entries(groupedMessages).sort(\n    ([, messagesA], [, messagesB]) => messagesB[messagesB.length - 1].createdAt - messagesA[messagesA.length - 1].createdAt\n  );\n  const formattedPosts = sortedRooms.map(([roomId, roomMessages]) => {\n    const messageStrings = roomMessages.filter((message) => message.entityId).map((message) => {\n      const entity = entities.find((entity2) => entity2.id === message.entityId);\n      if (!entity) {\n        logger_default.warn({ entityId: message.entityId }, \"core::prompts:formatPosts - no entity for\");\n      }\n      const userName = entity?.names[0] || \"Unknown User\";\n      const displayName = entity?.names[0] || \"unknown\";\n      return `Name: ${userName} (@${displayName} EntityID:${message.entityId})\nMessageID: ${message.id}${message.content.inReplyTo ? `\nIn reply to: ${message.content.inReplyTo}` : \"\"}\nSource: ${message.content.source}\nDate: ${formatTimestamp(message.createdAt)}\nText:\n${message.content.text}`;\n    });\n    const header = conversationHeader ? `Conversation: ${roomId.slice(-5)}\n` : \"\";\n    return `${header}${messageStrings.join(\"\\n\\n\")}`;\n  });\n  return formattedPosts.join(\"\\n\\n\");\n};\nvar formatMessages = ({\n  messages,\n  entities\n}) => {\n  const messageStrings = messages.reverse().filter((message) => message.entityId).map((message) => {\n    const messageText = message.content.text;\n    const messageActions = message.content.actions;\n    const messageThought = message.content.thought;\n    const formattedName = entities.find((entity) => entity.id === message.entityId)?.names[0] || \"Unknown User\";\n    const attachments = message.content.attachments;\n    const attachmentString = attachments && attachments.length > 0 ? ` (Attachments: ${attachments.map((media) => {\n      const lines = [`[${media.id} - ${media.title} (${media.url})]`];\n      if (media.text) lines.push(`Text: ${media.text}`);\n      if (media.description) lines.push(`Description: ${media.description}`);\n      return lines.join(\"\\n\");\n    }).join(\n      // Use comma separator only if all attachments are single-line (no text/description)\n      attachments.every((media) => !media.text && !media.description) ? \", \" : \"\\n\"\n    )})` : null;\n    const messageTime = new Date(message.createdAt);\n    const hours = messageTime.getHours().toString().padStart(2, \"0\");\n    const minutes = messageTime.getMinutes().toString().padStart(2, \"0\");\n    const timeString = `${hours}:${minutes}`;\n    const timestamp = formatTimestamp(message.createdAt);\n    const thoughtString = messageThought ? `(${formattedName}'s internal thought: ${messageThought})` : null;\n    const timestampString = `${timeString} (${timestamp}) [${message.entityId}]`;\n    const textString = messageText ? `${timestampString} ${formattedName}: ${messageText}` : null;\n    const actionString = messageActions && messageActions.length > 0 ? `${textString ? \"\" : timestampString} (${formattedName}'s actions: ${messageActions.join(\", \")})` : null;\n    const messageString = [textString, thoughtString, actionString, attachmentString].filter(Boolean).join(\"\\n\");\n    return messageString;\n  }).join(\"\\n\");\n  return messageStrings;\n};\nvar formatTimestamp = (messageDate) => {\n  const now = /* @__PURE__ */ new Date();\n  const diff = now.getTime() - messageDate;\n  const absDiff = Math.abs(diff);\n  const seconds = Math.floor(absDiff / 1e3);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n  if (absDiff < 6e4) {\n    return \"just now\";\n  }\n  if (minutes < 60) {\n    return `${minutes} minute${minutes !== 1 ? \"s\" : \"\"} ago`;\n  }\n  if (hours < 24) {\n    return `${hours} hour${hours !== 1 ? \"s\" : \"\"} ago`;\n  }\n  return `${days} day${days !== 1 ? \"s\" : \"\"} ago`;\n};\nvar jsonBlockPattern = /```json\\n([\\s\\S]*?)\\n```/;\nfunction parseKeyValueXml(text) {\n  if (!text) return null;\n  let xmlBlockMatch = text.match(/<response>([\\s\\S]*?)<\\/response>/);\n  let xmlContent;\n  if (xmlBlockMatch) {\n    xmlContent = xmlBlockMatch[1];\n    logger_default.debug(\"Found response XML block\");\n  } else {\n    const findFirstXmlBlock = (input) => {\n      let i = 0;\n      const length = input.length;\n      while (i < length) {\n        const openIdx = input.indexOf(\"<\", i);\n        if (openIdx === -1) break;\n        if (input.startsWith(\"</\", openIdx) || input.startsWith(\"<!--\", openIdx) || input.startsWith(\"<?\", openIdx)) {\n          i = openIdx + 1;\n          continue;\n        }\n        let j = openIdx + 1;\n        let tag = \"\";\n        while (j < length) {\n          const ch = input[j];\n          if (/^[A-Za-z0-9_-]$/.test(ch)) {\n            tag += ch;\n            j++;\n            continue;\n          }\n          break;\n        }\n        if (!tag) {\n          i = openIdx + 1;\n          continue;\n        }\n        const startTagEnd = input.indexOf(\">\", j);\n        if (startTagEnd === -1) break;\n        const startTagText = input.slice(openIdx, startTagEnd + 1);\n        if (/\\/\\s*>$/.test(startTagText)) {\n          i = startTagEnd + 1;\n          continue;\n        }\n        const closeSeq = `</${tag}>`;\n        let depth = 1;\n        let searchStart = startTagEnd + 1;\n        while (depth > 0 && searchStart < length) {\n          const nextOpen = input.indexOf(`<${tag}`, searchStart);\n          const nextClose = input.indexOf(closeSeq, searchStart);\n          if (nextClose === -1) {\n            break;\n          }\n          if (nextOpen !== -1 && nextOpen < nextClose) {\n            const nestedStartEnd = input.indexOf(\">\", nextOpen + 1);\n            if (nestedStartEnd === -1) {\n              break;\n            }\n            const nestedStartText = input.slice(nextOpen, nestedStartEnd + 1);\n            if (/\\/\\s*>$/.test(nestedStartText)) {\n              searchStart = nestedStartEnd + 1;\n            } else {\n              depth++;\n              searchStart = nestedStartEnd + 1;\n            }\n          } else {\n            depth--;\n            searchStart = nextClose + closeSeq.length;\n          }\n        }\n        if (depth === 0) {\n          const closeIdx = searchStart - closeSeq.length;\n          const inner = input.slice(startTagEnd + 1, closeIdx);\n          return { tag, content: inner };\n        }\n        i = startTagEnd + 1;\n      }\n      return null;\n    };\n    const fb = findFirstXmlBlock(text);\n    if (!fb) {\n      logger_default.warn(\"Could not find XML block in text\");\n      logger_default.debug({ textPreview: text.substring(0, 200) + \"...\" }, \"Text content\");\n      return null;\n    }\n    xmlContent = fb.content;\n    logger_default.debug(`Found XML block with tag: ${fb.tag}`);\n  }\n  const result = {};\n  const extractDirectChildren = (input) => {\n    const pairs = [];\n    const length = input.length;\n    let i = 0;\n    while (i < length) {\n      const openIdx = input.indexOf(\"<\", i);\n      if (openIdx === -1) break;\n      if (input.startsWith(\"</\", openIdx) || input.startsWith(\"<!--\", openIdx) || input.startsWith(\"<?\", openIdx)) {\n        i = openIdx + 1;\n        continue;\n      }\n      let j = openIdx + 1;\n      let tag = \"\";\n      while (j < length) {\n        const ch = input[j];\n        if (/^[A-Za-z0-9_-]$/.test(ch)) {\n          tag += ch;\n          j++;\n          continue;\n        }\n        break;\n      }\n      if (!tag) {\n        i = openIdx + 1;\n        continue;\n      }\n      const startTagEnd = input.indexOf(\">\", j);\n      if (startTagEnd === -1) break;\n      const startTagText = input.slice(openIdx, startTagEnd + 1);\n      if (/\\/\\s*>$/.test(startTagText)) {\n        i = startTagEnd + 1;\n        continue;\n      }\n      const closeSeq = `</${tag}>`;\n      let depth = 1;\n      let searchStart = startTagEnd + 1;\n      while (depth > 0 && searchStart < length) {\n        const nextOpen = input.indexOf(`<${tag}`, searchStart);\n        const nextClose = input.indexOf(closeSeq, searchStart);\n        if (nextClose === -1) {\n          break;\n        }\n        if (nextOpen !== -1 && nextOpen < nextClose) {\n          const nestedStartEnd = input.indexOf(\">\", nextOpen + 1);\n          if (nestedStartEnd === -1) {\n            break;\n          }\n          const nestedStartText = input.slice(nextOpen, nestedStartEnd + 1);\n          if (!/\\/\\s*>$/.test(nestedStartText)) {\n            depth++;\n          }\n          searchStart = nestedStartEnd + 1;\n        } else {\n          depth--;\n          searchStart = nextClose + closeSeq.length;\n        }\n      }\n      if (depth !== 0) {\n        i = startTagEnd + 1;\n        continue;\n      }\n      const closeIdx = searchStart - closeSeq.length;\n      const innerRaw = input.slice(startTagEnd + 1, closeIdx);\n      const unescaped = innerRaw.replace(/&lt;/g, \"<\").replace(/&gt;/g, \">\").replace(/&amp;/g, \"&\").replace(/&quot;/g, '\"').replace(/&apos;/g, \"'\").trim();\n      pairs.push({ key: tag, value: unescaped });\n      i = searchStart;\n    }\n    return pairs;\n  };\n  const children = extractDirectChildren(xmlContent);\n  for (const { key, value } of children) {\n    if (key === \"actions\" || key === \"providers\" || key === \"evaluators\") {\n      result[key] = value ? value.split(\",\").map((s) => s.trim()) : [];\n    } else if (key === \"simple\") {\n      result[key] = value.toLowerCase() === \"true\";\n    } else {\n      result[key] = value;\n    }\n  }\n  if (Object.keys(result).length === 0) {\n    logger_default.warn(\"No key-value pairs extracted from XML content\");\n    logger_default.debug({ xmlPreview: xmlContent.substring(0, 200) + \"...\" }, \"XML content was\");\n    return null;\n  }\n  return result;\n}\nfunction parseJSONObjectFromText(text) {\n  let jsonData = null;\n  const jsonBlockMatch = text.match(jsonBlockPattern);\n  try {\n    if (jsonBlockMatch) {\n      jsonData = JSON.parse(normalizeJsonString(jsonBlockMatch[1].trim()));\n    } else {\n      jsonData = JSON.parse(normalizeJsonString(text.trim()));\n    }\n  } catch (_e) {\n    return null;\n  }\n  if (jsonData && typeof jsonData === \"object\" && !Array.isArray(jsonData)) {\n    return jsonData;\n  }\n  return null;\n}\nvar normalizeJsonString = (str) => {\n  str = str.replace(/\\{\\s+/, \"{\").replace(/\\s+\\}/, \"}\").trim();\n  str = str.replace(/(\"[\\w\\d_-]+\")\\s*: \\s*(?!\"|\\[)([\\s\\S]+?)(?=(,\\s*\"|\\}$))/g, '$1: \"$2\"');\n  str = str.replace(/\"([^\"]+)\"\\s*:\\s*'([^']*)'/g, (_, key, value) => `\"${key}\": \"${value}\"`);\n  str = str.replace(/(\"[\\w\\d_-]+\")\\s*:\\s*([A-Za-z_]+)(?![\"\\w])/g, '$1: \"$2\"');\n  return str;\n};\nfunction truncateToCompleteSentence(text, maxLength) {\n  if (text.length <= maxLength) {\n    return text;\n  }\n  const lastPeriodIndex = text.lastIndexOf(\".\", maxLength - 1);\n  if (lastPeriodIndex !== -1) {\n    const truncatedAtPeriod = text.slice(0, lastPeriodIndex + 1).trim();\n    if (truncatedAtPeriod.length > 0) {\n      return truncatedAtPeriod;\n    }\n  }\n  const lastSpaceIndex = text.lastIndexOf(\" \", maxLength - 1);\n  if (lastSpaceIndex !== -1) {\n    const truncatedAtSpace = text.slice(0, lastSpaceIndex).trim();\n    if (truncatedAtSpace.length > 0) {\n      return `${truncatedAtSpace}...`;\n    }\n  }\n  const hardTruncated = text.slice(0, maxLength - 3).trim();\n  return `${hardTruncated}...`;\n}\nasync function splitChunks(content, chunkSize = 512, bleed = 20) {\n  logger_default.debug(\"[splitChunks] Starting text split\");\n  const characterstoTokens = 3.5;\n  const textSplitter = new langchain_text_splitter__WEBPACK_IMPORTED_MODULE_2__.RecursiveCharacterTextSplitter({\n    chunkSize: Number(Math.floor(chunkSize * characterstoTokens)),\n    chunkOverlap: Number(Math.floor(bleed * characterstoTokens))\n  });\n  const chunks = await textSplitter.splitText(content);\n  logger_default.debug(\n    {\n      numberOfChunks: chunks.length,\n      averageChunkSize: chunks.reduce((acc, chunk) => acc + chunk.length, 0) / chunks.length\n    },\n    \"[splitChunks] Split complete\"\n  );\n  return chunks;\n}\nasync function trimTokens(prompt, maxTokens, runtime) {\n  if (!prompt) throw new Error(\"Trim tokens received a null prompt\");\n  if (prompt.length < maxTokens / 5) return prompt;\n  if (maxTokens <= 0) throw new Error(\"maxTokens must be positive\");\n  const tokens = await runtime.useModel(ModelType.TEXT_TOKENIZER_ENCODE, {\n    prompt\n  });\n  if (tokens.length <= maxTokens) {\n    return prompt;\n  }\n  const truncatedTokens = tokens.slice(-maxTokens);\n  return await runtime.useModel(ModelType.TEXT_TOKENIZER_DECODE, {\n    tokens: truncatedTokens\n  });\n}\nfunction safeReplacer() {\n  const seen = /* @__PURE__ */ new WeakSet();\n  return function(_key, value) {\n    if (typeof value === \"object\" && value !== null) {\n      if (seen.has(value)) {\n        return \"[Circular]\";\n      }\n      seen.add(value);\n    }\n    return value;\n  };\n}\nfunction parseBooleanFromText2(value) {\n  if (!value) return false;\n  const affirmative = [\"YES\", \"Y\", \"TRUE\", \"T\", \"1\", \"ON\", \"ENABLE\"];\n  const negative = [\"NO\", \"N\", \"FALSE\", \"F\", \"0\", \"OFF\", \"DISABLE\"];\n  const normalizedText = value.trim().toUpperCase();\n  if (affirmative.includes(normalizedText)) {\n    return true;\n  }\n  if (negative.includes(normalizedText)) {\n    return false;\n  }\n  return false;\n}\nvar uuidSchema = zod__WEBPACK_IMPORTED_MODULE_7__.string().uuid();\nfunction validateUuid(value) {\n  const result = uuidSchema.safeParse(value);\n  return result.success ? result.data : null;\n}\nfunction stringToUuid(target) {\n  if (typeof target === \"number\") {\n    target = target.toString();\n  }\n  if (typeof target !== \"string\") {\n    throw TypeError(\"Value must be string\");\n  }\n  const _uint8ToHex = (ubyte) => {\n    const first = ubyte >> 4;\n    const second = ubyte - (first << 4);\n    const HEX_DIGITS = \"0123456789abcdef\".split(\"\");\n    return HEX_DIGITS[first] + HEX_DIGITS[second];\n  };\n  const _uint8ArrayToHex = (buf) => {\n    let out = \"\";\n    for (let i = 0; i < buf.length; i++) {\n      out += _uint8ToHex(buf[i]);\n    }\n    return out;\n  };\n  const escapedStr = encodeURIComponent(target);\n  const buffer = new Uint8Array(escapedStr.length);\n  for (let i = 0; i < escapedStr.length; i++) {\n    buffer[i] = escapedStr[i].charCodeAt(0);\n  }\n  const hash = (0,js_sha1__WEBPACK_IMPORTED_MODULE_1__.sha1)(buffer);\n  const hashBuffer = new Uint8Array(hash.length / 2);\n  for (let i = 0; i < hash.length; i += 2) {\n    hashBuffer[i / 2] = Number.parseInt(hash.slice(i, i + 2), 16);\n  }\n  return `${_uint8ArrayToHex(hashBuffer.slice(0, 4))}-${_uint8ArrayToHex(hashBuffer.slice(4, 6))}-${_uint8ToHex(hashBuffer[6] & 15)}${_uint8ToHex(hashBuffer[7])}-${_uint8ToHex(hashBuffer[8] & 63 | 128)}${_uint8ToHex(hashBuffer[9])}-${_uint8ArrayToHex(hashBuffer.slice(10, 16))}`;\n}\nvar getContentTypeFromMimeType = (mimeType) => {\n  if (mimeType.startsWith(\"image/\")) return \"image\" /* IMAGE */;\n  if (mimeType.startsWith(\"video/\")) return \"video\" /* VIDEO */;\n  if (mimeType.startsWith(\"audio/\")) return \"audio\" /* AUDIO */;\n  if (mimeType.includes(\"pdf\") || mimeType.includes(\"document\") || mimeType.startsWith(\"text/\")) {\n    return \"document\" /* DOCUMENT */;\n  }\n  return void 0;\n};\nfunction getLocalServerUrl(path) {\n  const port = process.env.SERVER_PORT || \"3000\";\n  return `http://localhost:${port}${path}`;\n}\n\n// src/schemas/character.ts\n\nvar uuidSchema2 = zod__WEBPACK_IMPORTED_MODULE_7__.string().regex(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i, \"Invalid UUID format\");\nvar contentSchema = zod__WEBPACK_IMPORTED_MODULE_7__.object({\n  text: zod__WEBPACK_IMPORTED_MODULE_7__.string().optional(),\n  thought: zod__WEBPACK_IMPORTED_MODULE_7__.string().optional(),\n  actions: zod__WEBPACK_IMPORTED_MODULE_7__.array(zod__WEBPACK_IMPORTED_MODULE_7__.string()).optional(),\n  providers: zod__WEBPACK_IMPORTED_MODULE_7__.array(zod__WEBPACK_IMPORTED_MODULE_7__.string()).optional(),\n  source: zod__WEBPACK_IMPORTED_MODULE_7__.string().optional(),\n  target: zod__WEBPACK_IMPORTED_MODULE_7__.string().optional(),\n  url: zod__WEBPACK_IMPORTED_MODULE_7__.string().optional(),\n  inReplyTo: uuidSchema2.optional(),\n  attachments: zod__WEBPACK_IMPORTED_MODULE_7__.array(zod__WEBPACK_IMPORTED_MODULE_7__.any()).optional(),\n  channelType: zod__WEBPACK_IMPORTED_MODULE_7__.string().optional()\n}).passthrough();\nvar messageExampleSchema = zod__WEBPACK_IMPORTED_MODULE_7__.object({\n  name: zod__WEBPACK_IMPORTED_MODULE_7__.string(),\n  content: contentSchema\n});\nvar directoryItemSchema = zod__WEBPACK_IMPORTED_MODULE_7__.object({\n  directory: zod__WEBPACK_IMPORTED_MODULE_7__.string(),\n  shared: zod__WEBPACK_IMPORTED_MODULE_7__.boolean().optional()\n});\nvar knowledgeItemSchema = zod__WEBPACK_IMPORTED_MODULE_7__.union([\n  zod__WEBPACK_IMPORTED_MODULE_7__.string(),\n  zod__WEBPACK_IMPORTED_MODULE_7__.object({\n    path: zod__WEBPACK_IMPORTED_MODULE_7__.string(),\n    shared: zod__WEBPACK_IMPORTED_MODULE_7__.boolean().optional()\n  }),\n  directoryItemSchema\n]);\nvar templateTypeSchema = zod__WEBPACK_IMPORTED_MODULE_7__.union([\n  zod__WEBPACK_IMPORTED_MODULE_7__.string(),\n  zod__WEBPACK_IMPORTED_MODULE_7__[\"function\"]().optional()\n  // Functions won't be in JSON but allowed in runtime\n]);\nvar styleSchema = zod__WEBPACK_IMPORTED_MODULE_7__.object({\n  all: zod__WEBPACK_IMPORTED_MODULE_7__.array(zod__WEBPACK_IMPORTED_MODULE_7__.string()).optional(),\n  chat: zod__WEBPACK_IMPORTED_MODULE_7__.array(zod__WEBPACK_IMPORTED_MODULE_7__.string()).optional(),\n  post: zod__WEBPACK_IMPORTED_MODULE_7__.array(zod__WEBPACK_IMPORTED_MODULE_7__.string()).optional()\n}).optional();\nvar settingsSchema = zod__WEBPACK_IMPORTED_MODULE_7__.record(zod__WEBPACK_IMPORTED_MODULE_7__.union([zod__WEBPACK_IMPORTED_MODULE_7__.string(), zod__WEBPACK_IMPORTED_MODULE_7__.boolean(), zod__WEBPACK_IMPORTED_MODULE_7__.number(), zod__WEBPACK_IMPORTED_MODULE_7__.any()])).optional();\nvar secretsSchema = zod__WEBPACK_IMPORTED_MODULE_7__.record(zod__WEBPACK_IMPORTED_MODULE_7__.union([zod__WEBPACK_IMPORTED_MODULE_7__.string(), zod__WEBPACK_IMPORTED_MODULE_7__.boolean(), zod__WEBPACK_IMPORTED_MODULE_7__.number()])).optional();\nvar characterSchema = zod__WEBPACK_IMPORTED_MODULE_7__.object({\n  id: uuidSchema2.optional(),\n  name: zod__WEBPACK_IMPORTED_MODULE_7__.string().min(1, \"Character name is required\"),\n  username: zod__WEBPACK_IMPORTED_MODULE_7__.string().optional(),\n  system: zod__WEBPACK_IMPORTED_MODULE_7__.string().optional(),\n  templates: zod__WEBPACK_IMPORTED_MODULE_7__.record(templateTypeSchema).optional(),\n  bio: zod__WEBPACK_IMPORTED_MODULE_7__.union([zod__WEBPACK_IMPORTED_MODULE_7__.string(), zod__WEBPACK_IMPORTED_MODULE_7__.array(zod__WEBPACK_IMPORTED_MODULE_7__.string())]),\n  messageExamples: zod__WEBPACK_IMPORTED_MODULE_7__.array(zod__WEBPACK_IMPORTED_MODULE_7__.array(messageExampleSchema)).optional(),\n  postExamples: zod__WEBPACK_IMPORTED_MODULE_7__.array(zod__WEBPACK_IMPORTED_MODULE_7__.string()).optional(),\n  topics: zod__WEBPACK_IMPORTED_MODULE_7__.array(zod__WEBPACK_IMPORTED_MODULE_7__.string()).optional(),\n  adjectives: zod__WEBPACK_IMPORTED_MODULE_7__.array(zod__WEBPACK_IMPORTED_MODULE_7__.string()).optional(),\n  knowledge: zod__WEBPACK_IMPORTED_MODULE_7__.array(knowledgeItemSchema).optional(),\n  plugins: zod__WEBPACK_IMPORTED_MODULE_7__.array(zod__WEBPACK_IMPORTED_MODULE_7__.string()).optional(),\n  settings: settingsSchema,\n  secrets: secretsSchema,\n  style: styleSchema\n}).strict();\nfunction validateCharacter(data) {\n  const result = characterSchema.safeParse(data);\n  if (result.success) {\n    return {\n      success: true,\n      data: result.data\n    };\n  }\n  return {\n    success: false,\n    error: {\n      message: `Character validation failed: ${result.error.message}`,\n      issues: result.error.issues\n    }\n  };\n}\nfunction parseAndValidateCharacter(jsonString) {\n  try {\n    const parsed = JSON.parse(jsonString);\n    return validateCharacter(parsed);\n  } catch (error) {\n    return {\n      success: false,\n      error: {\n        message: `Invalid JSON: ${error instanceof Error ? error.message : \"Unknown JSON parsing error\"}`\n      }\n    };\n  }\n}\nfunction isValidCharacter(data) {\n  return validateCharacter(data).success;\n}\n\n// src/actions.ts\n\nvar composeActionExamples = (actionsData, count) => {\n  if (!actionsData.length || count <= 0) {\n    return \"\";\n  }\n  const actionsWithExamples = actionsData.filter(\n    (action) => action.examples && Array.isArray(action.examples) && action.examples.length > 0\n  );\n  if (!actionsWithExamples.length) {\n    return \"\";\n  }\n  const examplesCopy = actionsWithExamples.map((action) => [\n    ...action.examples\n  ]);\n  const selectedExamples = [];\n  let availableActionIndices = examplesCopy.map((examples, index) => examples.length > 0 ? index : -1).filter((index) => index !== -1);\n  while (selectedExamples.length < count && availableActionIndices.length > 0) {\n    const randomIndex = Math.floor(Math.random() * availableActionIndices.length);\n    const actionIndex = availableActionIndices[randomIndex];\n    const examples = examplesCopy[actionIndex];\n    const exampleIndex = Math.floor(Math.random() * examples.length);\n    selectedExamples.push(examples.splice(exampleIndex, 1)[0]);\n    if (examples.length === 0) {\n      availableActionIndices.splice(randomIndex, 1);\n    }\n  }\n  return formatSelectedExamples(selectedExamples);\n};\nvar formatSelectedExamples = (examples) => {\n  const MAX_NAME_PLACEHOLDERS = 5;\n  return examples.map((example) => {\n    const randomNames = Array.from(\n      { length: MAX_NAME_PLACEHOLDERS },\n      () => (0,unique_names_generator__WEBPACK_IMPORTED_MODULE_6__.uniqueNamesGenerator)({ dictionaries: [unique_names_generator__WEBPACK_IMPORTED_MODULE_6__.names] })\n    );\n    const conversation = example.map((message) => {\n      let messageText = `${message.name}: ${message.content.text}`;\n      for (let i = 0; i < randomNames.length; i++) {\n        messageText = messageText.replaceAll(`{{name${i + 1}}}`, randomNames[i]);\n      }\n      return messageText;\n    }).join(\"\\n\");\n    return `\n${conversation}`;\n  }).join(\"\\n\");\n};\nfunction formatActionNames(actions) {\n  if (!actions?.length) return \"\";\n  return [...actions].sort(() => Math.random() - 0.5).map((action) => action.name).join(\", \");\n}\nfunction formatActions(actions) {\n  if (!actions?.length) return \"\";\n  return [...actions].sort(() => Math.random() - 0.5).map((action) => `- **${action.name}**: ${action.description || \"No description available\"}`).join(\"\\n\");\n}\n\n// src/database.ts\nvar DatabaseAdapter = class {\n};\n\n// src/entities.ts\nvar entityResolutionTemplate = `# Task: Resolve Entity Name\nMessage Sender: {{senderName}} (ID: {{senderId}})\nAgent: {{agentName}} (ID: {{agentId}})\n\n# Entities in Room:\n{{#if entitiesInRoom}}\n{{entitiesInRoom}}\n{{/if}}\n\n{{recentMessages}}\n\n# Instructions:\n1. Analyze the context to identify which entity is being referenced\n2. Consider special references like \"me\" (the message sender) or \"you\" (agent the message is directed to)\n3. Look for usernames/handles in standard formats (e.g. @username, user#1234)\n4. Consider context from recent messages for pronouns and references\n5. If multiple matches exist, use context to disambiguate\n6. Consider recent interactions and relationship strength when resolving ambiguity\n\nDo NOT include any thinking, reasoning, or <think> sections in your response. \nGo directly to the XML response format without any preamble or explanation.\n\nReturn an XML response with:\n<response>\n  <entityId>exact-id-if-known-otherwise-null</entityId>\n  <type>EXACT_MATCH | USERNAME_MATCH | NAME_MATCH | RELATIONSHIP_MATCH | AMBIGUOUS | UNKNOWN</type>\n  <matches>\n    <match>\n      <name>matched-name</name>\n      <reason>why this entity matches</reason>\n    </match>\n  </matches>\n</response>\n\nIMPORTANT: Your response must ONLY contain the <response></response> XML block above. Do not include any text, thinking, or reasoning before or after this XML block. Start your response immediately with <response> and end with </response>.`;\nasync function getRecentInteractions(runtime, sourceEntityId, candidateEntities, roomId, relationships) {\n  const results = [];\n  const recentMessages = await runtime.getMemories({\n    tableName: \"messages\",\n    roomId,\n    count: 20\n    // Reduced from 100 since we only need context\n  });\n  for (const entity of candidateEntities) {\n    const interactions = [];\n    let interactionScore = 0;\n    const directReplies = recentMessages.filter(\n      (msg) => msg.entityId === sourceEntityId && msg.content.inReplyTo === entity.id || msg.entityId === entity.id && msg.content.inReplyTo === sourceEntityId\n    );\n    interactions.push(...directReplies);\n    const relationship = relationships.find(\n      (rel) => rel.sourceEntityId === sourceEntityId && rel.targetEntityId === entity.id || rel.targetEntityId === sourceEntityId && rel.sourceEntityId === entity.id\n    );\n    if (relationship?.metadata?.interactions) {\n      interactionScore = relationship.metadata.interactions;\n    }\n    interactionScore += directReplies.length;\n    const uniqueInteractions = [...new Set(interactions)];\n    results.push({\n      entity,\n      interactions: uniqueInteractions.slice(-5),\n      // Only keep last 5 messages for context\n      count: Math.round(interactionScore)\n    });\n  }\n  return results.sort((a, b) => b.count - a.count);\n}\nasync function findEntityByName(runtime, message, state) {\n  const room = state.data.room ?? await runtime.getRoom(message.roomId);\n  if (!room) {\n    logger.warn(\"Room not found for entity search\");\n    return null;\n  }\n  const world = room.worldId ? await runtime.getWorld(room.worldId) : null;\n  const entitiesInRoom = await runtime.getEntitiesForRoom(room.id, true);\n  const filteredEntities = await Promise.all(\n    entitiesInRoom.map(async (entity) => {\n      if (!entity.components) return entity;\n      const worldRoles = world?.metadata?.roles || {};\n      entity.components = entity.components.filter((component) => {\n        if (component.sourceEntityId === message.entityId) return true;\n        if (world && component.sourceEntityId) {\n          const sourceRole = worldRoles[component.sourceEntityId];\n          if (sourceRole === \"OWNER\" || sourceRole === \"ADMIN\") return true;\n        }\n        if (component.sourceEntityId === runtime.agentId) return true;\n        return false;\n      });\n      return entity;\n    })\n  );\n  const relationships = await runtime.getRelationships({\n    entityId: message.entityId\n  });\n  const relationshipEntities = await Promise.all(\n    relationships.map(async (rel) => {\n      const entityId = rel.sourceEntityId === message.entityId ? rel.targetEntityId : rel.sourceEntityId;\n      return runtime.getEntityById(entityId);\n    })\n  );\n  const allEntities = [\n    ...filteredEntities,\n    ...relationshipEntities.filter((e) => e !== null)\n  ];\n  const interactionData = await getRecentInteractions(\n    runtime,\n    message.entityId,\n    allEntities,\n    room.id,\n    relationships\n  );\n  const prompt = composePrompt({\n    state: {\n      roomName: room.name || room.id,\n      worldName: world?.name || \"Unknown\",\n      entitiesInRoom: JSON.stringify(filteredEntities, null, 2),\n      entityId: message.entityId,\n      senderId: message.entityId\n    },\n    template: entityResolutionTemplate\n  });\n  const result = await runtime.useModel(ModelType.TEXT_SMALL, {\n    prompt,\n    stopSequences: []\n  });\n  const resolution = parseKeyValueXml(result);\n  if (!resolution) {\n    logger.warn(\"Failed to parse entity resolution result\");\n    return null;\n  }\n  if (resolution.type === \"EXACT_MATCH\" && resolution.entityId) {\n    const entity = await runtime.getEntityById(resolution.entityId);\n    if (entity) {\n      if (entity.components) {\n        const worldRoles = world?.metadata?.roles || {};\n        entity.components = entity.components.filter((component) => {\n          if (component.sourceEntityId === message.entityId) return true;\n          if (world && component.sourceEntityId) {\n            const sourceRole = worldRoles[component.sourceEntityId];\n            if (sourceRole === \"OWNER\" || sourceRole === \"ADMIN\") return true;\n          }\n          if (component.sourceEntityId === runtime.agentId) return true;\n          return false;\n        });\n      }\n      return entity;\n    }\n  }\n  let matchesArray = [];\n  if (resolution.matches?.match) {\n    matchesArray = Array.isArray(resolution.matches.match) ? resolution.matches.match : [resolution.matches.match];\n  }\n  if (matchesArray.length > 0 && matchesArray[0]?.name) {\n    const matchName = matchesArray[0].name.toLowerCase();\n    const matchingEntity = allEntities.find((entity) => {\n      if (entity.names.some((n) => n.toLowerCase() === matchName)) return true;\n      return entity.components?.some(\n        (c) => c.data.username?.toLowerCase() === matchName || c.data.handle?.toLowerCase() === matchName\n      );\n    });\n    if (matchingEntity) {\n      if (resolution.type === \"RELATIONSHIP_MATCH\") {\n        const interactionInfo = interactionData.find((d) => d.entity.id === matchingEntity.id);\n        if (interactionInfo && interactionInfo.count > 0) {\n          return matchingEntity;\n        }\n      } else {\n        return matchingEntity;\n      }\n    }\n  }\n  return null;\n}\nvar createUniqueUuid = (runtime, baseUserId) => {\n  if (baseUserId === runtime.agentId) {\n    return runtime.agentId;\n  }\n  const combinedString = `${baseUserId}:${runtime.agentId}`;\n  return stringToUuid(combinedString);\n};\nasync function getEntityDetails({\n  runtime,\n  roomId\n}) {\n  const [room, roomEntities] = await Promise.all([\n    runtime.getRoom(roomId),\n    runtime.getEntitiesForRoom(roomId, true)\n  ]);\n  const uniqueEntities = /* @__PURE__ */ new Map();\n  for (const entity of roomEntities) {\n    if (uniqueEntities.has(entity.id)) continue;\n    const allData = {};\n    for (const component of entity.components || []) {\n      Object.assign(allData, component.data);\n    }\n    const mergedData = {};\n    for (const [key, value] of Object.entries(allData)) {\n      if (!mergedData[key]) {\n        mergedData[key] = value;\n        continue;\n      }\n      if (Array.isArray(mergedData[key]) && Array.isArray(value)) {\n        mergedData[key] = [.../* @__PURE__ */ new Set([...mergedData[key], ...value])];\n      } else if (typeof mergedData[key] === \"object\" && typeof value === \"object\") {\n        mergedData[key] = { ...mergedData[key], ...value };\n      }\n    }\n    uniqueEntities.set(entity.id, {\n      id: entity.id,\n      name: room?.source ? entity.metadata[room.source]?.name || entity.names[0] : entity.names[0],\n      names: entity.names,\n      data: JSON.stringify({ ...mergedData, ...entity.metadata })\n    });\n  }\n  return Array.from(uniqueEntities.values());\n}\nfunction formatEntities({ entities }) {\n  const entityStrings = entities.map((entity) => {\n    const header = `\"${entity.names.join('\" aka \"')}\"\nID: ${entity.id}${entity.metadata && Object.keys(entity.metadata).length > 0 ? `\nData: ${JSON.stringify(entity.metadata)}\n` : \"\\n\"}`;\n    return header;\n  });\n  return entityStrings.join(\"\\n\");\n}\n\n// src/prompts.ts\nvar shouldRespondTemplate = `<task>Decide on behalf of {{agentName}} whether they should respond to the message, ignore it or stop the conversation.</task>\n\n<providers>\n{{providers}}\n</providers>\n\n<instructions>Decide if {{agentName}} should respond to or interact with the conversation.\nIf the message is directed at or relevant to {{agentName}}, respond with RESPOND action.\nIf a user asks {{agentName}} to be quiet, respond with STOP action.\nIf {{agentName}} should ignore the message, respond with IGNORE action.</instructions>\n\n<output>\nDo NOT include any thinking, reasoning, or <think> sections in your response. \nGo directly to the XML response format without any preamble or explanation.\n\nRespond using XML format like this:\n<response>\n  <name>{{agentName}}</name>\n  <reasoning>Your reasoning here</reasoning>\n  <action>RESPOND | IGNORE | STOP</action>\n</response>\n\nIMPORTANT: Your response must ONLY contain the <response></response> XML block above. Do not include any text, thinking, or reasoning before or after this XML block. Start your response immediately with <response> and end with </response>.\n</output>`;\nvar messageHandlerTemplate = `<task>Generate dialog and actions for the character {{agentName}}.</task>\n\n<providers>\n{{providers}}\n</providers>\n\nThese are the available valid actions:\n<actionNames>\n{{actionNames}}\n</actionNames>\n\n<instructions>\nWrite a thought and plan for {{agentName}} and decide what actions to take. Also include the providers that {{agentName}} will use to have the right context for responding and acting, if any.\n\nIMPORTANT ACTION ORDERING RULES:\n- Actions are executed in the ORDER you list them - the order MATTERS!\n- REPLY should come FIRST to acknowledge the user's request before executing other actions\n- Common patterns:\n  - For requests requiring tool use: REPLY,CALL_MCP_TOOL (acknowledge first, then gather info)\n  - For task execution: REPLY,SEND_MESSAGE or REPLY,EVM_SWAP_TOKENS (acknowledge first, then do the task)\n  - For multi-step operations: REPLY,ACTION1,ACTION2 (acknowledge first, then complete all steps)\n- REPLY is used to acknowledge and inform the user about what you're going to do\n- Follow-up actions execute the actual tasks after acknowledgment\n- Use IGNORE only when you should not respond at all\n- If you use IGNORE, do not include any other actions. IGNORE should be used alone when you should not respond or take any actions.\n\nIMPORTANT PROVIDER SELECTION RULES:\n- Only include providers if they are needed to respond accurately.\n- If the message mentions images, photos, pictures, attachments, or visual content, OR if you see \"(Attachments:\" in the conversation, you MUST include \"ATTACHMENTS\" in your providers list\n- If the message asks about or references specific people, include \"ENTITIES\" in your providers list  \n- If the message asks about relationships or connections between people, include \"RELATIONSHIPS\" in your providers list\n- If the message asks about facts or specific information, include \"FACTS\" in your providers list\n- If the message asks about the environment or world context, include \"WORLD\" in your providers list\n- If no additional context is needed, you may leave the providers list empty.\n\nIMPORTANT CODE BLOCK FORMATTING RULES:\n- If {{agentName}} includes code examples, snippets, or multi-line code in the response, ALWAYS wrap the code with \\`\\`\\` fenced code blocks (specify the language if known, e.g., \\`\\`\\`python).\n- ONLY use fenced code blocks for actual code. Do NOT wrap non-code text, instructions, or single words in fenced code blocks.\n- If including inline code (short single words or function names), use single backticks (\\`) as appropriate.\n- This ensures the user sees clearly formatted and copyable code when relevant.\n\nFirst, think about what you want to do next and plan your actions. Then, write the next message and include the actions you plan to take.\n</instructions>\n\n<keys>\n\"thought\" should be a short description of what the agent is thinking about and planning.\n\"actions\" should be a comma-separated list of the actions {{agentName}} plans to take based on the thought, IN THE ORDER THEY SHOULD BE EXECUTED (if none, use IGNORE, if simply responding with text, use REPLY)\n\"providers\" should be a comma-separated list of the providers that {{agentName}} will use to have the right context for responding and acting (NEVER use \"IGNORE\" as a provider - use specific provider names like ATTACHMENTS, ENTITIES, FACTS, KNOWLEDGE, etc.)\n\"text\" should be the text of the next message for {{agentName}} which they will send to the conversation.\n</keys>\n\n<output>\nDo NOT include any thinking, reasoning, or <think> sections in your response. \nGo directly to the XML response format without any preamble or explanation.\n\nRespond using XML format like this:\n<response>\n    <thought>Your thought here</thought>\n    <actions>ACTION1,ACTION2</actions>\n    <providers>PROVIDER1,PROVIDER2</providers>\n    <text>Your response text here</text>\n</response>\n\nIMPORTANT: Your response must ONLY contain the <response></response> XML block above. Do not include any text, thinking, or reasoning before or after this XML block. Start your response immediately with <response> and end with </response>.\n</output>`;\nvar postCreationTemplate = `# Task: Create a post in the voice and style and perspective of {{agentName}} @{{twitterUserName}}.\n\nExample task outputs:\n1. A post about the importance of AI in our lives\n<response>\n  <thought>I am thinking about writing a post about the importance of AI in our lives</thought>\n  <post>AI is changing the world and it is important to understand how it works</post>\n  <imagePrompt>A futuristic cityscape with flying cars and people using AI to do things</imagePrompt>\n</response>\n\n2. A post about dogs\n<response>\n  <thought>I am thinking about writing a post about dogs</thought>\n  <post>Dogs are man's best friend and they are loyal and loving</post>\n  <imagePrompt>A dog playing with a ball in a park</imagePrompt>\n</response>\n\n3. A post about finding a new job\n<response>\n  <thought>Getting a job is hard, I bet there's a good tweet in that</thought>\n  <post>Just keep going!</post>\n  <imagePrompt>A person looking at a computer screen with a job search website</imagePrompt>\n</response>\n\n{{providers}}\n\nWrite a post that is {{adjective}} about {{topic}} (without mentioning {{topic}} directly), from the perspective of {{agentName}}. Do not add commentary or acknowledge this request, just write the post.\nYour response should be 1, 2, or 3 sentences (choose the length at random).\nYour response should not contain any questions. Brief, concise statements only. The total character count MUST be less than 280. No emojis. Use \\\\n\\\\n (double spaces) between statements if there are multiple statements in your response.\n\nYour output should be formatted in XML like this:\n<response>\n  <thought>Your thought here</thought>\n  <post>Your post text here</post>\n  <imagePrompt>Optional image prompt here</imagePrompt>\n</response>\n\nThe \"post\" field should be the post you want to send. Do not including any thinking or internal reflection in the \"post\" field.\nThe \"imagePrompt\" field is optional and should be a prompt for an image that is relevant to the post. It should be a single sentence that captures the essence of the post. ONLY USE THIS FIELD if it makes sense that the post would benefit from an image.\nThe \"thought\" field should be a short description of what the agent is thinking about before responding, including a brief justification for the response. Includate an explanation how the post is relevant to the topic but unique and different than other posts.\n\nDo NOT include any thinking, reasoning, or <think> sections in your response. \nGo directly to the XML response format without any preamble or explanation.\n\nIMPORTANT: Your response must ONLY contain the <response></response> XML block above. Do not include any text, thinking, or reasoning before or after this XML block. Start your response immediately with <response> and end with </response>.`;\nvar booleanFooter = \"Respond with only a YES or a NO.\";\nvar imageDescriptionTemplate = `<task>Analyze the provided image and generate a comprehensive description with multiple levels of detail.</task>\n\n<instructions>\nCarefully examine the image and provide:\n1. A concise, descriptive title that captures the main subject or scene\n2. A brief summary description (1-2 sentences) highlighting the key elements\n3. An extensive, detailed description that covers all visible elements, composition, lighting, colors, mood, and any other relevant details\n\nBe objective and descriptive. Focus on what you can actually see in the image rather than making assumptions about context or meaning.\n</instructions>\n\n<output>\nDo NOT include any thinking, reasoning, or <think> sections in your response. \nGo directly to the XML response format without any preamble or explanation.\n\nRespond using XML format like this:\n<response>\n  <title>A concise, descriptive title for the image</title>\n  <description>A brief 1-2 sentence summary of the key elements in the image</description>\n  <text>An extensive, detailed description covering all visible elements, composition, lighting, colors, mood, setting, objects, people, activities, and any other relevant details you can observe in the image</text>\n</response>\n\nIMPORTANT: Your response must ONLY contain the <response></response> XML block above. Do not include any text, thinking, or reasoning before or after this XML block. Start your response immediately with <response> and end with </response>.\n</output>`;\n\n// src/roles.ts\nasync function getUserServerRole(runtime, entityId, serverId) {\n  const worldId = createUniqueUuid(runtime, serverId);\n  const world = await runtime.getWorld(worldId);\n  if (!world || !world.metadata?.roles) {\n    return \"NONE\" /* NONE */;\n  }\n  if (world.metadata.roles[entityId]) {\n    return world.metadata.roles[entityId];\n  }\n  if (world.metadata.roles[entityId]) {\n    return world.metadata.roles[entityId];\n  }\n  return \"NONE\" /* NONE */;\n}\nasync function findWorldsForOwner(runtime, entityId) {\n  if (!entityId) {\n    logger.error(\"User ID is required to find server\");\n    return null;\n  }\n  const worlds = await runtime.getAllWorlds();\n  if (!worlds || worlds.length === 0) {\n    logger.info(\"No worlds found for this agent\");\n    return null;\n  }\n  const ownerWorlds = [];\n  for (const world of worlds) {\n    if (world.metadata?.ownership?.ownerId === entityId) {\n      ownerWorlds.push(world);\n    }\n  }\n  return ownerWorlds.length ? ownerWorlds : null;\n}\n\n// src/runtime.ts\n\n\n// src/search.ts\nvar isV = (char) => {\n  switch (char) {\n    case 97:\n    case 101:\n    case 105:\n    case 111:\n    case 117:\n    case 121:\n      return true;\n    default:\n      return false;\n  }\n};\nvar isWxy = (char) => {\n  switch (char) {\n    case 97:\n    case 101:\n    case 105:\n    case 111:\n    case 117:\n    case 121:\n    case 119:\n    case 120:\n    case 89:\n      return true;\n    default:\n      return false;\n  }\n};\nvar isValidLi = (char) => {\n  switch (char) {\n    case 99:\n    case 100:\n    case 101:\n    case 103:\n    case 104:\n    case 107:\n    case 109:\n    case 110:\n    case 114:\n    case 116:\n      return true;\n    default:\n      return false;\n  }\n};\nvar isDouble = (char) => {\n  switch (char) {\n    case 98:\n    case 100:\n    case 102:\n    case 103:\n    case 109:\n    case 110:\n    case 112:\n    case 114:\n    case 116:\n      return true;\n    default:\n      return false;\n  }\n};\nvar isShortV = (w, len) => {\n  return len >= 2 && isV(w[len - 2]) && (len === 2 && !isV(w[len - 1]) || len >= 3 && !isV(w[len - 3]) && !isWxy(w[len - 1]));\n};\nvar stem = (word) => {\n  if (word.length < 3) return word;\n  if (word.length <= 6) {\n    switch (word) {\n      case \"ski\":\n        return \"ski\";\n      case \"skies\":\n        return \"sky\";\n      case \"dying\":\n        return \"die\";\n      case \"lying\":\n        return \"lie\";\n      case \"tying\":\n        return \"tie\";\n      // special -LY cases\n      case \"idly\":\n        return \"idl\";\n      case \"gently\":\n        return \"gentl\";\n      case \"ugly\":\n        return \"ugli\";\n      case \"early\":\n        return \"earli\";\n      case \"only\":\n        return \"onli\";\n      case \"singly\":\n        return \"singl\";\n      // invariant forms\n      case \"sky\":\n      case \"news\":\n      case \"howe\":\n      // not plural forms\n      case \"atlas\":\n      case \"cosmos\":\n      case \"bias\":\n      case \"andes\":\n        return word;\n    }\n  }\n  const initialOffset = word.charCodeAt(0) === 39 ? 1 : 0;\n  let l = word.length - initialOffset;\n  const w = new Array(l);\n  let yFound = false;\n  for (let i = 0; i < l; ++i) {\n    const ch = word.charCodeAt(i + initialOffset);\n    if (ch === 121 && (i === 0 || isV(w[i - 1]))) {\n      yFound = true;\n      w[i] = 89;\n      continue;\n    }\n    w[i] = ch;\n  }\n  if (w[l - 1] === 39) --l;\n  if (l >= 2 && w[l - 2] === 39 && w[l - 1] === 115) l -= 2;\n  let rv = 0;\n  while (rv < l && !isV(w[rv])) ++rv;\n  if (rv < l) ++rv;\n  let r1 = rv;\n  if (l >= 5 && (w[0] === 103 && w[1] === 101 && w[2] === 110 && w[3] === 101 && w[4] === 114 || // gener\n  w[0] === 97 && w[1] === 114 && w[2] === 115 && w[3] === 101 && w[4] === 110))\n    r1 = 5;\n  else if (l >= 6 && w[0] === 99 && // c\n  w[1] === 111 && // o\n  w[2] === 109 && // m\n  w[3] === 109 && // m\n  w[4] === 117 && // u\n  w[5] === 110)\n    r1 = 6;\n  else {\n    while (r1 < l && isV(w[r1])) ++r1;\n    if (r1 < l) ++r1;\n  }\n  let r2 = r1;\n  while (r2 < l && !isV(w[r2])) ++r2;\n  while (r2 < l && isV(w[r2])) ++r2;\n  if (r2 < l) ++r2;\n  if (l >= 3) {\n    if (w[l - 1] === 115) {\n      if (l >= 4 && w[l - 2] === 101 && w[l - 3] === 115 && w[l - 4] === 115)\n        l -= 2;\n      else if (w[l - 2] === 101 && w[l - 3] === 105)\n        l -= l >= 5 ? 2 : 1;\n      else if (w[l - 2] !== 117 && w[l - 2] !== 115 && rv < l - 1)\n        l -= 1;\n    } else if (w[l - 1] === 100 && w[l - 2] === 101 && w[l - 3] === 105) l -= l >= 5 ? 2 : 1;\n  }\n  if (l === 6 && (w[0] === 105 && // i\n  w[1] === 110 && // n\n  w[2] === 110 && // n\n  w[3] === 105 && // i\n  w[4] === 110 && // n\n  w[5] === 103 || // g (inning)\n  w[0] === 111 && // o\n  w[1] === 117 && // u\n  w[2] === 116 && // t\n  w[3] === 105 && // i\n  w[4] === 110 && // n\n  w[5] === 103 || // g (outing)\n  w[0] === 101 && // e\n  w[1] === 120 && // x\n  w[2] === 99 && // c\n  w[3] === 101 && // e\n  w[4] === 101 && // e\n  w[5] === 100) || // d (exceed)\n  l === 7 && (w[0] === 99 && // c\n  w[1] === 97 && // a\n  w[2] === 110 && // n\n  w[3] === 110 && // n\n  w[4] === 105 && // i\n  w[5] === 110 && // n\n  w[6] === 103 || // g (canning)\n  w[0] === 104 && // h\n  w[1] === 101 && // e\n  w[2] === 114 && // r\n  w[3] === 114 && // r\n  w[4] === 105 && // i\n  w[5] === 110 && // n\n  w[6] === 103 || // g (herring)\n  w[0] === 101 && // e\n  w[1] === 97 && // a\n  w[2] === 114 && // r\n  w[3] === 114 && // r\n  w[4] === 105 && // i\n  w[5] === 110 && // n\n  w[6] === 103 || // g (earring)\n  w[0] === 112 && // p\n  w[1] === 114 && // r\n  w[2] === 111 && // o\n  w[3] === 99 && // c\n  w[4] === 101 && // e\n  w[5] === 101 && // e\n  w[6] === 100 || // d (proceed)\n  w[0] === 115 && // s\n  w[1] === 117 && // u\n  w[2] === 99 && // c\n  w[3] === 99 && // c\n  w[4] === 101 && // e\n  w[5] === 101 && // e\n  w[6] === 100)) {\n    let exp2Out = \"\";\n    for (let i = 0; i < l; ++i) exp2Out += String.fromCharCode(w[i]);\n    return exp2Out;\n  }\n  let ll = (\n    // l (length) without the -ly ending\n    l >= 2 && w[l - 1] === 121 && w[l - 2] === 108 ? l - 2 : l\n  );\n  if (ll >= 3) {\n    if (w[ll - 3] === 101 && w[ll - 2] === 101 && w[ll - 1] === 100) {\n      if (ll >= r1 + 3) l = ll - 1;\n    } else {\n      if (w[ll - 2] === 101 && w[ll - 1] === 100)\n        ll -= 2;\n      else if (w[ll - 3] === 105 && w[ll - 2] === 110 && w[ll - 1] === 103)\n        ll -= 3;\n      else ll = -1;\n      if (ll >= 0 && rv <= ll) {\n        l = ll;\n        if (l >= 2) {\n          if (w[l - 1] === 116 && w[l - 2] === 97 || // at\n          w[l - 1] === 108 && w[l - 2] === 98 || // bl\n          w[l - 1] === 122 && w[l - 2] === 105) {\n            w[l] = 101;\n            ++l;\n          } else if (w[l - 2] === w[l - 1] && isDouble(w[l - 1])) {\n            --l;\n          } else if (r1 >= l && isShortV(w, l)) {\n            w[l] = 101;\n            ++l;\n          }\n        }\n      }\n    }\n  }\n  if (l >= 3 && (w[l - 1] === 89 || w[l - 1] === 121) && !isV(w[l - 2])) w[l - 1] = 105;\n  if (l >= r1 + 2) {\n    switch (w[l - 1]) {\n      case 108:\n        if (l >= r1 + 6 && w[l - 2] === 97 && // a\n        w[l - 3] === 110 && // n\n        w[l - 4] === 111 && // o\n        w[l - 5] === 105 && // i\n        w[l - 6] === 116) {\n          if (l >= 7 && w[l - 7] === 97) {\n            if (l >= r1 + 7) {\n              l -= 4;\n              w[l - 1] = 101;\n            }\n          } else {\n            l -= 2;\n          }\n        }\n        break;\n      case 110:\n        if (l >= r1 + 5 && w[l - 2] === 111 && // o\n        w[l - 3] === 105 && // i\n        w[l - 4] === 116 && // t\n        w[l - 5] === 97) {\n          if (l >= 7 && w[l - 6] === 122 && w[l - 7] === 105) {\n            if (l >= r1 + 7) {\n              l -= 4;\n              w[l - 1] = 101;\n            }\n          } else {\n            l -= 2;\n            w[l - 1] = 101;\n          }\n        }\n        break;\n      case 114:\n        if (l >= r1 + 4) {\n          if (w[l - 2] === 101) {\n            if (w[l - 3] === 122 && w[l - 4] === 105) --l;\n          } else if (w[l - 2] === 111) {\n            if (w[l - 3] === 116 && w[l - 4] === 97) {\n              --l;\n              w[l - 1] = 101;\n            }\n          }\n        }\n        break;\n      case 115:\n        if (l >= r1 + 7 && w[l - 2] === 115 && // s\n        w[l - 3] === 101 && // e\n        w[l - 4] === 110 && // n (ness)\n        (w[l - 5] === 108 && w[l - 6] === 117 && w[l - 7] === 102 || // fulness\n        w[l - 5] === 115 && w[l - 6] === 117 && w[l - 7] === 111 || // ousness\n        w[l - 5] === 101 && w[l - 6] === 118 && w[l - 7] === 105)) {\n          l -= 4;\n        }\n        break;\n      case 109:\n        if (l >= r1 + 5 && w[l - 2] === 115 && // s\n        w[l - 3] === 105 && // i\n        w[l - 4] === 108 && // l\n        w[l - 5] === 97)\n          l -= 3;\n        break;\n      case 105:\n        if (w[l - 2] === 99) {\n          if (l >= r1 + 4 && (w[l - 4] === 101 || w[l - 4] === 97) && w[l - 3] === 110) {\n            w[l - 1] = 101;\n          }\n        } else if (w[l - 2] === 103) {\n          if (l >= r1 + 3 && l >= 4 && w[l - 2] === 103 && w[l - 3] === 111 && w[l - 4] === 108)\n            --l;\n        } else if (w[l - 2] === 116) {\n          if (l >= r1 + 5 && w[l - 3] === 105) {\n            if (w[l - 4] === 108) {\n              if (l >= 6 && w[l - 5] === 105 && w[l - 6] === 98) {\n                if (l >= r1 + 6) {\n                  l -= 3;\n                  w[l - 2] = 108;\n                  w[l - 1] = 101;\n                }\n              } else if (w[l - 4] === 108 && w[l - 5] === 97) {\n                l -= 3;\n              }\n            } else if (w[l - 4] === 118 && w[l - 5] === 105) {\n              l -= 2;\n              w[l - 1] = 101;\n            }\n          }\n        } else if (w[l - 2] === 108 && l >= 3) {\n          if (w[l - 3] === 98) {\n            if (l >= 4 && w[l - 4] === 97) {\n              if (l >= r1 + 4) w[l - 1] = 101;\n            } else if (l >= r1 + 3) {\n              w[l - 1] = 101;\n            }\n          } else {\n            if (w[l - 3] === 108) {\n              if (l >= 5 && w[l - 4] === 117 && w[l - 5] === 102) {\n                if (l >= r1 + 5) l -= 2;\n              } else if (l >= r1 + 4 && w[l - 4] === 97) {\n                l -= 2;\n              }\n            } else if (w[l - 3] === 115) {\n              if (l >= 6 && w[l - 4] === 115 && w[l - 5] === 101 && w[l - 6] === 108) {\n                if (l >= r1 + 6) l -= 2;\n              } else if (l >= r1 + 5 && w[l - 4] === 117 && w[l - 5] === 111) {\n                l -= 2;\n              }\n            } else if (l >= 5 && w[l - 3] === 116 && w[l - 4] === 110 && w[l - 5] === 101) {\n              if (l >= r1 + 5) l -= 2;\n            } else if (isValidLi(w[l - 3])) {\n              l -= 2;\n            }\n          }\n        }\n    }\n  }\n  if (l >= r1 + 3) {\n    switch (w[l - 1]) {\n      case 108:\n        if (w[l - 3] === 99) {\n          if (l >= r1 + 4 && w[l - 4] === 105 && w[l - 2] === 97) l -= 2;\n        } else if (w[l - 3] === 102) {\n          if (w[l - 2] === 117) l -= 3;\n        } else if (w[l - 3] === 110) {\n          if (l >= r1 + 6 && w[l - 2] === 97 && // a\n          w[l - 4] === 111 && // o\n          w[l - 5] === 105 && // i\n          w[l - 6] === 116) {\n            if (l >= 7 && w[l - 7] === 97) {\n              if (l >= r1 + 7) {\n                l -= 4;\n                w[l - 1] = 101;\n              }\n            } else {\n              l -= 2;\n            }\n          }\n        }\n        break;\n      case 101:\n        if (w[l - 2] === 122) {\n          if (l >= r1 + 5 && w[l - 3] === 105 && w[l - 4] === 108 && w[l - 5] === 97) l -= 3;\n        } else if (w[l - 2] === 116) {\n          if (l >= r1 + 5 && w[l - 3] === 97 && w[l - 4] === 99 && w[l - 5] === 105) l -= 3;\n        } else if (w[l - 2] === 118) {\n          if (l >= r2 + 5 && w[l - 3] === 105 && w[l - 4] === 116 && w[l - 5] === 97) l -= 5;\n        }\n        break;\n      case 105:\n        if (l >= r1 + 5 && w[l - 2] === 116 && // t\n        w[l - 3] === 105 && // i\n        w[l - 4] === 99 && // c\n        w[l - 5] === 105)\n          l -= 3;\n        break;\n      case 115:\n        if (l >= r1 + 4 && w[l - 2] === 115 && w[l - 3] === 101 && w[l - 4] === 110) l -= 4;\n    }\n  }\n  if (l >= r2 + 2) {\n    switch (w[l - 1]) {\n      case 110:\n        if (l >= r2 + 3 && w[l - 2] === 111 && // o\n        w[l - 3] === 105 && // i (ion)\n        (w[l - 4] === 115 || w[l - 4] === 116))\n          l -= 3;\n        break;\n      case 108:\n        if (w[l - 2] === 97) l -= 2;\n        break;\n      case 114:\n        if (w[l - 2] === 101) l -= 2;\n        break;\n      case 99:\n        if (w[l - 2] === 105) l -= 2;\n        break;\n      case 109:\n        if (l >= r2 + 3 && w[l - 2] === 115 && w[l - 3] === 105) l -= 3;\n        break;\n      case 105:\n        if (l >= r2 + 3 && w[l - 2] === 116 && w[l - 3] === 105) l -= 3;\n        break;\n      case 115:\n        if (l >= r2 + 3 && w[l - 2] === 117 && w[l - 3] === 111) l -= 3;\n        break;\n      case 116:\n        if (l >= r2 + 3 && w[l - 2] === 110) {\n          if (w[l - 3] === 97) {\n            l -= 3;\n          } else if (w[l - 3] === 101) {\n            if (l >= 4 && w[l - 4] === 109) {\n              if (l >= 5 && w[l - 5] === 101) {\n                if (l >= r2 + 5) l -= 5;\n              } else if (l >= r2 + 4) {\n                l -= 4;\n              }\n            } else {\n              l -= 3;\n            }\n          }\n        }\n        break;\n      case 101:\n        if (w[l - 2] === 99) {\n          if (l >= r2 + 4 && w[l - 3] === 110 && (w[l - 4] === 97 || w[l - 4] === 101)) l -= 4;\n        } else if (w[l - 2] === 108) {\n          if (l >= r2 + 4 && w[l - 3] === 98 && (w[l - 4] === 97 || w[l - 4] === 105)) l -= 4;\n        } else if (w[l - 2] === 116) {\n          if (l >= r2 + 3 && w[l - 3] === 97) l -= 3;\n        } else if (l >= r2 + 3 && (w[l - 2] === 118 || w[l - 2] === 122) && w[l - 3] === 105) {\n          l -= 3;\n        }\n    }\n  }\n  if (l >= r1 + 1 && // r1 is >= 1\n  (l >= r2 + 1 && w[l - 1] === 108 && w[l - 2] === 108 || // ll\n  w[l - 1] === 101 && (l >= r2 + 1 || !isShortV(w, l - 1))))\n    --l;\n  let out = \"\";\n  if (yFound) {\n    for (let i = 0; i < l; ++i) {\n      out += String.fromCharCode(w[i] === 89 ? 121 : w[i]);\n    }\n  } else {\n    for (let i = 0; i < l; ++i) out += String.fromCharCode(w[i]);\n  }\n  return out;\n};\nvar DEFAULT_OPTIONS = {\n  k1: 1.2,\n  b: 0.75,\n  minLength: 2,\n  stopWords: /* @__PURE__ */ new Set([\n    \"a\",\n    \"an\",\n    \"and\",\n    \"are\",\n    \"as\",\n    \"at\",\n    \"be\",\n    \"by\",\n    \"for\",\n    \"from\",\n    \"has\",\n    \"he\",\n    \"in\",\n    \"is\",\n    \"it\",\n    \"its\",\n    \"of\",\n    \"on\",\n    \"that\",\n    \"the\",\n    \"to\",\n    \"was\",\n    \"were\",\n    \"will\",\n    \"with\"\n  ]),\n  stemming: false,\n  stemWords: (word) => word\n};\nvar Tokenizer = class _Tokenizer {\n  static {\n    /** Default options for the Tokenizer. */\n    this.DEFAULT_OPTIONS = {\n      stopWords: /* @__PURE__ */ new Set(),\n      minLength: 2,\n      stemming: false,\n      stemmingRules: []\n    };\n  }\n  /**\n   * Creates a new tokenizer instance.\n   * @param options - Tokenization options including stop words, min length, stemming, and custom rules.\n   */\n  constructor(options2 = {}) {\n    const mergedOptions = { ..._Tokenizer.DEFAULT_OPTIONS, ...options2 };\n    this.stopWords = mergedOptions.stopWords;\n    this.minLength = mergedOptions.minLength;\n    this.stemming = mergedOptions.stemming;\n    this.stemmingRules = mergedOptions.stemmingRules.map((rule) => ({\n      ...rule,\n      pattern: typeof rule.pattern === \"string\" ? new RegExp(rule.pattern) : rule.pattern\n    }));\n  }\n  /**\n   * Tokenizes input text into an array of processed terms.\n   * Steps:\n   * 1. Cleans the text (lowercase, normalize, remove punctuation/symbols).\n   * 2. Splits the text into potential tokens.\n   * 3. Filters tokens based on `minLength` and `stopWords`.\n   * 4. Applies stemming if `stemming` is true (custom rules first, then Porter2).\n   * 5. Optionally calculates statistics.\n   *\n   * @param text - The input text string to tokenize.\n   * @param includeStats - If true, returns tokenization statistics along with tokens. Defaults to false.\n   * @returns A `TokenizationResult` object containing the array of tokens and optional stats.\n   * @throws {Error} If the input text is null, undefined, or empty.\n   */\n  tokenize(text, includeStats = false) {\n    if (!text) {\n      throw new Error(\"Input text cannot be null or empty\");\n    }\n    const startTime = Date.now();\n    const originalWords = text.split(/\\s+/).filter((word) => word.length > 0);\n    const cleaned = this.cleanText(text);\n    const tokens = cleaned.split(/\\s+/).filter((token) => this.isValidToken(token)).map((token) => this.stemming ? this.stemWord(token) : token);\n    const stats = includeStats ? {\n      originalWordCount: originalWords.length,\n      stopWordsRemoved: originalWords.length - tokens.length,\n      // This might be incorrect if stemming changes token count\n      stemmedWords: this.stemming ? tokens.length : 0,\n      processingTimeMs: Date.now() - startTime\n    } : {\n      originalWordCount: 0,\n      stopWordsRemoved: 0,\n      stemmedWords: 0,\n      processingTimeMs: 0\n    };\n    return { tokens, stats };\n  }\n  /**\n   * Cleans and normalizes text for tokenization.\n   * - Converts to lowercase.\n   * - Normalizes Unicode characters (NFKD).\n   * - Removes control characters and zero-width spaces.\n   * - Removes diacritical marks (accents).\n   * - Removes emojis and pictographs.\n   * - Removes common symbols (™, ®, ©, ℠, ‼).\n   * - Replaces Unicode punctuation with spaces.\n   * - Removes characters not matching basic Latin, CJK, Hangul, or whitespace.\n   * - Collapses multiple spaces into single spaces.\n   * - Trims leading/trailing whitespace.\n   *\n   * @param text - Input text to clean.\n   * @returns Cleaned and normalized text, ready for splitting into tokens.\n   *\n   * @example\n   * cleanText(\"Hello, World™!\") // \"hello world\"\n   * cleanText(\"héllo 👋\") // \"hello\"\n   * cleanText(\"Hello 世界!\") // \"hello 世界\"\n   * cleanText(\"I'm don't\") // \"i'm don't\" (apostrophes kept by replacing punctuation with space)\n   * cleanText(\"test©2023\") // \"test 2023\"\n   */\n  cleanText(text) {\n    return text.toLowerCase().normalize(\"NFKD\").replace(/[\\u0000-\\u001F\\u007F-\\u009F\\u200B-\\u200D\\uFEFF]/g, \"\").replace(/[\\u0300-\\u036f]/g, \"\").replace(/[\\p{Emoji_Presentation}\\p{Extended_Pictographic}]/gu, \"\").replace(/[™®©℠‼]/g, \"\").replace(/[\\p{P}]/gu, \" \").replace(/[^a-z0-9\\u3040-\\u30FF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uAC00-\\uD7AF\\s]/gu, \" \").replace(/\\s+/g, \" \").trim();\n  }\n  /**\n   * Checks if a token is valid (meets `minLength` criteria and is not a stop word).\n   * Numeric tokens are always considered valid regardless of length.\n   * @param token - The token string to validate.\n   * @returns `true` if the token is valid, `false` otherwise.\n   */\n  isValidToken(token) {\n    const isNumeric = /^\\d+$/.test(token);\n    return (token.length >= this.minLength || isNumeric) && !this.stopWords.has(token);\n  }\n  /**\n   * Applies stemming to a single word.\n   * First, tries to apply custom stemming rules defined in `stemmingRules`.\n   * If no custom rule matches, applies the default Porter2 stemming algorithm.\n   * Words shorter than 3 characters are not stemmed.\n   * @param word - The word to stem.\n   * @returns The stemmed word.\n   */\n  stemWord(word) {\n    if (word.length < 3) return word;\n    let customRuleApplied = false;\n    let stemmed = word;\n    for (const rule of this.stemmingRules) {\n      const match = stemmed.match(rule.pattern);\n      if (match) {\n        if (!rule.minMeasure || this.measure(stemmed.substring(0, match.index)) >= rule.minMeasure) {\n          if (typeof rule.replacement === \"string\") {\n            stemmed = stemmed.replace(rule.pattern, rule.replacement);\n          } else {\n            stemmed = stemmed.replace(\n              rule.pattern,\n              (...args) => rule.replacement(...args)\n            );\n          }\n          customRuleApplied = true;\n        }\n      }\n    }\n    if (customRuleApplied && stemmed !== word) return stemmed;\n    return stem(stemmed);\n  }\n  /**\n   * Checks if the character at a given index in a word is a consonant.\n   * Treats 'y' as a consonant if it's the first letter or follows a consonant.\n   * @param word - The word string.\n   * @param i - The index of the character to check.\n   * @returns `true` if the character is a consonant, `false` otherwise.\n   */\n  isConsonant(word, i) {\n    const char = word[i];\n    if (\"aeiou\".includes(char)) return false;\n    return char !== \"y\" || (i === 0 ? true : !this.isConsonant(word, i - 1));\n  }\n  /**\n   * Calculates the \"measure\" of a word stem (approximates syllable count).\n   * The measure (m) is the number of times a sequence of vowels is followed by a\n   * sequence of consonants (VC). Used in some stemming rules.\n   * Example: measure(\"tree\") = 0, measure(\"trouble\") = 1, measure(\"private\") = 2\n   * @param word - The word (or stem) to measure.\n   * @returns The measure (m) of the word.\n   */\n  measure(word) {\n    let m = 0;\n    let vowelSeen = false;\n    for (let i = 0; i < word.length; i++) {\n      if (this.isConsonant(word, i)) {\n        if (vowelSeen) {\n          m++;\n          vowelSeen = false;\n        }\n      } else {\n        vowelSeen = true;\n      }\n    }\n    return m;\n  }\n};\nvar BM25 = class {\n  // Consider using a generic <T>\n  /**\n   * Creates a new BM25 search instance.\n   * @param docs - Optional array of initial documents (objects with string fields) to index.\n   * @param options - Configuration options for BM25 parameters (k1, b), tokenizer (stopWords, stemming, minLength), and field boosts.\n   */\n  constructor(docs, options2 = {}) {\n    const opts = { ...DEFAULT_OPTIONS, ...options2 };\n    this.termFrequencySaturation = opts.k1;\n    this.lengthNormalizationFactor = opts.b;\n    this.tokenizer = new Tokenizer(opts);\n    this.fieldBoosts = opts.fieldBoosts || {};\n    this.documents = [];\n    this.documentLengths = new Uint32Array(0);\n    this.termToIndex = /* @__PURE__ */ new Map();\n    this.documentFrequency = new Uint32Array(0);\n    this.averageDocLength = 0;\n    this.termFrequencies = /* @__PURE__ */ new Map();\n    if (docs && docs.length > 0) {\n      this.documents = [...docs];\n      const { documentLengths, termToIndex, documentFrequency, averageDocLength, termFrequencies } = this.processDocuments(docs);\n      this.documentLengths = documentLengths;\n      this.termToIndex = termToIndex;\n      this.documentFrequency = documentFrequency;\n      this.averageDocLength = averageDocLength;\n      this.termFrequencies = termFrequencies;\n    }\n  }\n  /**\n   * Processes an array of documents to build the initial index structures.\n   * Calculates document lengths, term frequencies, document frequencies, and average document length.\n   * @param docs - Array of documents to process.\n   * @returns An object containing the calculated index data.\n   * @internal\n   */\n  processDocuments(docs) {\n    const numDocs = docs.length;\n    const documentLengths = new Uint32Array(numDocs);\n    const termToIndex = /* @__PURE__ */ new Map();\n    const termDocs = /* @__PURE__ */ new Map();\n    const termFrequencies = /* @__PURE__ */ new Map();\n    let totalDocLength = 0;\n    let nextTermIndex = 0;\n    docs.forEach((doc, docIndex) => {\n      let currentDocLength = 0;\n      const docTermFrequencies = /* @__PURE__ */ new Map();\n      Object.entries(doc).forEach(([field, content]) => {\n        if (typeof content !== \"string\") return;\n        const fieldBoost = this.fieldBoosts[field] || 1;\n        const { tokens } = this.tokenizer.tokenize(content);\n        const fieldLength = tokens.length * fieldBoost;\n        currentDocLength += fieldLength;\n        tokens.forEach((term) => {\n          if (!termToIndex.has(term)) {\n            termToIndex.set(term, nextTermIndex++);\n          }\n          const termIndexVal = termToIndex.get(term);\n          if (!termDocs.has(term)) {\n            termDocs.set(term, /* @__PURE__ */ new Set());\n          }\n          termDocs.get(term).add(docIndex);\n          const currentFreq = docTermFrequencies.get(termIndexVal) || 0;\n          docTermFrequencies.set(termIndexVal, currentFreq + fieldBoost);\n        });\n      });\n      documentLengths[docIndex] = currentDocLength;\n      totalDocLength += currentDocLength;\n      docTermFrequencies.forEach((freq, termIndexVal) => {\n        if (!termFrequencies.has(termIndexVal)) {\n          termFrequencies.set(termIndexVal, /* @__PURE__ */ new Map());\n        }\n        termFrequencies.get(termIndexVal).set(docIndex, freq);\n      });\n    });\n    const documentFrequency = new Uint32Array(termToIndex.size);\n    termDocs.forEach((docsSet, term) => {\n      const termIndexVal = termToIndex.get(term);\n      documentFrequency[termIndexVal] = docsSet.size;\n    });\n    return {\n      documentLengths,\n      termToIndex,\n      documentFrequency,\n      averageDocLength: numDocs > 0 ? totalDocLength / numDocs : 0,\n      termFrequencies\n    };\n  }\n  /**\n   * Recalculates the average document length based on the current `documentLengths`.\n   * @internal\n   */\n  recalculateAverageLength() {\n    if (this.documentLengths.length === 0) {\n      this.averageDocLength = 0;\n      return;\n    }\n    const totalLength = Array.prototype.reduce.call(\n      this.documentLengths,\n      (sum, len) => sum + len,\n      0\n    );\n    this.averageDocLength = totalLength / this.documentLengths.length;\n  }\n  /**\n   * Searches the indexed documents for a given query string using the BM25 ranking formula.\n   *\n   * @param query - The search query text.\n   * @param topK - The maximum number of top-scoring results to return. Defaults to 10.\n   * @returns An array of `SearchResult` objects, sorted by descending BM25 score.\n   */\n  search(query, topK = 10) {\n    const { tokens: queryTokens } = this.tokenizer.tokenize(query);\n    const scores = new Float32Array(this.documentLengths.length).fill(0);\n    queryTokens.forEach((term) => {\n      const termIndex = this.termToIndex.get(term);\n      if (termIndex === void 0) return;\n      const idf = this.calculateIdf(termIndex);\n      if (idf <= 0) return;\n      const termFreqsInDocs = this.termFrequencies.get(termIndex);\n      if (!termFreqsInDocs) return;\n      termFreqsInDocs.forEach((tf, docIndex) => {\n        const docLength = this.documentLengths[docIndex];\n        const numerator = tf * (this.termFrequencySaturation + 1);\n        const denominator = tf + this.termFrequencySaturation * (1 - this.lengthNormalizationFactor + this.lengthNormalizationFactor * docLength / this.averageDocLength);\n        scores[docIndex] += idf * (numerator / denominator);\n      });\n    });\n    return Array.from({ length: scores.length }, (_, i) => ({\n      index: i,\n      score: scores[i]\n      // Optionally add: doc: this.getDocument(i) // If you want the full doc in results\n    })).filter((result) => result.score > 0).sort((a, b) => b.score - a.score).slice(0, topK);\n  }\n  /**\n   * Searches for an exact phrase within the indexed documents.\n   * Ranks documents containing the exact sequence of tokens higher.\n   * Note: This is a basic implementation. More sophisticated phrase search might consider proximity.\n   *\n   * @param phrase - The exact phrase to search for.\n   * @param topK - The maximum number of results to return. Defaults to 10.\n   * @returns An array of `SearchResult` objects, sorted by score, for documents containing the phrase.\n   */\n  searchPhrase(phrase, topK = 10) {\n    const { tokens: phraseTokens } = this.tokenizer.tokenize(phrase);\n    if (phraseTokens.length === 0) return [];\n    let candidateDocs = null;\n    for (const term of phraseTokens) {\n      const termIndex = this.termToIndex.get(term);\n      if (termIndex === void 0) return [];\n      const docsContainingTermIter = this.termFrequencies.get(termIndex)?.keys();\n      if (!docsContainingTermIter) return [];\n      const currentTermDocs = new Set(docsContainingTermIter);\n      if (candidateDocs === null) {\n        candidateDocs = currentTermDocs;\n      } else {\n        candidateDocs = new Set([...candidateDocs].filter((docIdx) => currentTermDocs.has(docIdx)));\n      }\n      if (candidateDocs.size === 0) return [];\n    }\n    if (candidateDocs === null || candidateDocs.size === 0) return [];\n    const scores = /* @__PURE__ */ new Map();\n    candidateDocs.forEach((docIndex) => {\n      const doc = this.getDocument(docIndex);\n      let phraseFoundInDoc = false;\n      Object.entries(doc).forEach(([field, content]) => {\n        if (typeof content !== \"string\" || phraseFoundInDoc) return;\n        const fieldBoost = this.fieldBoosts[field] || 1;\n        const { tokens: docTokens } = this.tokenizer.tokenize(content);\n        for (let i = 0; i <= docTokens.length - phraseTokens.length; i++) {\n          let match = true;\n          for (let j = 0; j < phraseTokens.length; j++) {\n            if (docTokens[i + j] !== phraseTokens[j]) {\n              match = false;\n              break;\n            }\n          }\n          if (match) {\n            const phraseScoreVal = this.calculatePhraseScore(phraseTokens, docIndex) * fieldBoost;\n            scores.set(docIndex, (scores.get(docIndex) || 0) + phraseScoreVal);\n            phraseFoundInDoc = true;\n            break;\n          }\n        }\n      });\n    });\n    return Array.from(scores.entries()).map(([index, score]) => ({ index, score })).sort((a, b) => b.score - a.score).slice(0, topK);\n  }\n  /**\n   * Calculates a BM25-like score for a sequence of phrase tokens within a specific document.\n   * Sums the individual BM25 scores of the terms in the phrase for that document.\n   * @param phraseTokens - The tokenized phrase.\n   * @param docIndex - The index of the document to score against.\n   * @returns The calculated phrase score for the document.\n   * @internal\n   */\n  calculatePhraseScore(phraseTokens, docIndex) {\n    return phraseTokens.reduce((currentScore, term) => {\n      const termIndex = this.termToIndex.get(term);\n      if (termIndex === void 0) return currentScore;\n      const idf = this.calculateIdf(termIndex);\n      const tf = this.termFrequencies.get(termIndex)?.get(docIndex) || 0;\n      const docLength = this.documentLengths[docIndex];\n      const numerator = tf * (this.termFrequencySaturation + 1);\n      const denominator = tf + this.termFrequencySaturation * (1 - this.lengthNormalizationFactor + this.lengthNormalizationFactor * docLength / this.averageDocLength);\n      return currentScore + idf * (numerator / denominator);\n    }, 0);\n  }\n  /**\n   * Adds a single new document to the index.\n   * Updates all internal index structures incrementally.\n   * Note: For adding many documents, `addDocumentsParallel` is generally more efficient.\n   *\n   * @param doc - The document object (with string fields) to add.\n   * @throws {Error} If the document is null or undefined.\n   */\n  async addDocument(doc) {\n    if (!doc) throw new Error(\"Document cannot be null\");\n    const docIndex = this.documentLengths.length;\n    this.documents.push(doc);\n    const newDocLengths = new Uint32Array(docIndex + 1);\n    newDocLengths.set(this.documentLengths, 0);\n    this.documentLengths = newDocLengths;\n    let currentDocLength = 0;\n    const docTermFrequencies = /* @__PURE__ */ new Map();\n    Object.entries(doc).forEach(([field, content]) => {\n      if (typeof content !== \"string\") return;\n      const fieldBoost = this.fieldBoosts[field] || 1;\n      const { tokens } = this.tokenizer.tokenize(content);\n      currentDocLength += tokens.length * fieldBoost;\n      tokens.forEach((term) => {\n        let termIndexVal;\n        if (!this.termToIndex.has(term)) {\n          termIndexVal = this.termToIndex.size;\n          this.termToIndex.set(term, termIndexVal);\n          if (this.documentFrequency.length <= termIndexVal) {\n            const oldDf = this.documentFrequency;\n            const newSize = Math.max(termIndexVal + 1, oldDf.length * 2 || 1);\n            this.documentFrequency = new Uint32Array(newSize);\n            this.documentFrequency.set(oldDf, 0);\n          }\n          this.documentFrequency[termIndexVal] = 0;\n        } else {\n          termIndexVal = this.termToIndex.get(term);\n        }\n        const currentFreq = docTermFrequencies.get(termIndexVal) || 0;\n        docTermFrequencies.set(termIndexVal, currentFreq + fieldBoost);\n      });\n    });\n    this.documentLengths[docIndex] = currentDocLength;\n    docTermFrequencies.forEach((freq, termIndexVal) => {\n      if (!this.termFrequencies.has(termIndexVal)) {\n        this.termFrequencies.set(termIndexVal, /* @__PURE__ */ new Map());\n      }\n      this.termFrequencies.get(termIndexVal).set(docIndex, freq);\n      if (termIndexVal < this.documentFrequency.length) {\n        this.documentFrequency[termIndexVal]++;\n      } else {\n        console.error(\n          `Error: termIndexVal ${termIndexVal} is out of bounds for documentFrequency (length ${this.documentFrequency.length}). This indicates an issue with array resizing or term indexing.`\n        );\n      }\n    });\n    this.recalculateAverageLength();\n  }\n  /**\n   * Calculates the Inverse Document Frequency (IDF) for a given term index.\n   * Uses the BM25 IDF formula: log(1 + (N - n + 0.5) / (n + 0.5))\n   * where N is the total number of documents and n is the number of documents\n   * containing the term. The +1 smooths the logarithm.\n   *\n   * @param termIndex - The integer index of the term.\n   * @returns The IDF score for the term. Returns 0 if the term is not found or has 0 DF.\n   */\n  calculateIdf(termIndex) {\n    if (termIndex < 0 || termIndex >= this.documentFrequency.length) {\n      return 0;\n    }\n    const docFreq = this.documentFrequency[termIndex];\n    if (docFreq <= 0 || docFreq > this.documentLengths.length) {\n      return 0;\n    }\n    const N = this.documentLengths.length;\n    const numerator = N - docFreq + 0.5;\n    const denominator = docFreq + 0.5;\n    return Math.log(1 + numerator / denominator);\n  }\n  /**\n   * Retrieves the term frequency (TF) for a specific term in a specific document.\n   * @param termIndex - The integer index of the term.\n   * @param docIndex - The index of the document.\n   * @returns The term frequency, or 0 if the term is not in the document or indices are invalid.\n   */\n  getTermFrequency(termIndex, docIndex) {\n    return this.termFrequencies.get(termIndex)?.get(docIndex) || 0;\n  }\n  /**\n   * Retrieves the original document object stored at a given index.\n   * @param index - The index of the document to retrieve.\n   * @returns The document object.\n   * @throws {Error} If the index is out of bounds.\n   */\n  getDocument(index) {\n    if (index < 0 || index >= this.documents.length) {\n      throw new Error(`Document index ${index} out of bounds (0-${this.documents.length - 1})`);\n    }\n    return this.documents[index];\n  }\n  /**\n   * Clears all indexed documents and resets the BM25 instance to its initial state.\n   */\n  clearDocuments() {\n    this.documents = [];\n    this.documentLengths = new Uint32Array(0);\n    this.termToIndex.clear();\n    this.documentFrequency = new Uint32Array(0);\n    this.averageDocLength = 0;\n    this.termFrequencies.clear();\n  }\n  /**\n   * Gets the total number of documents currently indexed.\n   * @returns The document count.\n   */\n  getDocumentCount() {\n    return this.documents.length;\n  }\n  /**\n   * Adds multiple documents sequentially by calling `addDocument` for each.\n   * This method processes documents sequentially in the main thread.\n   * @param docs - An array of documents to add.\n   */\n  async addDocuments(docs) {\n    return Promise.all(docs.map((doc) => this.addDocument(doc)));\n  }\n};\n\n// src/runtime.ts\nvar environmentSettings = {};\nvar Semaphore = class {\n  constructor(count) {\n    this.waiting = [];\n    this.permits = count;\n  }\n  async acquire() {\n    if (this.permits > 0) {\n      this.permits -= 1;\n      return Promise.resolve();\n    }\n    return new Promise((resolve) => {\n      this.waiting.push(resolve);\n    });\n  }\n  release() {\n    this.permits += 1;\n    const nextResolve = this.waiting.shift();\n    if (nextResolve && this.permits > 0) {\n      this.permits -= 1;\n      nextResolve();\n    }\n  }\n};\nvar AgentRuntime = class {\n  // Default value, can be overridden\n  constructor(opts) {\n    this.#conversationLength = 32;\n    this.actions = [];\n    this.evaluators = [];\n    this.providers = [];\n    this.plugins = [];\n    this.isInitialized = false;\n    this.events = /* @__PURE__ */ new Map();\n    this.stateCache = /* @__PURE__ */ new Map();\n    this.fetch = fetch;\n    this.services = /* @__PURE__ */ new Map();\n    this.serviceTypes = /* @__PURE__ */ new Map();\n    this.models = /* @__PURE__ */ new Map();\n    this.routes = [];\n    this.taskWorkers = /* @__PURE__ */ new Map();\n    this.sendHandlers = /* @__PURE__ */ new Map();\n    this.eventHandlers = /* @__PURE__ */ new Map();\n    // A map of all plugins available to the runtime, keyed by name, for dependency resolution.\n    this.allAvailablePlugins = /* @__PURE__ */ new Map();\n    // The initial list of plugins specified by the character configuration.\n    this.characterPlugins = [];\n    this.servicesInitQueue = /* @__PURE__ */ new Set();\n    this.maxWorkingMemoryEntries = 50;\n    this.agentId = opts.character?.id ?? opts?.agentId ?? stringToUuid(opts.character?.name ?? (0,uuid__WEBPACK_IMPORTED_MODULE_8__[\"default\"])() + opts.character?.username);\n    this.character = opts.character;\n    const logLevel = process.env.LOG_LEVEL || \"info\";\n    this.logger = createLogger({\n      agentName: this.character?.name,\n      logLevel\n    });\n    this.#conversationLength = opts.conversationLength ?? this.#conversationLength;\n    if (opts.adapter) {\n      this.registerDatabaseAdapter(opts.adapter);\n    }\n    this.fetch = opts.fetch ?? this.fetch;\n    this.settings = opts.settings ?? environmentSettings;\n    this.plugins = [];\n    this.characterPlugins = opts?.plugins ?? [];\n    if (opts.allAvailablePlugins) {\n      for (const plugin of opts.allAvailablePlugins) {\n        if (plugin?.name) {\n          this.allAvailablePlugins.set(plugin.name, plugin);\n        }\n      }\n    }\n    this.logger.debug(`Success: Agent ID: ${this.agentId}`);\n    this.currentRunId = void 0;\n    if (opts.settings?.MAX_WORKING_MEMORY_ENTRIES) {\n      this.maxWorkingMemoryEntries = parseInt(opts.settings.MAX_WORKING_MEMORY_ENTRIES, 10) || 50;\n    } else if (process.env.MAX_WORKING_MEMORY_ENTRIES) {\n      this.maxWorkingMemoryEntries = parseInt(process.env.MAX_WORKING_MEMORY_ENTRIES, 10) || 50;\n    }\n  }\n  #conversationLength;\n  /**\n   * Create a new run ID for tracking a sequence of model calls\n   */\n  createRunId() {\n    return (0,uuid__WEBPACK_IMPORTED_MODULE_8__[\"default\"])();\n  }\n  /**\n   * Start a new run for tracking prompts\n   */\n  startRun() {\n    this.currentRunId = this.createRunId();\n    return this.currentRunId;\n  }\n  /**\n   * End the current run\n   */\n  endRun() {\n    this.currentRunId = void 0;\n  }\n  /**\n   * Get the current run ID (creates one if it doesn't exist)\n   */\n  getCurrentRunId() {\n    if (!this.currentRunId) {\n      this.currentRunId = this.createRunId();\n    }\n    return this.currentRunId;\n  }\n  async registerPlugin(plugin) {\n    if (!plugin?.name) {\n      const errorMsg = \"Plugin or plugin name is undefined\";\n      this.logger.error(`*** registerPlugin: ${errorMsg}`);\n      throw new Error(`*** registerPlugin: ${errorMsg}`);\n    }\n    const existingPlugin = this.plugins.find((p) => p.name === plugin.name);\n    if (existingPlugin) {\n      this.logger.warn(\n        `${this.character.name}(${this.agentId}) - Plugin ${plugin.name} is already registered. Skipping re-registration.`\n      );\n      return;\n    }\n    this.plugins.push(plugin);\n    this.logger.debug(\n      `Success: Plugin ${plugin.name} added to active plugins for ${this.character.name}(${this.agentId}).`\n    );\n    if (plugin.init) {\n      try {\n        await plugin.init(plugin.config || {}, this);\n        this.logger.debug(`Success: Plugin ${plugin.name} initialized successfully`);\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        if (errorMessage.includes(\"API key\") || errorMessage.includes(\"environment variables\") || errorMessage.includes(\"Invalid plugin configuration\")) {\n          console.warn(`Plugin ${plugin.name} requires configuration. ${errorMessage}`);\n          console.warn(\n            \"Please check your environment variables and ensure all required API keys are set.\"\n          );\n          console.warn(\"You can set these in your .env file.\");\n        } else {\n          throw error;\n        }\n      }\n    }\n    if (plugin.adapter) {\n      this.logger.debug(`Registering database adapter for plugin ${plugin.name}`);\n      this.registerDatabaseAdapter(plugin.adapter);\n    }\n    if (plugin.actions) {\n      for (const action of plugin.actions) {\n        this.registerAction(action);\n      }\n    }\n    if (plugin.evaluators) {\n      for (const evaluator of plugin.evaluators) {\n        this.registerEvaluator(evaluator);\n      }\n    }\n    if (plugin.providers) {\n      for (const provider of plugin.providers) {\n        this.registerProvider(provider);\n      }\n    }\n    if (plugin.models) {\n      for (const [modelType, handler] of Object.entries(plugin.models)) {\n        this.registerModel(\n          modelType,\n          handler,\n          plugin.name,\n          plugin?.priority\n        );\n      }\n    }\n    if (plugin.routes) {\n      for (const route of plugin.routes) {\n        this.routes.push(route);\n      }\n    }\n    if (plugin.events) {\n      for (const [eventName, eventHandlers] of Object.entries(plugin.events)) {\n        for (const eventHandler of eventHandlers) {\n          this.registerEvent(eventName, eventHandler);\n        }\n      }\n    }\n    if (plugin.services) {\n      for (const service of plugin.services) {\n        if (this.isInitialized) {\n          await this.registerService(service);\n        } else {\n          this.servicesInitQueue.add(service);\n        }\n      }\n    }\n  }\n  getAllServices() {\n    return this.services;\n  }\n  async stop() {\n    this.logger.debug(`runtime::stop - character ${this.character.name}`);\n    for (const [serviceName, services] of this.services) {\n      this.logger.debug(`runtime::stop - requesting service stop for ${serviceName}`);\n      for (const service of services) {\n        await service.stop();\n      }\n    }\n  }\n  async initialize() {\n    if (this.isInitialized) {\n      this.logger.warn(\"Agent already initialized\");\n      return;\n    }\n    const pluginRegistrationPromises = [];\n    const pluginsToLoad = this.characterPlugins;\n    for (const plugin of pluginsToLoad) {\n      if (plugin) {\n        pluginRegistrationPromises.push(this.registerPlugin(plugin));\n      }\n    }\n    await Promise.all(pluginRegistrationPromises);\n    if (!this.adapter) {\n      this.logger.error(\n        \"Database adapter not initialized. Make sure @elizaos/plugin-sql is included in your plugins.\"\n      );\n      throw new Error(\n        \"Database adapter not initialized. The SQL plugin (@elizaos/plugin-sql) is required for agent initialization. Please ensure it is included in your character configuration.\"\n      );\n    }\n    try {\n      await this.adapter.init();\n      this.logger.info(\"Running plugin migrations...\");\n      await this.runPluginMigrations();\n      this.logger.info(\"Plugin migrations completed.\");\n      const existingAgent = await this.ensureAgentExists(this.character);\n      if (!existingAgent) {\n        const errorMsg = `Agent ${this.character.name} does not exist in database after ensureAgentExists call`;\n        throw new Error(errorMsg);\n      }\n      let agentEntity = await this.getEntityById(this.agentId);\n      if (!agentEntity) {\n        const created = await this.createEntity({\n          id: this.agentId,\n          names: [this.character.name],\n          metadata: {},\n          agentId: existingAgent.id\n        });\n        if (!created) {\n          const errorMsg = `Failed to create entity for agent ${this.agentId}`;\n          throw new Error(errorMsg);\n        }\n        agentEntity = await this.getEntityById(this.agentId);\n        if (!agentEntity) throw new Error(`Agent entity not found for ${this.agentId}`);\n        this.logger.debug(`Success: Agent entity created successfully for ${this.character.name}`);\n      }\n    } catch (error) {\n      const errorMsg = error instanceof Error ? error.message : String(error);\n      this.logger.error(`Failed to create agent entity: ${errorMsg}`);\n      throw error;\n    }\n    try {\n      const room = await this.getRoom(this.agentId);\n      if (!room) {\n        await this.createRoom({\n          id: this.agentId,\n          name: this.character.name,\n          source: \"elizaos\",\n          type: \"SELF\" /* SELF */,\n          channelId: this.agentId,\n          serverId: this.agentId,\n          worldId: this.agentId\n        });\n      }\n      const participants = await this.adapter.getParticipantsForRoom(this.agentId);\n      if (!participants.includes(this.agentId)) {\n        const added = await this.addParticipant(this.agentId, this.agentId);\n        if (!added) {\n          const errorMsg = `Failed to add agent ${this.agentId} as participant to its own room`;\n          throw new Error(errorMsg);\n        }\n        this.logger.debug(`Agent ${this.character.name} linked to its own room successfully`);\n      }\n    } catch (error) {\n      const errorMsg = error instanceof Error ? error.message : String(error);\n      this.logger.error(`Failed to add agent as participant: ${errorMsg}`);\n      throw error;\n    }\n    const embeddingModel = this.getModel(ModelType.TEXT_EMBEDDING);\n    if (!embeddingModel) {\n      this.logger.warn(\n        `[AgentRuntime][${this.character.name}] No TEXT_EMBEDDING model registered. Skipping embedding dimension setup.`\n      );\n    } else {\n      await this.ensureEmbeddingDimension();\n    }\n    for (const service of this.servicesInitQueue) {\n      await this.registerService(service);\n    }\n    this.isInitialized = true;\n  }\n  async runPluginMigrations() {\n    const drizzle = this.adapter?.db;\n    if (!drizzle) {\n      this.logger.warn(\"Drizzle instance not found on adapter, skipping plugin migrations.\");\n      return;\n    }\n    const pluginsWithSchemas = this.plugins.filter((p) => p.schema);\n    this.logger.info(`Found ${pluginsWithSchemas.length} plugins with schemas to migrate.`);\n    for (const p of pluginsWithSchemas) {\n      if (p.schema) {\n        this.logger.info(`Running migrations for plugin: ${p.name}`);\n        try {\n          if (this.adapter && \"runMigrations\" in this.adapter) {\n            await this.adapter.runMigrations(p.schema, p.name);\n            this.logger.info(`Successfully migrated plugin: ${p.name}`);\n          }\n        } catch (error) {\n          this.logger.error(`Failed to migrate plugin ${p.name}:`, error);\n        }\n      }\n    }\n  }\n  async getConnection() {\n    if (!this.adapter) {\n      throw new Error(\"Database adapter not registered\");\n    }\n    return this.adapter.getConnection();\n  }\n  setSetting(key, value, secret = false) {\n    if (secret) {\n      if (!this.character.secrets) {\n        this.character.secrets = {};\n      }\n      this.character.secrets[key] = value;\n    } else {\n      if (!this.character.settings) {\n        this.character.settings = {};\n      }\n      this.character.settings[key] = value;\n    }\n  }\n  getSetting(key) {\n    const value = this.character.secrets?.[key] || this.character.settings?.[key] || this.character.settings?.secrets?.[key] || this.settings[key];\n    const decryptedValue = decryptStringValue(value, getSalt());\n    if (decryptedValue === \"true\") return true;\n    if (decryptedValue === \"false\") return false;\n    return decryptedValue || null;\n  }\n  getConversationLength() {\n    return this.#conversationLength;\n  }\n  registerDatabaseAdapter(adapter) {\n    if (this.adapter) {\n      this.logger.warn(\n        \"Database adapter already registered. Additional adapters will be ignored. This may lead to unexpected behavior.\"\n      );\n    } else {\n      this.adapter = adapter;\n      this.logger.debug(\"Success: Database adapter registered successfully.\");\n    }\n  }\n  registerProvider(provider) {\n    this.providers.push(provider);\n    this.logger.debug(`Success: Provider ${provider.name} registered successfully.`);\n  }\n  registerAction(action) {\n    this.logger.debug(\n      `${this.character.name}(${this.agentId}) - Registering action: ${action.name}`\n    );\n    if (this.actions.find((a) => a.name === action.name)) {\n      this.logger.warn(\n        `${this.character.name}(${this.agentId}) - Action ${action.name} already exists. Skipping registration.`\n      );\n    } else {\n      this.actions.push(action);\n      this.logger.debug(\n        `${this.character.name}(${this.agentId}) - Action ${action.name} registered successfully.`\n      );\n    }\n  }\n  registerEvaluator(evaluator) {\n    this.evaluators.push(evaluator);\n  }\n  // Helper functions for immutable action plan updates\n  updateActionPlan(plan, updates) {\n    return { ...plan, ...updates };\n  }\n  updateActionStep(plan, index, stepUpdates) {\n    if (!plan.steps || index < 0 || index >= plan.steps.length) {\n      this.logger.warn(\n        `Invalid step index: ${index} for plan with ${plan.steps?.length || 0} steps`\n      );\n      return plan;\n    }\n    return {\n      ...plan,\n      steps: plan.steps.map(\n        (step, i) => i === index ? { ...step, ...stepUpdates } : step\n      )\n    };\n  }\n  async processActions(message, responses, state, callback) {\n    const allActions = [];\n    for (const response of responses) {\n      if (response.content?.actions && response.content.actions.length > 0) {\n        allActions.push(...response.content.actions);\n      }\n    }\n    const hasMultipleActions = allActions.length > 1;\n    const runId = this.createRunId();\n    let actionPlan = null;\n    if (hasMultipleActions) {\n      const thought = responses[0]?.content?.thought || `Executing ${allActions.length} actions: ${allActions.join(\", \")}`;\n      actionPlan = {\n        runId,\n        totalSteps: allActions.length,\n        currentStep: 0,\n        steps: allActions.map((action) => ({\n          action,\n          status: \"pending\"\n        })),\n        thought,\n        startTime: Date.now()\n      };\n    }\n    let actionIndex = 0;\n    for (const response of responses) {\n      let normalizeAction = function(actionString) {\n        return actionString.toLowerCase().replace(/_/g, \"\");\n      };\n      if (!response.content?.actions || response.content.actions.length === 0) {\n        this.logger.warn(\"No action found in the response content.\");\n        continue;\n      }\n      const actions = response.content.actions;\n      const actionResults = [];\n      let accumulatedState = state;\n      this.logger.debug(`Found actions: ${this.actions.map((a) => normalizeAction(a.name))}`);\n      for (const responseAction of actions) {\n        if (actionPlan) {\n          actionPlan = this.updateActionPlan(actionPlan, { currentStep: actionIndex + 1 });\n        }\n        accumulatedState = await this.composeState(message, [\n          \"RECENT_MESSAGES\",\n          \"ACTION_STATE\"\n          // This will include the action plan\n        ]);\n        if (actionPlan && accumulatedState.data) {\n          accumulatedState.data.actionPlan = actionPlan;\n          accumulatedState.data.actionResults = actionResults;\n        }\n        this.logger.debug(`Success: Calling action: ${responseAction}`);\n        const normalizedResponseAction = normalizeAction(responseAction);\n        let action = this.actions.find(\n          (a) => normalizeAction(a.name) === normalizedResponseAction\n        );\n        if (!action) {\n          action = this.actions.find(\n            (a) => normalizeAction(a.name).includes(normalizedResponseAction) || normalizedResponseAction.includes(normalizeAction(a.name))\n          );\n        }\n        if (action) {\n          this.logger.debug(`Success: Found action: ${action?.name}`);\n        } else {\n          this.logger.debug(\"Attempting to find action in similes.\");\n          for (const _action of this.actions) {\n            const exactSimileMatch = _action.similes?.find(\n              (simile) => normalizeAction(simile) === normalizedResponseAction\n            );\n            if (exactSimileMatch) {\n              action = _action;\n              this.logger.debug(`Success: Action found in similes (exact match): ${action.name}`);\n              break;\n            }\n            const fuzzySimileMatch = _action.similes?.find(\n              (simile) => normalizeAction(simile).includes(normalizedResponseAction) || normalizedResponseAction.includes(normalizeAction(simile))\n            );\n            if (fuzzySimileMatch) {\n              action = _action;\n              this.logger.debug(`Success: Action found in similes (fuzzy match): ${action.name}`);\n              break;\n            }\n          }\n        }\n        if (!action) {\n          const errorMsg = `No action found for: ${responseAction}`;\n          this.logger.error(errorMsg);\n          if (actionPlan && actionPlan.steps[actionIndex]) {\n            actionPlan = this.updateActionStep(actionPlan, actionIndex, {\n              status: \"failed\",\n              error: errorMsg\n            });\n          }\n          const actionMemory = {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(),\n            entityId: message.entityId,\n            roomId: message.roomId,\n            worldId: message.worldId,\n            content: {\n              thought: errorMsg,\n              source: \"auto\",\n              type: \"action_result\",\n              actionName: responseAction,\n              actionStatus: \"failed\",\n              runId\n            }\n          };\n          await this.createMemory(actionMemory, \"messages\");\n          actionIndex++;\n          continue;\n        }\n        if (!action.handler) {\n          this.logger.error(`Action ${action.name} has no handler.`);\n          if (actionPlan && actionPlan.steps[actionIndex]) {\n            actionPlan = this.updateActionStep(actionPlan, actionIndex, {\n              status: \"failed\",\n              error: \"No handler\"\n            });\n          }\n          actionIndex++;\n          continue;\n        }\n        try {\n          this.logger.debug(`Executing handler for action: ${action.name}`);\n          const actionId = (0,uuid__WEBPACK_IMPORTED_MODULE_8__[\"default\"])();\n          this.currentActionContext = {\n            actionName: action.name,\n            actionId,\n            prompts: []\n          };\n          const actionContext = {\n            previousResults: actionResults,\n            getPreviousResult: (actionName) => {\n              return actionResults.find((r) => r.data?.actionName === actionName);\n            }\n          };\n          const options2 = {\n            context: actionContext\n          };\n          if (actionPlan) {\n            options2.actionPlan = {\n              totalSteps: actionPlan.totalSteps,\n              currentStep: actionPlan.currentStep,\n              steps: actionPlan.steps,\n              thought: actionPlan.thought\n            };\n          }\n          const result = await action.handler(\n            this,\n            message,\n            accumulatedState,\n            options2,\n            callback,\n            responses\n          );\n          const isLegacyReturn = result === void 0 || result === null || typeof result === \"boolean\";\n          let actionResult = null;\n          if (!isLegacyReturn) {\n            if (typeof result === \"object\" && result !== null && (\"values\" in result || \"data\" in result || \"text\" in result)) {\n              actionResult = {\n                success: true,\n                // Default to true if not specified\n                ...result\n              };\n            } else {\n              actionResult = {\n                success: true,\n                // Default success for legacy results\n                data: {\n                  actionName: action.name,\n                  legacyResult: result\n                }\n              };\n            }\n            actionResults.push(actionResult);\n            if (actionResult.values) {\n              accumulatedState = {\n                ...accumulatedState,\n                values: { ...accumulatedState.values, ...actionResult.values },\n                data: {\n                  ...accumulatedState.data || {},\n                  actionResults: [...accumulatedState.data?.actionResults || [], actionResult],\n                  actionPlan\n                }\n              };\n            }\n            if (actionResult && accumulatedState.data) {\n              if (!accumulatedState.data.workingMemory) accumulatedState.data.workingMemory = {};\n              const memoryKey = `action_${responseAction}_${(0,uuid__WEBPACK_IMPORTED_MODULE_8__[\"default\"])()}`;\n              const memoryEntry = {\n                actionName: action.name,\n                result: actionResult,\n                timestamp: Date.now()\n              };\n              accumulatedState.data.workingMemory[memoryKey] = memoryEntry;\n              const entries = Object.entries(accumulatedState.data.workingMemory);\n              if (entries.length > this.maxWorkingMemoryEntries) {\n                const sorted = entries.sort((a, b) => {\n                  const entryA = a[1];\n                  const entryB = b[1];\n                  const timestampA = entryA?.timestamp ?? 0;\n                  const timestampB = entryB?.timestamp ?? 0;\n                  return timestampB - timestampA;\n                });\n                accumulatedState.data.workingMemory = Object.fromEntries(\n                  sorted.slice(0, this.maxWorkingMemoryEntries)\n                );\n              }\n            }\n            if (actionPlan && actionPlan.steps[actionIndex]) {\n              actionPlan = this.updateActionStep(actionPlan, actionIndex, {\n                status: \"completed\",\n                result: actionResult\n              });\n            }\n          }\n          const actionMemory = {\n            id: actionId,\n            entityId: this.agentId,\n            roomId: message.roomId,\n            worldId: message.worldId,\n            content: {\n              text: actionResult?.text || `Executed action: ${action.name}`,\n              source: \"action\",\n              type: \"action_result\",\n              actionName: action.name,\n              actionStatus: actionResult?.success ? \"completed\" : \"failed\",\n              actionResult: isLegacyReturn ? { legacy: result } : actionResult,\n              runId,\n              ...actionPlan && {\n                planStep: `${actionPlan.currentStep}/${actionPlan.totalSteps}`,\n                planThought: actionPlan.thought\n              }\n            },\n            metadata: {\n              type: \"action_result\",\n              actionName: action.name,\n              runId,\n              actionId,\n              ...actionPlan && {\n                totalSteps: actionPlan.totalSteps,\n                currentStep: actionPlan.currentStep\n              }\n            }\n          };\n          await this.createMemory(actionMemory, \"messages\");\n          this.logger.debug(`Action ${action.name} completed`, {\n            isLegacyReturn,\n            result: isLegacyReturn ? result : void 0,\n            hasValues: actionResult ? !!actionResult.values : false,\n            hasData: actionResult ? !!actionResult.data : false,\n            hasText: actionResult ? !!actionResult.text : false\n          });\n          await this.adapter.log({\n            entityId: message.entityId,\n            roomId: message.roomId,\n            type: \"action\",\n            body: {\n              action: action.name,\n              actionId,\n              message: message.content.text,\n              messageId: message.id,\n              state: accumulatedState,\n              responses,\n              result: isLegacyReturn ? { legacy: result } : actionResult,\n              isLegacyReturn,\n              prompts: this.currentActionContext?.prompts || [],\n              promptCount: this.currentActionContext?.prompts.length || 0,\n              runId,\n              ...actionPlan && {\n                planStep: `${actionPlan.currentStep}/${actionPlan.totalSteps}`,\n                planThought: actionPlan.thought\n              }\n            }\n          });\n          this.currentActionContext = void 0;\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : String(error);\n          this.logger.error(error);\n          if (actionPlan && actionPlan.steps[actionIndex]) {\n            actionPlan = this.updateActionStep(actionPlan, actionIndex, {\n              status: \"failed\",\n              error: errorMessage\n            });\n          }\n          this.currentActionContext = void 0;\n          const errorResult = {\n            success: false,\n            // Required field\n            data: {\n              actionName: action.name,\n              error: errorMessage,\n              errorObject: error\n            }\n          };\n          actionResults.push(errorResult);\n          const actionMemory = {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(),\n            content: {\n              thought: errorMessage,\n              source: \"auto\",\n              type: \"action_result\",\n              actionName: action.name,\n              actionStatus: \"failed\",\n              error: errorMessage,\n              runId,\n              ...actionPlan && {\n                planStep: `${actionPlan.currentStep}/${actionPlan.totalSteps}`,\n                planThought: actionPlan.thought\n              }\n            },\n            entityId: this.agentId,\n            roomId: message.roomId,\n            worldId: message.worldId,\n            metadata: {\n              type: \"action_result\",\n              actionName: action.name,\n              runId,\n              error: true,\n              ...actionPlan && {\n                totalSteps: actionPlan.totalSteps,\n                currentStep: actionPlan.currentStep\n              }\n            }\n          };\n          await this.createMemory(actionMemory, \"messages\");\n          if (error?.critical || error?.code === \"CRITICAL_ERROR\") {\n            throw error;\n          }\n        }\n        actionIndex++;\n      }\n      if (message.id) {\n        this.stateCache.set(`${message.id}_action_results`, {\n          values: { actionResults },\n          data: { actionResults, actionPlan },\n          text: JSON.stringify(actionResults)\n        });\n      }\n    }\n  }\n  async evaluate(message, state, didRespond, callback, responses) {\n    const evaluatorPromises = this.evaluators.map(async (evaluator) => {\n      if (!evaluator.handler) {\n        return null;\n      }\n      if (!didRespond && !evaluator.alwaysRun) {\n        return null;\n      }\n      const result = await evaluator.validate(this, message, state);\n      if (result) {\n        return evaluator;\n      }\n      return null;\n    });\n    const evaluators = (await Promise.all(evaluatorPromises)).filter(Boolean);\n    if (evaluators.length === 0) {\n      return [];\n    }\n    state = await this.composeState(message, [\"RECENT_MESSAGES\", \"EVALUATORS\"]);\n    await Promise.all(\n      evaluators.map(async (evaluator) => {\n        if (evaluator.handler) {\n          await evaluator.handler(this, message, state, {}, callback, responses);\n          this.adapter.log({\n            entityId: message.entityId,\n            roomId: message.roomId,\n            type: \"evaluator\",\n            body: {\n              evaluator: evaluator.name,\n              messageId: message.id,\n              message: message.content.text,\n              state\n            }\n          });\n        }\n      })\n    );\n    return evaluators;\n  }\n  // highly SQL optimized queries\n  async ensureConnections(entities, rooms, source, world) {\n    if (!entities) {\n      console.trace();\n      this.logger.error(\"ensureConnections - no entities\");\n      return;\n    }\n    if (!rooms || rooms.length === 0) {\n      console.trace();\n      this.logger.error(\"ensureConnections - no rooms\");\n      return;\n    }\n    await this.ensureWorldExists({ ...world, agentId: this.agentId });\n    const firstRoom = rooms[0];\n    const chunkArray = (arr, size) => arr.reduce((chunks, item, i) => {\n      if (i % size === 0) chunks.push([]);\n      chunks[chunks.length - 1].push(item);\n      return chunks;\n    }, []);\n    const roomIds = rooms.map((r2) => r2.id);\n    const roomExistsCheck = await this.getRoomsByIds(roomIds);\n    const roomsIdExists = roomExistsCheck.map((r2) => r2.id);\n    const roomsToCreate = roomIds.filter((id) => !roomsIdExists.includes(id));\n    const rf = {\n      worldId: world.id,\n      serverId: world.serverId,\n      source,\n      agentId: this.agentId\n    };\n    if (roomsToCreate.length) {\n      this.logger.debug(\n        \"runtime/ensureConnections - create\",\n        roomsToCreate.length.toLocaleString(),\n        \"rooms\"\n      );\n      const roomObjsToCreate = rooms.filter((r2) => roomsToCreate.includes(r2.id)).map((r2) => ({ ...r2, ...rf }));\n      await this.createRooms(roomObjsToCreate);\n    }\n    const entityIds = entities.map((e) => e.id);\n    const entityExistsCheck = await this.adapter.getEntitiesByIds(entityIds);\n    const entitiesToUpdate = entityExistsCheck.map((e) => e.id);\n    const entitiesToCreate = entities.filter((e) => !entitiesToUpdate.includes(e.id));\n    const r = {\n      roomId: firstRoom.id,\n      channelId: firstRoom.channelId,\n      type: firstRoom.type\n    };\n    const wf = {\n      worldId: world.id,\n      serverId: world.serverId\n    };\n    if (entitiesToCreate.length) {\n      this.logger.debug(\n        \"runtime/ensureConnections - creating\",\n        entitiesToCreate.length.toLocaleString(),\n        \"entities...\"\n      );\n      const ef = {\n        ...r,\n        ...wf,\n        source,\n        agentId: this.agentId\n      };\n      const entitiesToCreateWFields = entitiesToCreate.map((e) => ({ ...e, ...ef }));\n      const batches = chunkArray(entitiesToCreateWFields, 5e3);\n      for (const batch of batches) {\n        await this.createEntities(batch);\n      }\n    }\n    await this.ensureParticipantInRoom(this.agentId, firstRoom.id);\n    const entityIdsInFirstRoom = await this.getParticipantsForRoom(firstRoom.id);\n    const entityIdsInFirstRoomFiltered = entityIdsInFirstRoom.filter(Boolean);\n    const missingIdsInRoom = entityIds.filter((id) => !entityIdsInFirstRoomFiltered.includes(id));\n    if (missingIdsInRoom.length) {\n      this.logger.debug(\n        \"runtime/ensureConnections - Missing\",\n        missingIdsInRoom.length.toLocaleString(),\n        \"connections in\",\n        firstRoom.id\n      );\n      await this.addParticipantsRoom(missingIdsInRoom, firstRoom.id);\n    }\n    this.logger.success(`Success: Successfully connected world`);\n  }\n  async ensureConnection({\n    entityId,\n    roomId,\n    worldId,\n    worldName,\n    userName,\n    name,\n    source,\n    type,\n    channelId,\n    serverId,\n    userId,\n    metadata\n  }) {\n    if (!worldId && serverId) {\n      worldId = createUniqueUuid(this.agentId + serverId, serverId);\n    }\n    const names3 = [name, userName].filter(Boolean);\n    const entityMetadata = {\n      [source]: {\n        id: userId,\n        name,\n        userName\n      }\n    };\n    try {\n      const entity = await this.getEntityById(entityId);\n      if (!entity) {\n        try {\n          const success = await this.createEntity({\n            id: entityId,\n            names: names3,\n            metadata: entityMetadata,\n            agentId: this.agentId\n          });\n          if (success) {\n            this.logger.debug(\n              `Created new entity ${entityId} for user ${name || userName || \"unknown\"}`\n            );\n          } else {\n            throw new Error(`Failed to create entity ${entityId}`);\n          }\n        } catch (error) {\n          if (error.message?.includes(\"duplicate key\") || error.code === \"23505\") {\n            this.logger.debug(\n              `Entity ${entityId} exists in database but not for this agent. This is normal in multi-agent setups.`\n            );\n          } else {\n            throw error;\n          }\n        }\n      } else {\n        await this.adapter.updateEntity({\n          id: entityId,\n          names: [.../* @__PURE__ */ new Set([...entity.names || [], ...names3])].filter(Boolean),\n          metadata: {\n            ...entity.metadata,\n            [source]: {\n              ...entity.metadata?.[source],\n              id: userId,\n              name,\n              userName\n            }\n          },\n          agentId: this.agentId\n        });\n      }\n      await this.ensureWorldExists({\n        id: worldId,\n        name: worldName || serverId ? `World for server ${serverId}` : `World for room ${roomId}`,\n        agentId: this.agentId,\n        serverId: serverId || \"default\",\n        metadata\n      });\n      await this.ensureRoomExists({\n        id: roomId,\n        name,\n        source,\n        type,\n        channelId,\n        serverId,\n        worldId\n      });\n      try {\n        await this.ensureParticipantInRoom(entityId, roomId);\n      } catch (error) {\n        if (error.message?.includes(\"not found\")) {\n          const added = await this.addParticipant(entityId, roomId);\n          if (!added) {\n            throw new Error(`Failed to add participant ${entityId} to room ${roomId}`);\n          }\n          this.logger.debug(`Added participant ${entityId} to room ${roomId} directly`);\n        } else {\n          throw error;\n        }\n      }\n      await this.ensureParticipantInRoom(this.agentId, roomId);\n      this.logger.debug(`Success: Successfully connected entity ${entityId} in room ${roomId}`);\n    } catch (error) {\n      this.logger.error(\n        `Failed to ensure connection: ${error instanceof Error ? error.message : String(error)}`\n      );\n      throw error;\n    }\n  }\n  async ensureParticipantInRoom(entityId, roomId) {\n    const entity = await this.getEntityById(entityId);\n    if (!entity && entityId !== this.agentId) {\n      this.logger.warn(\n        `Entity ${entityId} not directly accessible to agent ${this.agentId}. Will attempt to add as participant anyway.`\n      );\n    } else if (!entity && entityId === this.agentId) {\n      throw new Error(`Agent entity ${entityId} not found, cannot add as participant.`);\n    } else if (!entity) {\n      throw new Error(`User entity ${entityId} not found, cannot add as participant.`);\n    }\n    const participants = await this.adapter.getParticipantsForRoom(roomId);\n    if (!participants.includes(entityId)) {\n      const added = await this.addParticipant(entityId, roomId);\n      if (!added) {\n        throw new Error(`Failed to add participant ${entityId} to room ${roomId}`);\n      }\n      if (entityId === this.agentId) {\n        this.logger.debug(`Agent ${this.character.name} linked to room ${roomId} successfully.`);\n      } else {\n        this.logger.debug(`User ${entityId} linked to room ${roomId} successfully.`);\n      }\n    }\n  }\n  async removeParticipant(entityId, roomId) {\n    return await this.adapter.removeParticipant(entityId, roomId);\n  }\n  async getParticipantsForEntity(entityId) {\n    return await this.adapter.getParticipantsForEntity(entityId);\n  }\n  async getParticipantsForRoom(roomId) {\n    return await this.adapter.getParticipantsForRoom(roomId);\n  }\n  async addParticipant(entityId, roomId) {\n    return await this.adapter.addParticipantsRoom([entityId], roomId);\n  }\n  async addParticipantsRoom(entityIds, roomId) {\n    return await this.adapter.addParticipantsRoom(entityIds, roomId);\n  }\n  /**\n   * Ensure the existence of a world.\n   */\n  async ensureWorldExists({ id, name, serverId, metadata }) {\n    const world = await this.getWorld(id);\n    if (!world) {\n      this.logger.debug(\"Creating world:\", {\n        id,\n        name,\n        serverId,\n        agentId: this.agentId\n      });\n      await this.adapter.createWorld({\n        id,\n        name,\n        agentId: this.agentId,\n        serverId: serverId || \"default\",\n        metadata\n      });\n      this.logger.debug(`World ${id} created successfully.`);\n    }\n  }\n  async ensureRoomExists({ id, name, source, type, channelId, serverId, worldId, metadata }) {\n    if (!worldId) throw new Error(\"worldId is required\");\n    const room = await this.getRoom(id);\n    if (!room) {\n      await this.createRoom({\n        id,\n        name,\n        agentId: this.agentId,\n        source,\n        type,\n        channelId,\n        serverId,\n        worldId,\n        metadata\n      });\n      this.logger.debug(`Room ${id} created successfully.`);\n    }\n  }\n  async composeState(message, includeList = null, onlyInclude = false, skipCache = false) {\n    const filterList = onlyInclude ? includeList : null;\n    const emptyObj = {\n      values: {},\n      data: {},\n      text: \"\"\n    };\n    const cachedState = skipCache ? emptyObj : await this.stateCache.get(message.id) || emptyObj;\n    const providerNames = /* @__PURE__ */ new Set();\n    if (filterList && filterList.length > 0) {\n      filterList.forEach((name) => providerNames.add(name));\n    } else {\n      this.providers.filter((p) => !p.private && !p.dynamic).forEach((p) => providerNames.add(p.name));\n    }\n    if (!filterList && includeList && includeList.length > 0) {\n      includeList.forEach((name) => providerNames.add(name));\n    }\n    const providersToGet = Array.from(\n      new Set(this.providers.filter((p) => providerNames.has(p.name)))\n    ).sort((a, b) => (a.position || 0) - (b.position || 0));\n    const providerData = await Promise.all(\n      providersToGet.map(async (provider) => {\n        const start = Date.now();\n        try {\n          const result = await provider.get(this, message, cachedState);\n          const duration = Date.now() - start;\n          this.logger.debug(`${provider.name} Provider took ${duration}ms to respond`);\n          return {\n            ...result,\n            providerName: provider.name\n          };\n        } catch (error) {\n          console.error(\"provider error\", provider.name, error);\n          return { values: {}, text: \"\", data: {}, providerName: provider.name };\n        }\n      })\n    );\n    const currentProviderResults = { ...cachedState.data?.providers || {} };\n    for (const freshResult of providerData) {\n      currentProviderResults[freshResult.providerName] = freshResult;\n    }\n    const orderedTexts = [];\n    for (const provider of providersToGet) {\n      const result = currentProviderResults[provider.name];\n      if (result && result.text && result.text.trim() !== \"\") {\n        orderedTexts.push(result.text);\n      }\n    }\n    const providersText = orderedTexts.join(\"\\n\");\n    const aggregatedStateValues = { ...cachedState.values || {} };\n    for (const provider of providersToGet) {\n      const providerResult = currentProviderResults[provider.name];\n      if (providerResult && providerResult.values && typeof providerResult.values === \"object\") {\n        Object.assign(aggregatedStateValues, providerResult.values);\n      }\n    }\n    for (const providerName in currentProviderResults) {\n      if (!providersToGet.some((p) => p.name === providerName)) {\n        const providerResult = currentProviderResults[providerName];\n        if (providerResult && providerResult.values && typeof providerResult.values === \"object\") {\n          Object.assign(aggregatedStateValues, providerResult.values);\n        }\n      }\n    }\n    const newState = {\n      values: {\n        ...aggregatedStateValues,\n        providers: providersText\n      },\n      data: {\n        ...cachedState.data || {},\n        providers: currentProviderResults\n      },\n      text: providersText\n    };\n    this.stateCache.set(message.id, newState);\n    return newState;\n  }\n  getService(serviceName) {\n    const serviceInstances = this.services.get(serviceName);\n    if (!serviceInstances || serviceInstances.length === 0) {\n      this.logger.debug(`Service ${serviceName} not found`);\n      return null;\n    }\n    return serviceInstances[0];\n  }\n  /**\n   * Type-safe service getter that ensures the correct service type is returned\n   * @template T - The expected service class type\n   * @param serviceName - The service type name\n   * @returns The service instance with proper typing, or null if not found\n   */\n  getTypedService(serviceName) {\n    return this.getService(serviceName);\n  }\n  /**\n   * Get all services of a specific type\n   * @template T - The expected service class type\n   * @param serviceName - The service type name\n   * @returns Array of service instances with proper typing\n   */\n  getServicesByType(serviceName) {\n    const serviceInstances = this.services.get(serviceName);\n    if (!serviceInstances || serviceInstances.length === 0) {\n      this.logger.debug(`No services found for type ${serviceName}`);\n      return [];\n    }\n    return serviceInstances;\n  }\n  /**\n   * Get all registered service types\n   * @returns Array of registered service type names\n   */\n  getRegisteredServiceTypes() {\n    return Array.from(this.services.keys());\n  }\n  /**\n   * Check if a service type is registered\n   * @param serviceType - The service type to check\n   * @returns true if the service is registered\n   */\n  hasService(serviceType) {\n    const serviceInstances = this.services.get(serviceType);\n    return serviceInstances !== void 0 && serviceInstances.length > 0;\n  }\n  async registerService(serviceDef) {\n    const serviceType = serviceDef.serviceType;\n    if (!serviceType) {\n      this.logger.warn(\n        `Service ${serviceDef.name} is missing serviceType. Please define a static serviceType property.`\n      );\n      return;\n    }\n    this.logger.debug(\n      `${this.character.name}(${this.agentId}) - Registering service:`,\n      serviceType\n    );\n    try {\n      const serviceInstance = await serviceDef.start(this);\n      if (!this.services.has(serviceType)) {\n        this.services.set(serviceType, []);\n      }\n      if (!this.serviceTypes.has(serviceType)) {\n        this.serviceTypes.set(serviceType, []);\n      }\n      this.services.get(serviceType).push(serviceInstance);\n      this.serviceTypes.get(serviceType).push(serviceDef);\n      if (typeof serviceDef.registerSendHandlers === \"function\") {\n        serviceDef.registerSendHandlers(this, serviceInstance);\n      }\n      this.logger.debug(\n        `${this.character.name}(${this.agentId}) - Service ${serviceType} registered successfully`\n      );\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      this.logger.error(\n        `${this.character.name}(${this.agentId}) - Failed to register service ${serviceType}: ${errorMessage}`\n      );\n      throw error;\n    }\n  }\n  registerModel(modelType, handler, provider, priority) {\n    const modelKey = typeof modelType === \"string\" ? modelType : ModelType[modelType];\n    if (!this.models.has(modelKey)) {\n      this.models.set(modelKey, []);\n    }\n    const registrationOrder = Date.now();\n    this.models.get(modelKey)?.push({\n      handler,\n      provider,\n      priority: priority || 0,\n      registrationOrder\n    });\n    this.models.get(modelKey)?.sort((a, b) => {\n      if ((b.priority || 0) !== (a.priority || 0)) {\n        return (b.priority || 0) - (a.priority || 0);\n      }\n      return a.registrationOrder - b.registrationOrder;\n    });\n  }\n  getModel(modelType, provider) {\n    const modelKey = typeof modelType === \"string\" ? modelType : ModelType[modelType];\n    const models = this.models.get(modelKey);\n    if (!models?.length) {\n      return void 0;\n    }\n    if (provider) {\n      const modelWithProvider = models.find((m) => m.provider === provider);\n      if (modelWithProvider) {\n        this.logger.debug(\n          `[AgentRuntime][${this.character.name}] Using model ${modelKey} from provider ${provider}`\n        );\n        return modelWithProvider.handler;\n      } else {\n        this.logger.warn(\n          `[AgentRuntime][${this.character.name}] No model found for provider ${provider}`\n        );\n      }\n    }\n    this.logger.debug(\n      `[AgentRuntime][${this.character.name}] Using model ${modelKey} from provider ${models[0].provider}`\n    );\n    return models[0].handler;\n  }\n  /**\n   * Retrieves model configuration settings from character settings with support for\n   * model-specific overrides and default fallbacks.\n   *\n   * Precedence order (highest to lowest):\n   * 1. Model-specific settings (e.g., TEXT_SMALL_TEMPERATURE)\n   * 2. Default settings (e.g., DEFAULT_TEMPERATURE)\n   * 3. Legacy settings for backwards compatibility (e.g., MODEL_TEMPERATURE)\n   *\n   * @param modelType The specific model type to get settings for\n   * @returns Object containing model parameters if they exist, or null if no settings are configured\n   */\n  getModelSettings(modelType) {\n    const modelSettings = {};\n    const getSettingWithFallback = (param, legacyKey) => {\n      if (modelType) {\n        const modelSpecificKey = `${modelType}_${param}`;\n        const modelValue = this.getSetting(modelSpecificKey);\n        if (modelValue !== null && modelValue !== void 0) {\n          const numValue = Number(modelValue);\n          if (!isNaN(numValue)) {\n            return numValue;\n          }\n        }\n      }\n      const defaultKey = `DEFAULT_${param}`;\n      const defaultValue = this.getSetting(defaultKey);\n      if (defaultValue !== null && defaultValue !== void 0) {\n        const numValue = Number(defaultValue);\n        if (!isNaN(numValue)) {\n          return numValue;\n        }\n      }\n      const legacyValue = this.getSetting(legacyKey);\n      if (legacyValue !== null && legacyValue !== void 0) {\n        const numValue = Number(legacyValue);\n        if (!isNaN(numValue)) {\n          return numValue;\n        }\n      }\n      return null;\n    };\n    const maxTokens = getSettingWithFallback(\"MAX_TOKENS\", MODEL_SETTINGS.MODEL_MAX_TOKEN);\n    const temperature = getSettingWithFallback(\"TEMPERATURE\", MODEL_SETTINGS.MODEL_TEMPERATURE);\n    const frequencyPenalty = getSettingWithFallback(\n      \"FREQUENCY_PENALTY\",\n      MODEL_SETTINGS.MODEL_FREQ_PENALTY\n    );\n    const presencePenalty = getSettingWithFallback(\n      \"PRESENCE_PENALTY\",\n      MODEL_SETTINGS.MODEL_PRESENCE_PENALTY\n    );\n    if (maxTokens !== null) modelSettings.maxTokens = maxTokens;\n    if (temperature !== null) modelSettings.temperature = temperature;\n    if (frequencyPenalty !== null) modelSettings.frequencyPenalty = frequencyPenalty;\n    if (presencePenalty !== null) modelSettings.presencePenalty = presencePenalty;\n    return Object.keys(modelSettings).length > 0 ? modelSettings : null;\n  }\n  async useModel(modelType, params, provider) {\n    const modelKey = typeof modelType === \"string\" ? modelType : ModelType[modelType];\n    const promptContent = params?.prompt || params?.input || (Array.isArray(params?.messages) ? JSON.stringify(params.messages) : null);\n    const model = this.getModel(modelKey, provider);\n    if (!model) {\n      const errorMsg = `No handler found for delegate type: ${modelKey}`;\n      throw new Error(errorMsg);\n    }\n    this.logger.debug(\n      `[useModel] ${modelKey} input: ` + JSON.stringify(params, safeReplacer(), 2).replace(/\\\\n/g, \"\\n\")\n    );\n    let paramsWithRuntime;\n    if (params === null || params === void 0 || typeof params !== \"object\" || Array.isArray(params) || typeof Buffer !== \"undefined\" && Buffer.isBuffer(params)) {\n      paramsWithRuntime = params;\n    } else {\n      const modelSettings = this.getModelSettings(modelKey);\n      if (modelSettings) {\n        paramsWithRuntime = {\n          ...modelSettings,\n          // Apply model settings first (includes defaults and model-specific)\n          ...params,\n          // Then apply specific params (allowing overrides)\n          runtime: this\n        };\n      } else {\n        paramsWithRuntime = {\n          ...params,\n          runtime: this\n        };\n      }\n    }\n    const startTime = performance.now();\n    try {\n      const response = await model(this, paramsWithRuntime);\n      const elapsedTime = performance.now() - startTime;\n      this.logger.debug(\n        `[useModel] ${modelKey} output (took ${Number(elapsedTime.toFixed(2)).toLocaleString()}ms):`,\n        Array.isArray(response) ? `${JSON.stringify(response.slice(0, 5))}...${JSON.stringify(response.slice(-5))} (${response.length} items)` : JSON.stringify(response, safeReplacer(), 2).replace(/\\\\n/g, \"\\n\")\n      );\n      if (modelKey !== ModelType.TEXT_EMBEDDING && promptContent) {\n        if (this.currentActionContext) {\n          this.currentActionContext.prompts.push({\n            modelType: modelKey,\n            prompt: promptContent,\n            timestamp: Date.now()\n          });\n        }\n      }\n      this.adapter.log({\n        entityId: this.agentId,\n        roomId: this.agentId,\n        body: {\n          modelType,\n          modelKey,\n          params: {\n            ...typeof params === \"object\" && !Array.isArray(params) && params ? params : {},\n            prompt: promptContent\n          },\n          prompt: promptContent,\n          runId: this.getCurrentRunId(),\n          timestamp: Date.now(),\n          executionTime: elapsedTime,\n          provider: provider || this.models.get(modelKey)?.[0]?.provider || \"unknown\",\n          actionContext: this.currentActionContext ? {\n            actionName: this.currentActionContext.actionName,\n            actionId: this.currentActionContext.actionId\n          } : void 0,\n          response: Array.isArray(response) && response.every((x) => typeof x === \"number\") ? \"[array]\" : response\n        },\n        type: `useModel:${modelKey}`\n      });\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n  registerEvent(event, handler) {\n    if (!this.events.has(event)) {\n      this.events.set(event, []);\n    }\n    this.events.get(event)?.push(handler);\n  }\n  getEvent(event) {\n    return this.events.get(event);\n  }\n  async emitEvent(event, params) {\n    const events = Array.isArray(event) ? event : [event];\n    for (const eventName of events) {\n      const eventHandlers = this.events.get(eventName);\n      if (!eventHandlers) {\n        continue;\n      }\n      try {\n        await Promise.all(eventHandlers.map((handler) => handler(params)));\n      } catch (error) {\n        this.logger.error(`Error during emitEvent for ${eventName} (handler execution):`, error);\n      }\n    }\n  }\n  async ensureEmbeddingDimension() {\n    this.logger.debug(`[AgentRuntime][${this.character.name}] Starting ensureEmbeddingDimension`);\n    if (!this.adapter) {\n      throw new Error(\n        `[AgentRuntime][${this.character.name}] Database adapter not initialized before ensureEmbeddingDimension`\n      );\n    }\n    try {\n      const model = this.getModel(ModelType.TEXT_EMBEDDING);\n      if (!model) {\n        throw new Error(\n          `[AgentRuntime][${this.character.name}] No TEXT_EMBEDDING model registered`\n        );\n      }\n      this.logger.debug(`[AgentRuntime][${this.character.name}] Getting embedding dimensions`);\n      const embedding = await this.useModel(ModelType.TEXT_EMBEDDING, null);\n      if (!embedding || !embedding.length) {\n        throw new Error(`[AgentRuntime][${this.character.name}] Invalid embedding received`);\n      }\n      this.logger.debug(\n        `[AgentRuntime][${this.character.name}] Setting embedding dimension: ${embedding.length}`\n      );\n      await this.adapter.ensureEmbeddingDimension(embedding.length);\n      this.logger.debug(\n        `[AgentRuntime][${this.character.name}] Successfully set embedding dimension`\n      );\n    } catch (error) {\n      this.logger.debug(\n        `[AgentRuntime][${this.character.name}] Error in ensureEmbeddingDimension:`,\n        error\n      );\n      throw error;\n    }\n  }\n  registerTaskWorker(taskHandler) {\n    if (this.taskWorkers.has(taskHandler.name)) {\n      this.logger.warn(\n        `Task definition ${taskHandler.name} already registered. Will be overwritten.`\n      );\n    }\n    this.taskWorkers.set(taskHandler.name, taskHandler);\n  }\n  getTaskWorker(name) {\n    return this.taskWorkers.get(name);\n  }\n  get db() {\n    return this.adapter.db;\n  }\n  async init() {\n    await this.adapter.init();\n  }\n  async close() {\n    await this.adapter.close();\n  }\n  async getAgent(agentId) {\n    return await this.adapter.getAgent(agentId);\n  }\n  async getAgents() {\n    return await this.adapter.getAgents();\n  }\n  async createAgent(agent) {\n    return await this.adapter.createAgent(agent);\n  }\n  async updateAgent(agentId, agent) {\n    return await this.adapter.updateAgent(agentId, agent);\n  }\n  async deleteAgent(agentId) {\n    return await this.adapter.deleteAgent(agentId);\n  }\n  async ensureAgentExists(agent) {\n    if (!agent.name) {\n      throw new Error(\"Agent name is required\");\n    }\n    const agents = await this.adapter.getAgents();\n    const existingAgentId = agents.find((a) => a.name === agent.name)?.id;\n    if (existingAgentId) {\n      const updatedAgent = {\n        ...agent,\n        id: existingAgentId,\n        updatedAt: Date.now()\n      };\n      await this.adapter.updateAgent(existingAgentId, updatedAgent);\n      const existingAgent = await this.adapter.getAgent(existingAgentId);\n      if (!existingAgent) {\n        throw new Error(`Failed to retrieve agent after update: ${existingAgentId}`);\n      }\n      this.logger.debug(`Updated existing agent ${agent.name} on restart`);\n      return existingAgent;\n    }\n    const newAgent = {\n      ...agent,\n      id: stringToUuid(agent.name)\n    };\n    const created = await this.adapter.createAgent(newAgent);\n    if (!created) {\n      throw new Error(`Failed to create agent: ${agent.name}`);\n    }\n    this.logger.debug(`Created new agent ${agent.name}`);\n    return newAgent;\n  }\n  async getEntityById(entityId) {\n    const entities = await this.adapter.getEntitiesByIds([entityId]);\n    if (!entities?.length) return null;\n    return entities[0];\n  }\n  async getEntitiesByIds(entityIds) {\n    return await this.adapter.getEntitiesByIds(entityIds);\n  }\n  async getEntitiesForRoom(roomId, includeComponents) {\n    return await this.adapter.getEntitiesForRoom(roomId, includeComponents);\n  }\n  async createEntity(entity) {\n    if (!entity.agentId) {\n      entity.agentId = this.agentId;\n    }\n    return await this.createEntities([entity]);\n  }\n  async createEntities(entities) {\n    entities.forEach((e) => {\n      e.agentId = this.agentId;\n    });\n    return await this.adapter.createEntities(entities);\n  }\n  async updateEntity(entity) {\n    await this.adapter.updateEntity(entity);\n  }\n  async getComponent(entityId, type, worldId, sourceEntityId) {\n    return await this.adapter.getComponent(entityId, type, worldId, sourceEntityId);\n  }\n  async getComponents(entityId, worldId, sourceEntityId) {\n    return await this.adapter.getComponents(entityId, worldId, sourceEntityId);\n  }\n  async createComponent(component) {\n    return await this.adapter.createComponent(component);\n  }\n  async updateComponent(component) {\n    await this.adapter.updateComponent(component);\n  }\n  async deleteComponent(componentId) {\n    await this.adapter.deleteComponent(componentId);\n  }\n  async addEmbeddingToMemory(memory) {\n    if (memory.embedding) {\n      return memory;\n    }\n    const memoryText = memory.content.text;\n    if (!memoryText) {\n      throw new Error(\"Cannot generate embedding: Memory content is empty\");\n    }\n    try {\n      memory.embedding = await this.useModel(ModelType.TEXT_EMBEDDING, {\n        text: memoryText\n      });\n    } catch (error) {\n      this.logger.error(\"Failed to generate embedding:\", error);\n      memory.embedding = await this.useModel(ModelType.TEXT_EMBEDDING, null);\n    }\n    return memory;\n  }\n  async getMemories(params) {\n    return await this.adapter.getMemories(params);\n  }\n  async getAllMemories() {\n    const tables = [\"memories\", \"messages\", \"facts\", \"documents\"];\n    const allMemories = [];\n    for (const tableName of tables) {\n      try {\n        const memories = await this.adapter.getMemories({\n          agentId: this.agentId,\n          tableName,\n          count: 1e4\n          // Get a large number to fetch all\n        });\n        allMemories.push(...memories);\n      } catch (error) {\n        this.logger.debug(`Failed to get memories from table ${tableName}:`, error);\n      }\n    }\n    return allMemories;\n  }\n  async getMemoryById(id) {\n    return await this.adapter.getMemoryById(id);\n  }\n  async getMemoriesByIds(ids, tableName) {\n    return await this.adapter.getMemoriesByIds(ids, tableName);\n  }\n  async getMemoriesByRoomIds(params) {\n    return await this.adapter.getMemoriesByRoomIds(params);\n  }\n  async getCachedEmbeddings(params) {\n    return await this.adapter.getCachedEmbeddings(params);\n  }\n  async log(params) {\n    await this.adapter.log(params);\n  }\n  async searchMemories(params) {\n    const memories = await this.adapter.searchMemories(params);\n    if (params.query) {\n      const rerankedMemories = await this.rerankMemories(params.query, memories);\n      return rerankedMemories;\n    }\n    return memories;\n  }\n  async rerankMemories(query, memories) {\n    const docs = memories.map((memory) => ({\n      title: memory.id,\n      content: memory.content.text\n    }));\n    const bm25 = new BM25(docs);\n    const results = bm25.search(query, memories.length);\n    return results.map((result) => memories[result.index]);\n  }\n  async createMemory(memory, tableName, unique) {\n    return await this.adapter.createMemory(memory, tableName, unique);\n  }\n  async updateMemory(memory) {\n    return await this.adapter.updateMemory(memory);\n  }\n  async deleteMemory(memoryId) {\n    await this.adapter.deleteMemory(memoryId);\n  }\n  async deleteManyMemories(memoryIds) {\n    await this.adapter.deleteManyMemories(memoryIds);\n  }\n  async clearAllAgentMemories() {\n    this.logger.info(`Clearing all memories for agent ${this.character.name} (${this.agentId})`);\n    const allMemories = await this.getAllMemories();\n    const memoryIds = allMemories.map((memory) => memory.id);\n    if (memoryIds.length === 0) {\n      this.logger.info(\"No memories found to delete\");\n      return;\n    }\n    this.logger.info(`Found ${memoryIds.length} memories to delete`);\n    await this.adapter.deleteManyMemories(memoryIds);\n    this.logger.info(`Successfully cleared all ${memoryIds.length} memories for agent`);\n  }\n  async deleteAllMemories(roomId, tableName) {\n    await this.adapter.deleteAllMemories(roomId, tableName);\n  }\n  async countMemories(roomId, unique, tableName) {\n    return await this.adapter.countMemories(roomId, unique, tableName);\n  }\n  async getLogs(params) {\n    return await this.adapter.getLogs(params);\n  }\n  async deleteLog(logId) {\n    await this.adapter.deleteLog(logId);\n  }\n  async createWorld(world) {\n    return await this.adapter.createWorld(world);\n  }\n  async getWorld(id) {\n    return await this.adapter.getWorld(id);\n  }\n  async removeWorld(worldId) {\n    await this.adapter.removeWorld(worldId);\n  }\n  async getAllWorlds() {\n    return await this.adapter.getAllWorlds();\n  }\n  async updateWorld(world) {\n    await this.adapter.updateWorld(world);\n  }\n  async getRoom(roomId) {\n    const rooms = await this.adapter.getRoomsByIds([roomId]);\n    if (!rooms?.length) return null;\n    return rooms[0];\n  }\n  async getRoomsByIds(roomIds) {\n    return await this.adapter.getRoomsByIds(roomIds);\n  }\n  async createRoom({ id, name, source, type, channelId, serverId, worldId }) {\n    if (!worldId) throw new Error(\"worldId is required\");\n    const res = await this.adapter.createRooms([\n      {\n        id,\n        name,\n        source,\n        type,\n        channelId,\n        serverId,\n        worldId\n      }\n    ]);\n    if (!res.length) return null;\n    return res[0];\n  }\n  async createRooms(rooms) {\n    return await this.adapter.createRooms(rooms);\n  }\n  async deleteRoom(roomId) {\n    await this.adapter.deleteRoom(roomId);\n  }\n  async deleteRoomsByWorldId(worldId) {\n    await this.adapter.deleteRoomsByWorldId(worldId);\n  }\n  async updateRoom(room) {\n    await this.adapter.updateRoom(room);\n  }\n  async getRoomsForParticipant(entityId) {\n    return await this.adapter.getRoomsForParticipant(entityId);\n  }\n  async getRoomsForParticipants(userIds) {\n    return await this.adapter.getRoomsForParticipants(userIds);\n  }\n  // deprecate this one\n  async getRooms(worldId) {\n    return await this.adapter.getRoomsByWorld(worldId);\n  }\n  async getRoomsByWorld(worldId) {\n    return await this.adapter.getRoomsByWorld(worldId);\n  }\n  async getParticipantUserState(roomId, entityId) {\n    return await this.adapter.getParticipantUserState(roomId, entityId);\n  }\n  async setParticipantUserState(roomId, entityId, state) {\n    await this.adapter.setParticipantUserState(roomId, entityId, state);\n  }\n  async createRelationship(params) {\n    return await this.adapter.createRelationship(params);\n  }\n  async updateRelationship(relationship) {\n    await this.adapter.updateRelationship(relationship);\n  }\n  async getRelationship(params) {\n    return await this.adapter.getRelationship(params);\n  }\n  async getRelationships(params) {\n    return await this.adapter.getRelationships(params);\n  }\n  async getCache(key) {\n    return await this.adapter.getCache(key);\n  }\n  async setCache(key, value) {\n    return await this.adapter.setCache(key, value);\n  }\n  async deleteCache(key) {\n    return await this.adapter.deleteCache(key);\n  }\n  async createTask(task) {\n    return await this.adapter.createTask(task);\n  }\n  async getTasks(params) {\n    return await this.adapter.getTasks(params);\n  }\n  async getTask(id) {\n    return await this.adapter.getTask(id);\n  }\n  async getTasksByName(name) {\n    return await this.adapter.getTasksByName(name);\n  }\n  async updateTask(id, task) {\n    await this.adapter.updateTask(id, task);\n  }\n  async deleteTask(id) {\n    await this.adapter.deleteTask(id);\n  }\n  on(event, callback) {\n    if (!this.eventHandlers.has(event)) {\n      this.eventHandlers.set(event, []);\n    }\n    this.eventHandlers.get(event)?.push(callback);\n  }\n  off(event, callback) {\n    if (!this.eventHandlers.has(event)) {\n      return;\n    }\n    const handlers = this.eventHandlers.get(event);\n    const index = handlers.indexOf(callback);\n    if (index !== -1) {\n      handlers.splice(index, 1);\n    }\n  }\n  emit(event, data) {\n    if (!this.eventHandlers.has(event)) {\n      return;\n    }\n    for (const handler of this.eventHandlers.get(event)) {\n      handler(data);\n    }\n  }\n  async sendControlMessage(params) {\n    try {\n      const { roomId, action, target } = params;\n      const controlMessage = {\n        type: \"control\",\n        payload: {\n          action,\n          target\n        },\n        roomId\n      };\n      await this.emitEvent(\"CONTROL_MESSAGE\", {\n        runtime: this,\n        message: controlMessage,\n        source: \"agent\"\n      });\n      this.logger.debug(`Sent control message: ${action} to room ${roomId}`);\n    } catch (error) {\n      this.logger.error(`Error sending control message: ${error}`);\n    }\n  }\n  registerSendHandler(source, handler) {\n    if (this.sendHandlers.has(source)) {\n      this.logger.warn(`Send handler for source '${source}' already registered. Overwriting.`);\n    }\n    this.sendHandlers.set(source, handler);\n    this.logger.info(`Registered send handler for source: ${source}`);\n  }\n  async sendMessageToTarget(target, content) {\n    const handler = this.sendHandlers.get(target.source);\n    if (!handler) {\n      const errorMsg = `No send handler registered for source: ${target.source}`;\n      this.logger.error(errorMsg);\n      throw new Error(errorMsg);\n    }\n    try {\n      await handler(this, target, content);\n    } catch (error) {\n      this.logger.error(`Error executing send handler for source ${target.source}:`, error);\n      throw error;\n    }\n  }\n  async getMemoriesByWorldId(params) {\n    return await this.adapter.getMemoriesByWorldId(params);\n  }\n  async runMigrations(migrationsPaths) {\n    if (this.adapter && \"runMigrations\" in this.adapter) {\n      await this.adapter.runMigrations(migrationsPaths);\n    } else {\n      this.logger.warn(\"Database adapter does not support migrations.\");\n    }\n  }\n  async isReady() {\n    if (!this.adapter) {\n      throw new Error(\"Database adapter not registered\");\n    }\n    return await this.adapter.isReady();\n  }\n};\n\n// src/settings.ts\n\nfunction createSettingFromConfig(configSetting) {\n  return {\n    name: configSetting.name,\n    description: configSetting.description,\n    usageDescription: configSetting.usageDescription || \"\",\n    value: null,\n    required: configSetting.required,\n    validation: configSetting.validation || null,\n    public: configSetting.public || false,\n    secret: configSetting.secret || false,\n    dependsOn: configSetting.dependsOn || [],\n    onSetAction: configSetting.onSetAction || null,\n    visibleIf: configSetting.visibleIf || null\n  };\n}\nfunction getSalt() {\n  const secretSalt = (typeof process !== \"undefined\" ? process.env.SECRET_SALT : /* unsupported import.meta.env.SECRET_SALT */ undefined.SECRET_SALT) || \"secretsalt\";\n  if (!secretSalt) {\n    logger.error(\"SECRET_SALT is not set\");\n  }\n  const salt = secretSalt;\n  logger.debug(`Generated salt with length: ${salt.length} (truncated for security)`);\n  return salt;\n}\nfunction encryptStringValue(value, salt) {\n  if (value === void 0 || value === null) {\n    logger.debug(\"Attempted to encrypt undefined or null value\");\n    return value;\n  }\n  if (typeof value === \"boolean\" || typeof value === \"number\") {\n    logger.debug(\"Value is a boolean or number, returning as is\");\n    return value;\n  }\n  if (typeof value !== \"string\") {\n    logger.debug(`Value is not a string (type: ${typeof value}), returning as is`);\n    return value;\n  }\n  const parts = value.split(\":\");\n  if (parts.length === 2) {\n    try {\n      const possibleIv = Buffer.from(parts[0], \"hex\");\n      if (possibleIv.length === 16) {\n        logger.debug(\"Value appears to be already encrypted, skipping re-encryption\");\n        return value;\n      }\n    } catch (e) {\n    }\n  }\n  const key = crypto_browserify__WEBPACK_IMPORTED_MODULE_9__.createHash(\"sha256\").update(salt).digest().slice(0, 32);\n  const iv = crypto_browserify__WEBPACK_IMPORTED_MODULE_9__.randomBytes(16);\n  const cipher = crypto_browserify__WEBPACK_IMPORTED_MODULE_9__.createCipheriv(\"aes-256-cbc\", key, iv);\n  let encrypted = cipher.update(value, \"utf8\", \"hex\");\n  encrypted += cipher.final(\"hex\");\n  return `${iv.toString(\"hex\")}:${encrypted}`;\n}\nfunction decryptStringValue(value, salt) {\n  try {\n    if (value === void 0 || value === null) {\n      return value;\n    }\n    if (typeof value === \"boolean\" || typeof value === \"number\") {\n      return value;\n    }\n    if (typeof value !== \"string\") {\n      logger.debug(`Value is not a string (type: ${typeof value}), returning as is`);\n      return value;\n    }\n    const parts = value.split(\":\");\n    if (parts.length !== 2) {\n      return value;\n    }\n    const iv = Buffer.from(parts[0], \"hex\");\n    const encrypted = parts[1];\n    if (iv.length !== 16) {\n      if (iv.length) {\n        logger.debug(`Invalid IV length (${iv.length}) - expected 16 bytes`);\n      }\n      return value;\n    }\n    const key = crypto_browserify__WEBPACK_IMPORTED_MODULE_9__.createHash(\"sha256\").update(salt).digest().slice(0, 32);\n    const decipher = crypto_browserify__WEBPACK_IMPORTED_MODULE_9__.createDecipheriv(\"aes-256-cbc\", key, iv);\n    let decrypted = decipher.update(encrypted, \"hex\", \"utf8\");\n    decrypted += decipher.final(\"utf8\");\n    return decrypted;\n  } catch (error) {\n    logger.error(`Error decrypting value: ${error}`);\n    return value;\n  }\n}\nfunction saltSettingValue(setting, salt) {\n  const settingCopy = { ...setting };\n  if (setting.secret === true && typeof setting.value === \"string\" && setting.value) {\n    settingCopy.value = encryptStringValue(setting.value, salt);\n  }\n  return settingCopy;\n}\nfunction unsaltSettingValue(setting, salt) {\n  const settingCopy = { ...setting };\n  if (setting.secret === true && typeof setting.value === \"string\" && setting.value) {\n    settingCopy.value = decryptStringValue(setting.value, salt);\n  }\n  return settingCopy;\n}\nfunction saltWorldSettings(worldSettings, salt) {\n  const saltedSettings = {};\n  for (const [key, setting] of Object.entries(worldSettings)) {\n    saltedSettings[key] = saltSettingValue(setting, salt);\n  }\n  return saltedSettings;\n}\nfunction unsaltWorldSettings(worldSettings, salt) {\n  const unsaltedSettings = {};\n  for (const [key, setting] of Object.entries(worldSettings)) {\n    unsaltedSettings[key] = unsaltSettingValue(setting, salt);\n  }\n  return unsaltedSettings;\n}\nasync function updateWorldSettings(runtime, serverId, worldSettings) {\n  const worldId = createUniqueUuid(runtime, serverId);\n  const world = await runtime.getWorld(worldId);\n  if (!world) {\n    logger.error(`No world found for server ${serverId}`);\n    return false;\n  }\n  if (!world.metadata) {\n    world.metadata = {};\n  }\n  const salt = getSalt();\n  const saltedSettings = saltWorldSettings(worldSettings, salt);\n  world.metadata.settings = saltedSettings;\n  await runtime.updateWorld(world);\n  return true;\n}\nasync function getWorldSettings(runtime, serverId) {\n  const worldId = createUniqueUuid(runtime, serverId);\n  const world = await runtime.getWorld(worldId);\n  if (!world || !world.metadata?.settings) {\n    return null;\n  }\n  const saltedSettings = world.metadata.settings;\n  const salt = getSalt();\n  return unsaltWorldSettings(saltedSettings, salt);\n}\nasync function initializeOnboarding(runtime, world, config) {\n  if (world.metadata?.settings) {\n    logger.info(`Onboarding state already exists for server ${world.serverId}`);\n    const saltedSettings = world.metadata.settings;\n    const salt = getSalt();\n    return unsaltWorldSettings(saltedSettings, salt);\n  }\n  const worldSettings = {};\n  if (config.settings) {\n    for (const [key, configSetting] of Object.entries(config.settings)) {\n      worldSettings[key] = createSettingFromConfig(configSetting);\n    }\n  }\n  if (!world.metadata) {\n    world.metadata = {};\n  }\n  world.metadata.settings = worldSettings;\n  await runtime.updateWorld(world);\n  logger.info(`Initialized settings config for server ${world.serverId}`);\n  return worldSettings;\n}\nfunction encryptedCharacter(character) {\n  const encryptedChar = JSON.parse(JSON.stringify(character));\n  const salt = getSalt();\n  if (encryptedChar.settings?.secrets) {\n    encryptedChar.settings.secrets = encryptObjectValues(encryptedChar.settings.secrets, salt);\n  }\n  if (encryptedChar.secrets) {\n    encryptedChar.secrets = encryptObjectValues(encryptedChar.secrets, salt);\n  }\n  return encryptedChar;\n}\nfunction decryptedCharacter(character, _runtime) {\n  const decryptedChar = JSON.parse(JSON.stringify(character));\n  const salt = getSalt();\n  if (decryptedChar.settings?.secrets) {\n    decryptedChar.settings.secrets = decryptObjectValues(decryptedChar.settings.secrets, salt);\n  }\n  if (decryptedChar.secrets) {\n    decryptedChar.secrets = decryptObjectValues(decryptedChar.secrets, salt);\n  }\n  return decryptedChar;\n}\nfunction encryptObjectValues(obj, salt) {\n  const result = {};\n  for (const [key, value] of Object.entries(obj)) {\n    if (typeof value === \"string\" && value) {\n      result[key] = encryptStringValue(value, salt);\n    } else {\n      result[key] = value;\n    }\n  }\n  return result;\n}\nfunction decryptObjectValues(obj, salt) {\n  const result = {};\n  for (const [key, value] of Object.entries(obj)) {\n    if (typeof value === \"string\" && value) {\n      result[key] = decryptStringValue(value, salt);\n    } else {\n      result[key] = value;\n    }\n  }\n  return result;\n}\n\n// src/services.ts\nvar ServiceBuilder = class {\n  constructor(serviceType) {\n    this.serviceType = serviceType;\n    this.description = \"\";\n  }\n  /**\n   * Set the service description\n   */\n  withDescription(description) {\n    this.description = description;\n    return this;\n  }\n  /**\n   * Set the start function for the service\n   */\n  withStart(startFn) {\n    this.startFn = startFn;\n    return this;\n  }\n  /**\n   * Set the stop function for the service\n   */\n  withStop(stopFn) {\n    this.stopFn = stopFn;\n    return this;\n  }\n  /**\n   * Build the service class with all configured properties\n   */\n  build() {\n    const serviceType = this.serviceType;\n    const description = this.description;\n    const startFn = this.startFn;\n    const stopFn = this.stopFn;\n    return class extends Service {\n      constructor() {\n        super(...arguments);\n        this.capabilityDescription = description;\n      }\n      static {\n        this.serviceType = serviceType;\n      }\n      static async start(runtime) {\n        if (!startFn) {\n          throw new Error(`Start function not defined for service ${serviceType}`);\n        }\n        return startFn(runtime);\n      }\n      async stop() {\n        if (stopFn) {\n          await stopFn();\n        }\n      }\n    };\n  }\n};\nfunction createService(serviceType) {\n  return new ServiceBuilder(serviceType);\n}\nfunction defineService(definition) {\n  return createService(definition.serviceType).withDescription(definition.description).withStart(definition.start).withStop(definition.stop || (() => Promise.resolve())).build();\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elizaos/core/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elizaos/core/node_modules/uuid/dist/esm/native.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@elizaos/core/node_modules/uuid/dist/esm/native.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({ randomUUID: crypto__WEBPACK_IMPORTED_MODULE_0__.randomUUID });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsaXphb3MvY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS9uYXRpdmUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb0M7QUFDcEMsaUVBQWUsRUFBRSxVQUFVLGtEQUFFLEVBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qYXNod2FudGhwZWRkaXNldHR5L0RvY3VtZW50cy9ldGhnbG9iYWwvY29udGV4dG8vbm9kZV9tb2R1bGVzL0BlbGl6YW9zL2NvcmUvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20vbmF0aXZlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJhbmRvbVVVSUQgfSBmcm9tICdjcnlwdG8nO1xuZXhwb3J0IGRlZmF1bHQgeyByYW5kb21VVUlEIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elizaos/core/node_modules/uuid/dist/esm/native.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elizaos/core/node_modules/uuid/dist/esm/regex.js":
/*!************************************************************************!*\
  !*** ./node_modules/@elizaos/core/node_modules/uuid/dist/esm/regex.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsaXphb3MvY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS9yZWdleC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYyxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxHQUFHLDhFQUE4RSxFQUFDIiwic291cmNlcyI6WyIvVXNlcnMvamFzaHdhbnRocGVkZGlzZXR0eS9Eb2N1bWVudHMvZXRoZ2xvYmFsL2NvbnRleHRvL25vZGVfbW9kdWxlcy9AZWxpemFvcy9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtL3JlZ2V4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IC9eKD86WzAtOWEtZl17OH0tWzAtOWEtZl17NH0tWzEtOF1bMC05YS1mXXszfS1bODlhYl1bMC05YS1mXXszfS1bMC05YS1mXXsxMn18MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwfGZmZmZmZmZmLWZmZmYtZmZmZi1mZmZmLWZmZmZmZmZmZmZmZikkL2k7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elizaos/core/node_modules/uuid/dist/esm/regex.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elizaos/core/node_modules/uuid/dist/esm/rng.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@elizaos/core/node_modules/uuid/dist/esm/rng.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ rng)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n\nconst rnds8Pool = new Uint8Array(256);\nlet poolPtr = rnds8Pool.length;\nfunction rng() {\n    if (poolPtr > rnds8Pool.length - 16) {\n        (0,crypto__WEBPACK_IMPORTED_MODULE_0__.randomFillSync)(rnds8Pool);\n        poolPtr = 0;\n    }\n    return rnds8Pool.slice(poolPtr, (poolPtr += 16));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsaXphb3MvY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS9ybmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBd0M7QUFDeEM7QUFDQTtBQUNlO0FBQ2Y7QUFDQSxRQUFRLHNEQUFjO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvamFzaHdhbnRocGVkZGlzZXR0eS9Eb2N1bWVudHMvZXRoZ2xvYmFsL2NvbnRleHRvL25vZGVfbW9kdWxlcy9AZWxpemFvcy9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtL3JuZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByYW5kb21GaWxsU3luYyB9IGZyb20gJ2NyeXB0byc7XG5jb25zdCBybmRzOFBvb2wgPSBuZXcgVWludDhBcnJheSgyNTYpO1xubGV0IHBvb2xQdHIgPSBybmRzOFBvb2wubGVuZ3RoO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcm5nKCkge1xuICAgIGlmIChwb29sUHRyID4gcm5kczhQb29sLmxlbmd0aCAtIDE2KSB7XG4gICAgICAgIHJhbmRvbUZpbGxTeW5jKHJuZHM4UG9vbCk7XG4gICAgICAgIHBvb2xQdHIgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gcm5kczhQb29sLnNsaWNlKHBvb2xQdHIsIChwb29sUHRyICs9IDE2KSk7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elizaos/core/node_modules/uuid/dist/esm/rng.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elizaos/core/node_modules/uuid/dist/esm/stringify.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@elizaos/core/node_modules/uuid/dist/esm/stringify.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   unsafeStringify: () => (/* binding */ unsafeStringify)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(rsc)/./node_modules/@elizaos/core/node_modules/uuid/dist/esm/validate.js\");\n\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nfunction unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stringify);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsaXphb3MvY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS9zdHJpbmdpZnkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFDO0FBQ3JDO0FBQ0EsZ0JBQWdCLFNBQVM7QUFDekI7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsd0RBQVE7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZSxTQUFTLEVBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qYXNod2FudGhwZWRkaXNldHR5L0RvY3VtZW50cy9ldGhnbG9iYWwvY29udGV4dG8vbm9kZV9tb2R1bGVzL0BlbGl6YW9zL2NvcmUvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20vc3RyaW5naWZ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2YWxpZGF0ZSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcbmNvbnN0IGJ5dGVUb0hleCA9IFtdO1xuZm9yIChsZXQgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICAgIGJ5dGVUb0hleC5wdXNoKChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zbGljZSgxKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gdW5zYWZlU3RyaW5naWZ5KGFyciwgb2Zmc2V0ID0gMCkge1xuICAgIHJldHVybiAoYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAwXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDFdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMl1dICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAzXV0gK1xuICAgICAgICAnLScgK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDRdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNV1dICtcbiAgICAgICAgJy0nICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA2XV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDddXSArXG4gICAgICAgICctJyArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOF1dICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA5XV0gK1xuICAgICAgICAnLScgK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDEwXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDExXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDEyXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDEzXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDE0XV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDE1XV0pLnRvTG93ZXJDYXNlKCk7XG59XG5mdW5jdGlvbiBzdHJpbmdpZnkoYXJyLCBvZmZzZXQgPSAwKSB7XG4gICAgY29uc3QgdXVpZCA9IHVuc2FmZVN0cmluZ2lmeShhcnIsIG9mZnNldCk7XG4gICAgaWYgKCF2YWxpZGF0ZSh1dWlkKSkge1xuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZ2lmaWVkIFVVSUQgaXMgaW52YWxpZCcpO1xuICAgIH1cbiAgICByZXR1cm4gdXVpZDtcbn1cbmV4cG9ydCBkZWZhdWx0IHN0cmluZ2lmeTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elizaos/core/node_modules/uuid/dist/esm/stringify.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elizaos/core/node_modules/uuid/dist/esm/v4.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@elizaos/core/node_modules/uuid/dist/esm/v4.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _native_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./native.js */ \"(rsc)/./node_modules/@elizaos/core/node_modules/uuid/dist/esm/native.js\");\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rng.js */ \"(rsc)/./node_modules/@elizaos/core/node_modules/uuid/dist/esm/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stringify.js */ \"(rsc)/./node_modules/@elizaos/core/node_modules/uuid/dist/esm/stringify.js\");\n\n\n\nfunction v4(options, buf, offset) {\n    if (_native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomUUID && !buf && !options) {\n        return _native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? (0,_rng_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_2__.unsafeStringify)(rnds);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v4);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsaXphb3MvY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS92NC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWlDO0FBQ047QUFDc0I7QUFDakQ7QUFDQSxRQUFRLGtEQUFNO0FBQ2QsZUFBZSxrREFBTTtBQUNyQjtBQUNBO0FBQ0Esc0RBQXNELG1EQUFHO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsT0FBTyxHQUFHLGFBQWE7QUFDM0U7QUFDQSx3QkFBd0IsUUFBUTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsOERBQWU7QUFDMUI7QUFDQSxpRUFBZSxFQUFFLEVBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qYXNod2FudGhwZWRkaXNldHR5L0RvY3VtZW50cy9ldGhnbG9iYWwvY29udGV4dG8vbm9kZV9tb2R1bGVzL0BlbGl6YW9zL2NvcmUvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20vdjQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG5hdGl2ZSBmcm9tICcuL25hdGl2ZS5qcyc7XG5pbXBvcnQgcm5nIGZyb20gJy4vcm5nLmpzJztcbmltcG9ydCB7IHVuc2FmZVN0cmluZ2lmeSB9IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcbmZ1bmN0aW9uIHY0KG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gICAgaWYgKG5hdGl2ZS5yYW5kb21VVUlEICYmICFidWYgJiYgIW9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZS5yYW5kb21VVUlEKCk7XG4gICAgfVxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIGNvbnN0IHJuZHMgPSBvcHRpb25zLnJhbmRvbSA/PyBvcHRpb25zLnJuZz8uKCkgPz8gcm5nKCk7XG4gICAgaWYgKHJuZHMubGVuZ3RoIDwgMTYpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSYW5kb20gYnl0ZXMgbGVuZ3RoIG11c3QgYmUgPj0gMTYnKTtcbiAgICB9XG4gICAgcm5kc1s2XSA9IChybmRzWzZdICYgMHgwZikgfCAweDQwO1xuICAgIHJuZHNbOF0gPSAocm5kc1s4XSAmIDB4M2YpIHwgMHg4MDtcbiAgICBpZiAoYnVmKSB7XG4gICAgICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAxNiA+IGJ1Zi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBVVUlEIGJ5dGUgcmFuZ2UgJHtvZmZzZXR9OiR7b2Zmc2V0ICsgMTV9IGlzIG91dCBvZiBidWZmZXIgYm91bmRzYCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgICAgICAgICBidWZbb2Zmc2V0ICsgaV0gPSBybmRzW2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBidWY7XG4gICAgfVxuICAgIHJldHVybiB1bnNhZmVTdHJpbmdpZnkocm5kcyk7XG59XG5leHBvcnQgZGVmYXVsdCB2NDtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elizaos/core/node_modules/uuid/dist/esm/v4.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elizaos/core/node_modules/uuid/dist/esm/validate.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@elizaos/core/node_modules/uuid/dist/esm/validate.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ \"(rsc)/./node_modules/@elizaos/core/node_modules/uuid/dist/esm/regex.js\");\n\nfunction validate(uuid) {\n    return typeof uuid === 'string' && _regex_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].test(uuid);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validate);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsaXphb3MvY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS92YWxpZGF0ZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUErQjtBQUMvQjtBQUNBLHVDQUF1QyxpREFBSztBQUM1QztBQUNBLGlFQUFlLFFBQVEsRUFBQyIsInNvdXJjZXMiOlsiL1VzZXJzL2phc2h3YW50aHBlZGRpc2V0dHkvRG9jdW1lbnRzL2V0aGdsb2JhbC9jb250ZXh0by9ub2RlX21vZHVsZXMvQGVsaXphb3MvY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS92YWxpZGF0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUkVHRVggZnJvbSAnLi9yZWdleC5qcyc7XG5mdW5jdGlvbiB2YWxpZGF0ZSh1dWlkKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB1dWlkID09PSAnc3RyaW5nJyAmJiBSRUdFWC50ZXN0KHV1aWQpO1xufVxuZXhwb3J0IGRlZmF1bHQgdmFsaWRhdGU7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elizaos/core/node_modules/uuid/dist/esm/validate.js\n");

/***/ })

};
;