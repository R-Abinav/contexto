"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/hedera-agent-kit";
exports.ids = ["vendor-chunks/hedera-agent-kit"];
exports.modules = {

/***/ "(rsc)/./node_modules/hedera-agent-kit/dist/esm/index.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/hedera-agent-kit/dist/esm/index.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccountResolver: () => (/* binding */ AccountResolver),\n/* harmony export */   AgentMode: () => (/* binding */ AgentMode),\n/* harmony export */   ERC20_FACTORY_ABI: () => (/* binding */ ERC20_FACTORY_ABI),\n/* harmony export */   ERC20_FACTORY_ADDRESSES: () => (/* binding */ ERC20_FACTORY_ADDRESSES),\n/* harmony export */   ERC20_TRANSFER_FUNCTION_ABI: () => (/* binding */ ERC20_TRANSFER_FUNCTION_ABI),\n/* harmony export */   ERC20_TRANSFER_FUNCTION_NAME: () => (/* binding */ ERC20_TRANSFER_FUNCTION_NAME),\n/* harmony export */   ERC721_FACTORY_ABI: () => (/* binding */ ERC721_FACTORY_ABI),\n/* harmony export */   ERC721_FACTORY_ADDRESSES: () => (/* binding */ ERC721_FACTORY_ADDRESSES),\n/* harmony export */   ERC721_MINT_FUNCTION_ABI: () => (/* binding */ ERC721_MINT_FUNCTION_ABI),\n/* harmony export */   ERC721_MINT_FUNCTION_NAME: () => (/* binding */ ERC721_MINT_FUNCTION_NAME),\n/* harmony export */   ERC721_TRANSFER_FUNCTION_ABI: () => (/* binding */ ERC721_TRANSFER_FUNCTION_ABI),\n/* harmony export */   ERC721_TRANSFER_FUNCTION_NAME: () => (/* binding */ ERC721_TRANSFER_FUNCTION_NAME),\n/* harmony export */   ExecuteStrategy: () => (/* binding */ ExecuteStrategy),\n/* harmony export */   HederaAIToolkit: () => (/* binding */ toolkit_default3),\n/* harmony export */   HederaElizaOSToolkit: () => (/* binding */ HederaElizaOSToolkit),\n/* harmony export */   HederaLangchainToolkit: () => (/* binding */ toolkit_default),\n/* harmony export */   HederaMCPToolkit: () => (/* binding */ toolkit_default2),\n/* harmony export */   PluginRegistry: () => (/* binding */ PluginRegistry),\n/* harmony export */   PromptGenerator: () => (/* binding */ PromptGenerator),\n/* harmony export */   coreAccountPlugin: () => (/* binding */ coreAccountPlugin),\n/* harmony export */   coreAccountPluginToolNames: () => (/* binding */ coreAccountPluginToolNames),\n/* harmony export */   coreAccountQueryPlugin: () => (/* binding */ coreAccountQueryPlugin),\n/* harmony export */   coreAccountQueryPluginToolNames: () => (/* binding */ coreAccountQueryPluginToolNames),\n/* harmony export */   coreConsensusPlugin: () => (/* binding */ coreConsensusPlugin),\n/* harmony export */   coreConsensusPluginToolNames: () => (/* binding */ coreConsensusPluginToolNames),\n/* harmony export */   coreConsensusQueryPlugin: () => (/* binding */ coreConsensusQueryPlugin),\n/* harmony export */   coreConsensusQueryPluginToolNames: () => (/* binding */ coreConsensusQueryPluginToolNames),\n/* harmony export */   coreEVMPlugin: () => (/* binding */ coreEVMPlugin),\n/* harmony export */   coreEVMPluginToolNames: () => (/* binding */ coreEVMPluginToolNames),\n/* harmony export */   coreEVMQueryPlugin: () => (/* binding */ coreEVMQueryPlugin),\n/* harmony export */   coreEVMQueryPluginToolNames: () => (/* binding */ coreEVMQueryPluginToolNames),\n/* harmony export */   coreHTSPlugin: () => (/* binding */ coreHTSPlugin),\n/* harmony export */   coreHTSPluginToolNames: () => (/* binding */ coreHTSPluginToolNames),\n/* harmony export */   coreMiscQueriesPlugin: () => (/* binding */ coreMiscQueriesPlugin),\n/* harmony export */   coreMiscQueriesPluginsToolNames: () => (/* binding */ coreMiscQueriesPluginsToolNames),\n/* harmony export */   coreQueriesPlugin: () => (/* binding */ coreQueriesPlugin),\n/* harmony export */   coreQueriesPluginToolNames: () => (/* binding */ coreQueriesPluginToolNames),\n/* harmony export */   coreSCSPlugin: () => (/* binding */ coreSCSPlugin),\n/* harmony export */   coreSCSPluginToolNames: () => (/* binding */ coreSCSPluginToolNames),\n/* harmony export */   coreTokenPlugin: () => (/* binding */ coreTokenPlugin),\n/* harmony export */   coreTokenPluginToolNames: () => (/* binding */ coreTokenPluginToolNames),\n/* harmony export */   coreTokenQueryPlugin: () => (/* binding */ coreTokenQueryPlugin),\n/* harmony export */   coreTokenQueryPluginToolNames: () => (/* binding */ coreTokenQueryPluginToolNames),\n/* harmony export */   coreTransactionQueryPlugin: () => (/* binding */ coreTransactionQueryPlugin),\n/* harmony export */   coreTransactionQueryPluginToolNames: () => (/* binding */ coreTransactionQueryPluginToolNames),\n/* harmony export */   getERC20FactoryAddress: () => (/* binding */ getERC20FactoryAddress),\n/* harmony export */   getERC721FactoryAddress: () => (/* binding */ getERC721FactoryAddress),\n/* harmony export */   handleTransaction: () => (/* binding */ handleTransaction)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hashgraph/sdk */ \"(rsc)/./node_modules/@hashgraph/sdk/lib/index.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bignumber.js */ \"(rsc)/./node_modules/hedera-agent-kit/node_modules/bignumber.js/bignumber.mjs\");\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! long */ \"(rsc)/./node_modules/hedera-agent-kit/node_modules/long/index.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/index.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/ethers/lib.esm/abi/interface.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _langchain_core_tools__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @langchain/core/tools */ \"(rsc)/./node_modules/@langchain/core/tools.js\");\n/* harmony import */ var _modelcontextprotocol_sdk_server_mcp_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @modelcontextprotocol/sdk/server/mcp.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/server/mcp.js\");\n/* harmony import */ var ai__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ai */ \"(rsc)/./node_modules/ai/dist/index.mjs\");\n/* harmony import */ var _elizaos_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @elizaos/core */ \"(rsc)/./node_modules/@elizaos/core/dist/index.js\");\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! zod-to-json-schema */ \"(rsc)/./node_modules/zod-to-json-schema/dist/esm/index.js\");\n// src/shared/api.ts\nvar HederaAgentAPI = class {\n  client;\n  context;\n  tools;\n  constructor(client, context, tools) {\n    this.client = client;\n    if (!this.client.ledgerId) {\n      throw new Error(\"Client must be connected to a network\");\n    }\n    this.context = context || {};\n    this.tools = tools || [];\n  }\n  async run(method, arg) {\n    const tool41 = this.tools.find((t) => t.method === method);\n    if (tool41) {\n      const output = JSON.stringify(await tool41.execute(this.client, this.context, arg));\n      return output;\n    } else {\n      throw new Error(\"Invalid method \" + method);\n    }\n  }\n};\nvar api_default = HederaAgentAPI;\n\n// src/shared/configuration.ts\nvar AgentMode = /* @__PURE__ */ ((AgentMode2) => {\n  AgentMode2[\"AUTONOMOUS\"] = \"autonomous\";\n  AgentMode2[\"RETURN_BYTES\"] = \"returnBytes\";\n  return AgentMode2;\n})(AgentMode || {});\n\n// src/shared/parameter-schemas/token.zod.ts\n\n\nvar createFungibleTokenParameters = (_context = {}) => zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  tokenName: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"The name of the token.\"),\n  tokenSymbol: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"The symbol of the token.\"),\n  initialSupply: zod__WEBPACK_IMPORTED_MODULE_1__.number().int().optional().default(0).describe(\"The initial supply of the token.\"),\n  supplyType: zod__WEBPACK_IMPORTED_MODULE_1__[\"enum\"]([\"finite\", \"infinite\"]).optional().default(\"finite\").describe(\"Supply type of the token.\"),\n  maxSupply: zod__WEBPACK_IMPORTED_MODULE_1__.number().int().optional().describe(\"The maximum supply of the token.\"),\n  decimals: zod__WEBPACK_IMPORTED_MODULE_1__.number().int().optional().default(0).describe(\"The number of decimals.\"),\n  treasuryAccountId: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\"The treasury account of the token.\"),\n  isSupplyKey: zod__WEBPACK_IMPORTED_MODULE_1__.boolean().optional().describe(\"Determines if the token supply key should be set.\")\n});\nvar createNonFungibleTokenParameters = (_context = {}) => zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  tokenName: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"The name of the token.\"),\n  tokenSymbol: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"The symbol of the token.\"),\n  maxSupply: zod__WEBPACK_IMPORTED_MODULE_1__.number().int().optional().default(100).describe(\"The maximum supply of the token.\"),\n  treasuryAccountId: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\"The treasury account of the token.\")\n});\nvar AirdropRecipientSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  accountId: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe('Recipient account ID (e.g., \"0.0.xxxx\").'),\n  amount: zod__WEBPACK_IMPORTED_MODULE_1__.union([zod__WEBPACK_IMPORTED_MODULE_1__.number(), zod__WEBPACK_IMPORTED_MODULE_1__.string()]).describe(\"Amount in base unit.\")\n});\nvar airdropFungibleTokenParameters = (_context = {}) => zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  tokenId: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"The id of the token.\"),\n  sourceAccountId: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\"The account to airdrop the token from.\"),\n  recipients: zod__WEBPACK_IMPORTED_MODULE_1__.array(AirdropRecipientSchema).min(1).describe(\"Array of recipient objects, each with accountId and amount.\")\n});\nvar mintFungibleTokenParameters = (_context = {}) => zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  tokenId: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"The id of the token.\"),\n  amount: zod__WEBPACK_IMPORTED_MODULE_1__.number().describe(\"The amount of tokens to mint.\")\n});\nvar mintNonFungibleTokenParameters = (_context = {}) => zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  tokenId: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"The id of the NFT class.\"),\n  uris: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.string().max(100)).max(10).describe(\"An array of URIs hosting NFT metadata.\")\n});\nvar tokenInfoQueryParameters = (_context = {}) => zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  tokenId: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\"The token ID to query.\")\n});\nvar updateTokenParameters = (_context = {}) => zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  tokenId: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"The ID of the token to update (e.g., 0.0.12345).\"),\n  tokenDesc: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\"Optional description of the token update operation.\"),\n  tokenName: zod__WEBPACK_IMPORTED_MODULE_1__.string().max(100).optional().describe(\"New name for the token. Up to 100 characters.\"),\n  tokenSymbol: zod__WEBPACK_IMPORTED_MODULE_1__.string().max(100).optional().describe(\"New symbol for the token. Up to 100 characters.\"),\n  treasuryAccountId: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\"New treasury account for the token (Hedera account ID).\"),\n  adminKey: zod__WEBPACK_IMPORTED_MODULE_1__.union([zod__WEBPACK_IMPORTED_MODULE_1__.boolean(), zod__WEBPACK_IMPORTED_MODULE_1__.string()]).optional().describe(\n    \"New admin key. Pass boolean `true` to use the operator/user key, or provide a Hedera-compatible public key string. Required for most property updates.\"\n  ),\n  kycKey: zod__WEBPACK_IMPORTED_MODULE_1__.union([zod__WEBPACK_IMPORTED_MODULE_1__.boolean(), zod__WEBPACK_IMPORTED_MODULE_1__.string()]).optional().describe(\n    \"New KYC key. Pass boolean `true` to use the operator/user key, or provide a public key string.\"\n  ),\n  freezeKey: zod__WEBPACK_IMPORTED_MODULE_1__.union([zod__WEBPACK_IMPORTED_MODULE_1__.boolean(), zod__WEBPACK_IMPORTED_MODULE_1__.string()]).optional().describe(\n    \"New freeze key. Pass boolean `true` to use the operator/user key, or provide a public key string.\"\n  ),\n  wipeKey: zod__WEBPACK_IMPORTED_MODULE_1__.union([zod__WEBPACK_IMPORTED_MODULE_1__.boolean(), zod__WEBPACK_IMPORTED_MODULE_1__.string()]).optional().describe(\n    \"New wipe key. Pass boolean `true` to use the operator/user key, or provide a public key string.\"\n  ),\n  supplyKey: zod__WEBPACK_IMPORTED_MODULE_1__.union([zod__WEBPACK_IMPORTED_MODULE_1__.boolean(), zod__WEBPACK_IMPORTED_MODULE_1__.string()]).optional().describe(\n    \"New supply key. Pass boolean `true` to use the operator/user key, or provide a public key string.\"\n  ),\n  feeScheduleKey: zod__WEBPACK_IMPORTED_MODULE_1__.union([zod__WEBPACK_IMPORTED_MODULE_1__.boolean(), zod__WEBPACK_IMPORTED_MODULE_1__.string()]).optional().describe(\n    \"New fee schedule key. Pass boolean `true` to use the operator/user key, or provide a public key string.\"\n  ),\n  pauseKey: zod__WEBPACK_IMPORTED_MODULE_1__.union([zod__WEBPACK_IMPORTED_MODULE_1__.boolean(), zod__WEBPACK_IMPORTED_MODULE_1__.string()]).optional().describe(\n    \"New pause key. Pass boolean `true` to use the operator/user key, or provide a public key string.\"\n  ),\n  metadataKey: zod__WEBPACK_IMPORTED_MODULE_1__.union([zod__WEBPACK_IMPORTED_MODULE_1__.boolean(), zod__WEBPACK_IMPORTED_MODULE_1__.string()]).optional().describe(\n    \"New metadata key. Pass boolean `true` to use the operator/user key, or provide a public key string.\"\n  ),\n  metadata: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\"New metadata for the token, in bytes (as base64 or hex).\"),\n  tokenMemo: zod__WEBPACK_IMPORTED_MODULE_1__.string().max(100).optional().describe(\"Short public memo for the token, up to 100 characters.\"),\n  autoRenewAccountId: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\"Account to automatically pay for token renewal (Hedera account ID).\")\n});\nvar associateTokenParameters = (_context = {}) => zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  // If not passed, will be injected from context in normalisation\n  accountId: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\n    \"Account ID to associate tokens with (e.g., 0.0.xxxxx). If not provided, operator account ID will be used\"\n  ),\n  // One or more token IDs to associate\n  tokenIds: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.string()).min(1).describe(\"Array of token IDs to associate\")\n});\nvar pendingAirdropQueryParameters = (_context = {}) => zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  accountId: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\"The account ID to query.\")\n});\nvar dissociateTokenParameters = (_context = {}) => zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  tokenIds: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.string()).min(1).describe(\"The list of Hedera token IDs (strings) to dissociate. Must provide at least one.\"),\n  accountId: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\n    \"The account ID from which to dissociate the tokens. Defaults to operator account.\"\n  ),\n  transactionMemo: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\"Optional memo for the transaction.\")\n});\n\n// src/shared/parameter-schemas/account.zod.ts\n\n\n\n\nvar transferHbarParameters = (_context = {}) => zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  transfers: zod__WEBPACK_IMPORTED_MODULE_1__.array(\n    zod__WEBPACK_IMPORTED_MODULE_1__.object({\n      accountId: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"Recipient account ID\"),\n      amount: zod__WEBPACK_IMPORTED_MODULE_1__.number().describe(\"Amount of HBAR to transfer\")\n    })\n  ).describe(\"Array of HBAR transfers\"),\n  sourceAccountId: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\"Sender account ID\"),\n  transactionMemo: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\"Memo to include with the transaction\")\n});\nvar createAccountParameters = (_context = {}) => zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  publicKey: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\"Account public key. If not provided, a public key of the operator will be used\"),\n  accountMemo: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\"Optional memo for the account\"),\n  initialBalance: zod__WEBPACK_IMPORTED_MODULE_1__.number().optional().default(0).describe(\"Initial HBAR balance to fund the account (defaults to 0)\"),\n  maxAutomaticTokenAssociations: zod__WEBPACK_IMPORTED_MODULE_1__.number().optional().default(-1).describe(\"Max automatic token associations (-1 for unlimited)\")\n});\nvar deleteAccountParameters = (_context = {}) => zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  accountId: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"The account ID to delete.\"),\n  transferAccountId: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\n    \"The ID of the account to transfer the remaining funds to. If not provided, the operator account ID will be used.\"\n  )\n});\nvar updateAccountParameters = (_context = {}) => zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  // If not passed, will be injected from context in normalisation\n  accountId: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\n    \"Account ID to update (e.g., 0.0.xxxxx). If not provided, operator account ID will be used\"\n  ),\n  maxAutomaticTokenAssociations: zod__WEBPACK_IMPORTED_MODULE_1__.number().int().optional().describe(\"Max automatic token associations, positive, zero or -1 if unlimited\"),\n  stakedAccountId: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\"Staked account ID\"),\n  accountMemo: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\"Account memo\"),\n  declineStakingReward: zod__WEBPACK_IMPORTED_MODULE_1__.boolean().optional().describe(\"Decline staking rewards\")\n});\nvar accountQueryParameters = (_context = {}) => zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  accountId: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"The account ID to query.\")\n});\nvar accountBalanceQueryParameters = (_context = {}) => zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  accountId: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\"The account ID to query.\")\n});\nvar accountTokenBalancesQueryParameters = (_context = {}) => zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  accountId: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\"The account ID to query. If not provided, this accountId will be used.\"),\n  tokenId: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\"The token ID to query.\")\n});\nvar signScheduleTransactionParameters = (_context = {}) => zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  scheduleId: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"The ID of the scheduled transaction to sign\")\n});\nvar scheduleDeleteTransactionParameters = (_context = {}) => zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  scheduleId: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"The ID of the scheduled transaction to delete\")\n});\nvar approveHbarAllowanceParameters = (_context = {}) => zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  ownerAccountId: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\"Owner account ID (defaults to operator account ID if omitted)\"),\n  spenderAccountId: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"Spender account ID\"),\n  amount: zod__WEBPACK_IMPORTED_MODULE_1__.number().describe(\"Amount of HBAR to approve as allowance (can be decimal, not negative)\"),\n  transactionMemo: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\"Memo to include with the transaction\")\n});\n\n// src/shared/parameter-schemas/consensus.zod.ts\n\n\nvar getTopicInfoParameters = (_context = {}) => {\n  return zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    topicId: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"The topic ID to query.\")\n  });\n};\nvar createTopicParameters = (_context = {}) => {\n  return zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    isSubmitKey: zod__WEBPACK_IMPORTED_MODULE_1__.boolean().optional().default(false).describe(\"Whether to set a submit key for the topic (optional)\"),\n    topicMemo: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\"Memo for the topic (optional)\"),\n    transactionMemo: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\"An optional memo to include on the submitted transaction (optional).\")\n  });\n};\nvar submitTopicMessageParameters = (_context = {}) => {\n  return zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    topicId: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"The ID of the topic to submit the message to\"),\n    message: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"The message to submit to the topic\"),\n    transactionMemo: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\"An optional memo to include on the submitted transaction (optional).\")\n  });\n};\nvar deleteTopicParameters = (_context = {}) => zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  topicId: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"The ID of the topic to delete.\")\n});\nvar deleteTopicParametersNormalised = (_context = {}) => deleteTopicParameters(_context).extend({});\nvar topicMessagesQueryParameters = (_context = {}) => zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  topicId: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"The topic ID to query.\"),\n  startTime: zod__WEBPACK_IMPORTED_MODULE_1__.string().datetime().optional().describe(\n    \"The start time to query. If set, the messages will be returned after this timestamp.\"\n  ),\n  endTime: zod__WEBPACK_IMPORTED_MODULE_1__.string().datetime().optional().describe(\n    \"The end time to query. If set, the messages will be returned before this timestamp.\"\n  ),\n  limit: zod__WEBPACK_IMPORTED_MODULE_1__.number().optional().describe(\"The limit of messages to query. If set, the number of messages to return.\")\n});\nvar updateTopicParameters = (_context = {}) => zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  topicId: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"The ID of the topic to update (e.g., 0.0.12345).\"),\n  topicMemo: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\"Optional new memo for the topic.\"),\n  adminKey: zod__WEBPACK_IMPORTED_MODULE_1__.union([zod__WEBPACK_IMPORTED_MODULE_1__.boolean(), zod__WEBPACK_IMPORTED_MODULE_1__.string()]).optional().describe(\n    \"New admin key. Pass boolean `true` to use the operator/user key, or provide a Hedera-compatible public key string.\"\n  ),\n  submitKey: zod__WEBPACK_IMPORTED_MODULE_1__.union([zod__WEBPACK_IMPORTED_MODULE_1__.boolean(), zod__WEBPACK_IMPORTED_MODULE_1__.string()]).optional().describe(\n    \"New submit key. Pass boolean `true` to use the operator/user key, or provide a Hedera-compatible public key string.\"\n  ),\n  autoRenewAccountId: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\"Account to automatically pay for topic renewal (Hedera account ID).\"),\n  autoRenewPeriod: zod__WEBPACK_IMPORTED_MODULE_1__.number().optional().describe(\"Auto renew period in seconds.\"),\n  expirationTime: zod__WEBPACK_IMPORTED_MODULE_1__.union([zod__WEBPACK_IMPORTED_MODULE_1__.string(), zod__WEBPACK_IMPORTED_MODULE_1__[\"instanceof\"](Date)]).optional().describe(\"New expiration time for the topic (ISO string or Date).\")\n});\n\n// src/shared/hedera-utils/hedera-parameter-normaliser.ts\n\n\n\n// src/shared/hedera-utils/decimals-utils.ts\n\nfunction toBaseUnit(amount, decimals) {\n  const amountBN = new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](amount);\n  const multiplier = new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](10).pow(decimals);\n  return amountBN.multipliedBy(multiplier).integerValue(bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].ROUND_FLOOR);\n}\nfunction toDisplayUnit(baseAmount, decimals) {\n  const baseAmountBN = new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](baseAmount);\n  const divisor = new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](10).pow(decimals);\n  return baseAmountBN.dividedBy(divisor);\n}\n\n// src/shared/hedera-utils/hedera-parameter-normaliser.ts\n\n\n// src/shared/utils/account-resolver.ts\n\nvar AccountResolver = class _AccountResolver {\n  /**\n   * Gets the default account based on the agent mode and context.\n   * In RETURN_BYTES mode, prefers context.accountId (user's account).\n   * In AUTONOMOUS mode or when no context account, uses an operator account.\n   */\n  static getDefaultAccount(context, client) {\n    if (context.accountId) {\n      return context.accountId;\n    }\n    const operatorAccount = client.operatorAccountId?.toString();\n    if (!operatorAccount) {\n      throw new Error(\"No account available: neither context.accountId nor operator account\");\n    }\n    return operatorAccount;\n  }\n  static async getDefaultPublicKey(context, client) {\n    if (context.mode === \"autonomous\" /* AUTONOMOUS */) {\n      return client.operatorPublicKey;\n    }\n    const defaultAccount = this.getDefaultAccount(context, client);\n    const defaultAccountDetails = await context.mirrornodeService?.getAccount(defaultAccount);\n    if (!defaultAccountDetails?.accountPublicKey) {\n      throw new Error(\"No public key available for the default account\");\n    }\n    return _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.PublicKey.fromString(defaultAccountDetails.accountPublicKey);\n  }\n  /**\n   * Resolves an account ID, using the provided account or falling back to the default.\n   */\n  static resolveAccount(providedAccount, context, client) {\n    return providedAccount || this.getDefaultAccount(context, client);\n  }\n  /**\n   * Gets a description of which account will be used as default for prompts.\n   */\n  static getDefaultAccountDescription(context) {\n    if (context.mode === \"returnBytes\" /* RETURN_BYTES */ && context.accountId) {\n      return `user account (${context.accountId})`;\n    }\n    return \"operator account\";\n  }\n  static isHederaAddress(address) {\n    return address.startsWith(\"0.\") || address.startsWith(\"0.0.\");\n  }\n  static async getHederaEVMAddress(address, mirrorNode) {\n    if (!_AccountResolver.isHederaAddress(address)) {\n      return address;\n    }\n    const account = await mirrorNode.getAccount(address);\n    return account.evmAddress;\n  }\n};\n\n// src/shared/hedera-utils/hedera-parameter-normaliser.ts\n\n\n// src/shared/parameter-schemas/evm.zod.ts\n\nvar transferERC20Parameters = (_context = {}) => zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  contractId: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"The id of the ERC20 contract.\"),\n  recipientAddress: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"Address to which the tokens will be transferred.\"),\n  amount: zod__WEBPACK_IMPORTED_MODULE_1__.number().describe(\"The amount of tokens to transfer.\")\n});\nvar createERC721Parameters = (_context = {}) => zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  tokenName: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"The name of the token.\"),\n  tokenSymbol: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"The symbol of the token.\"),\n  baseURI: zod__WEBPACK_IMPORTED_MODULE_1__.string().default(\"\").describe(\"The base URI for token metadata.\")\n});\nvar createERC20Parameters = (_context = {}) => zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  tokenName: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"The name of the token.\"),\n  tokenSymbol: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"The symbol of the token.\"),\n  decimals: zod__WEBPACK_IMPORTED_MODULE_1__.number().int().min(0).optional().default(18).describe(\"The number of decimals the token supports.\"),\n  initialSupply: zod__WEBPACK_IMPORTED_MODULE_1__.number().int().min(0).optional().default(0).describe(\"The initial supply of the token.\")\n});\nvar transferERC721Parameters = (_context = {}) => zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  contractId: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"The id of the ERC721 contract.\"),\n  fromAddress: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\"Address from which the token will be transferred.\"),\n  toAddress: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"Address to which the token will be transferred.\"),\n  tokenId: zod__WEBPACK_IMPORTED_MODULE_1__.number().describe(\"The ID of the token to transfer.\")\n});\nvar mintERC721Parameters = (_context = {}) => zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  contractId: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"The id of the ERC721 contract.\"),\n  toAddress: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\"Address to which the token will be minted.\")\n});\nvar contractInfoQueryParameters = (_context = {}) => zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  contractId: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"The token ID to query.\")\n});\n\n// src/shared/parameter-schemas/transaction.zod.ts\n\nvar transactionRecordQueryParameters = (_context = {}) => {\n  return zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    transactionId: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\n      'The transaction ID to fetch details for. Should be in format \\\\\"shard.realm.num-sss-nnn\\\\\" format where sss are seconds and nnn are nanoseconds'\n    ),\n    nonce: zod__WEBPACK_IMPORTED_MODULE_1__.number().nonnegative().optional().describe(\"Optional nonnegative nonce value for the transaction\")\n  });\n};\n\n// src/shared/hedera-utils/hedera-parameter-normaliser.ts\nvar HederaParameterNormaliser = class _HederaParameterNormaliser {\n  static parseParamsWithSchema(params, schema, context = {}) {\n    let parsedParams;\n    try {\n      parsedParams = schema(context).parse(params);\n    } catch (e) {\n      if (e instanceof zod__WEBPACK_IMPORTED_MODULE_4__[\"default\"].ZodError) {\n        const issues = this.formatZodIssues(e);\n        throw new Error(`Invalid parameters: ${issues}`);\n      }\n      throw e;\n    }\n    return parsedParams;\n  }\n  static formatZodIssues(error) {\n    return error.errors.map((err) => `Field \"${err.path.join(\".\")}\" - ${err.message}`).join(\"; \");\n  }\n  static async normaliseCreateFungibleTokenParams(params, context, client, mirrorNode) {\n    const parsedParams = this.parseParamsWithSchema(params, createFungibleTokenParameters, context);\n    const defaultAccountId = AccountResolver.getDefaultAccount(context, client);\n    const treasuryAccountId = parsedParams.treasuryAccountId ?? defaultAccountId;\n    if (!treasuryAccountId) throw new Error(\"Must include treasury account ID\");\n    const initialSupply = toBaseUnit(\n      parsedParams.initialSupply ?? 0,\n      parsedParams.decimals\n    ).toNumber();\n    const isFinite = (parsedParams.supplyType ?? \"infinite\") === \"finite\";\n    const supplyType = isFinite ? _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.TokenSupplyType.Finite : _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.TokenSupplyType.Infinite;\n    const maxSupply = isFinite ? toBaseUnit(parsedParams.maxSupply ?? 1e6, parsedParams.decimals).toNumber() : void 0;\n    if (maxSupply !== void 0 && initialSupply > maxSupply) {\n      throw new Error(`Initial supply (${initialSupply}) cannot exceed max supply (${maxSupply})`);\n    }\n    const publicKey = await mirrorNode.getAccount(defaultAccountId).then((r) => r.accountPublicKey) ?? client.operatorPublicKey?.toStringDer();\n    return {\n      ...parsedParams,\n      supplyType,\n      treasuryAccountId,\n      maxSupply,\n      initialSupply,\n      autoRenewAccountId: defaultAccountId,\n      supplyKey: parsedParams.isSupplyKey === true ? _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.PublicKey.fromString(publicKey) : void 0\n    };\n  }\n  static async normaliseCreateNonFungibleTokenParams(params, context, client, mirrorNode) {\n    const parsedParams = this.parseParamsWithSchema(params, createNonFungibleTokenParameters, context);\n    const defaultAccountId = AccountResolver.getDefaultAccount(context, client);\n    const treasuryAccountId = parsedParams.treasuryAccountId ?? defaultAccountId;\n    if (!treasuryAccountId) throw new Error(\"Must include treasury account ID\");\n    const publicKey = await mirrorNode.getAccount(defaultAccountId).then((r) => r.accountPublicKey) ?? client.operatorPublicKey?.toStringDer();\n    if (!publicKey) throw new Error(\"Could not determine public key for supply key\");\n    const maxSupply = parsedParams.maxSupply ?? 100;\n    return {\n      ...parsedParams,\n      treasuryAccountId,\n      maxSupply,\n      supplyKey: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.PublicKey.fromString(publicKey),\n      // the supply key is mandatory in the case of NFT\n      supplyType: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.TokenSupplyType.Finite,\n      // NFTs supply must be finite\n      autoRenewAccountId: defaultAccountId,\n      tokenType: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.TokenType.NonFungibleUnique\n    };\n  }\n  static normaliseTransferHbar(params, context, client) {\n    const parsedParams = this.parseParamsWithSchema(params, transferHbarParameters, context);\n    const sourceAccountId = AccountResolver.resolveAccount(\n      parsedParams.sourceAccountId,\n      context,\n      client\n    );\n    const hbarTransfers = [];\n    let totalTinybars = long__WEBPACK_IMPORTED_MODULE_3__[\"default\"].ZERO;\n    for (const transfer of parsedParams.transfers) {\n      const amount = new _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.Hbar(transfer.amount);\n      if (amount.isNegative() || amount.toTinybars().equals(long__WEBPACK_IMPORTED_MODULE_3__[\"default\"].ZERO)) {\n        throw new Error(`Invalid transfer amount: ${transfer.amount}`);\n      }\n      totalTinybars = totalTinybars.add(amount.toTinybars());\n      hbarTransfers.push({\n        accountId: transfer.accountId,\n        amount\n      });\n    }\n    hbarTransfers.push({\n      accountId: sourceAccountId,\n      amount: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.Hbar.fromTinybars(totalTinybars.negate())\n    });\n    return {\n      hbarTransfers,\n      transactionMemo: parsedParams.transactionMemo\n    };\n  }\n  static normaliseApproveHbarAllowance(params, context, client) {\n    const parsedParams = this.parseParamsWithSchema(params, approveHbarAllowanceParameters, context);\n    const ownerAccountId = AccountResolver.resolveAccount(\n      parsedParams.ownerAccountId,\n      context,\n      client\n    );\n    const spenderAccountId = parsedParams.spenderAccountId;\n    const amount = new _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.Hbar(parsedParams.amount);\n    if (amount.isNegative()) {\n      throw new Error(`Invalid allowance amount: ${parsedParams.amount}`);\n    }\n    return {\n      hbarApprovals: [\n        new _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.HbarAllowance({\n          ownerAccountId: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountId.fromString(ownerAccountId),\n          spenderAccountId: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountId.fromString(spenderAccountId),\n          amount\n        })\n      ],\n      transactionMemo: parsedParams.transactionMemo\n    };\n  }\n  static async normaliseAirdropFungibleTokenParams(params, context, client, mirrorNode) {\n    const parsedParams = this.parseParamsWithSchema(params, airdropFungibleTokenParameters, context);\n    const sourceAccountId = AccountResolver.resolveAccount(\n      parsedParams.sourceAccountId,\n      context,\n      client\n    );\n    const tokenInfo = await mirrorNode.getTokenInfo(parsedParams.tokenId);\n    const tokenDecimals = parseInt(tokenInfo.decimals, 10);\n    if (isNaN(tokenDecimals)) {\n      throw new Error(`Invalid token decimals for token ${parsedParams.tokenId}`);\n    }\n    const tokenTransfers = [];\n    let totalAmount = long__WEBPACK_IMPORTED_MODULE_3__[\"default\"].ZERO;\n    for (const recipient of parsedParams.recipients) {\n      const amountRaw = Number(recipient.amount);\n      if (amountRaw <= 0) {\n        throw new Error(`Invalid recipient amount: ${recipient.amount}`);\n      }\n      const amount = long__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fromString(toBaseUnit(amountRaw, tokenDecimals).toNumber().toString());\n      totalAmount = totalAmount.add(amount);\n      tokenTransfers.push({\n        tokenId: parsedParams.tokenId,\n        accountId: recipient.accountId,\n        amount\n      });\n    }\n    tokenTransfers.push({\n      tokenId: parsedParams.tokenId,\n      accountId: sourceAccountId,\n      amount: totalAmount.negate()\n    });\n    return {\n      tokenTransfers\n    };\n  }\n  static normaliseAssociateTokenParams(params, context, client) {\n    const parsedParams = this.parseParamsWithSchema(params, associateTokenParameters, context);\n    const accountId = AccountResolver.resolveAccount(parsedParams.accountId, context, client);\n    return {\n      accountId,\n      tokenIds: parsedParams.tokenIds\n    };\n  }\n  static async normaliseDissociateTokenParams(params, context, client) {\n    const parsedParams = this.parseParamsWithSchema(params, dissociateTokenParameters, context);\n    if (parsedParams.accountId === void 0) {\n      parsedParams.accountId = AccountResolver.getDefaultAccount(context, client);\n      if (!parsedParams.accountId) {\n        throw new Error(\"Could not determine default account ID\");\n      }\n    }\n    return {\n      ...parsedParams,\n      accountId: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountId.fromString(parsedParams.accountId),\n      tokenIds: parsedParams.tokenIds.map((id) => _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.TokenId.fromString(id))\n    };\n  }\n  static async normaliseCreateTopicParams(params, context, client, mirrorNode) {\n    const parsedParams = this.parseParamsWithSchema(params, createTopicParameters, context);\n    const defaultAccountId = AccountResolver.getDefaultAccount(context, client);\n    if (!defaultAccountId) throw new Error(\"Could not determine default account ID\");\n    const normalised = {\n      ...parsedParams,\n      autoRenewAccountId: defaultAccountId\n    };\n    if (parsedParams.isSubmitKey) {\n      const publicKey = await mirrorNode.getAccount(defaultAccountId).then((r) => r.accountPublicKey) ?? client.operatorPublicKey?.toStringDer();\n      if (!publicKey) {\n        throw new Error(\"Could not determine public key for submit key\");\n      }\n      normalised.submitKey = _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.PublicKey.fromString(publicKey);\n    }\n    return normalised;\n  }\n  static normaliseDeleteTopic(params, context, _client, _mirrorNode) {\n    const parsedParams = this.parseParamsWithSchema(params, deleteTopicParameters, context);\n    return this.parseParamsWithSchema(parsedParams, deleteTopicParametersNormalised, context);\n  }\n  static normaliseUpdateTopic = async (params, context, client) => {\n    const parsedParams = this.parseParamsWithSchema(params, updateTopicParameters, context);\n    const topicId = _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.TopicId.fromString(parsedParams.topicId);\n    const userPublicKey = await AccountResolver.getDefaultPublicKey(context, client);\n    const normalised = {\n      topicId\n    };\n    const maybeKeys = {\n      adminKey: parsedParams.adminKey,\n      submitKey: parsedParams.submitKey\n    };\n    for (const [field, rawVal] of Object.entries(maybeKeys)) {\n      const resolved = this.resolveKey(rawVal, userPublicKey);\n      if (resolved) {\n        normalised[field] = resolved;\n      }\n    }\n    if (parsedParams.topicMemo) normalised.topicMemo = parsedParams.topicMemo;\n    if (parsedParams.autoRenewAccountId)\n      normalised.autoRenewAccountId = parsedParams.autoRenewAccountId;\n    if (parsedParams.autoRenewPeriod) normalised.autoRenewPeriod = parsedParams.autoRenewPeriod;\n    if (parsedParams.expirationTime) {\n      normalised.expirationTime = parsedParams.expirationTime instanceof Date ? parsedParams.expirationTime : new Date(parsedParams.expirationTime);\n    }\n    return normalised;\n  };\n  static async normaliseCreateAccount(params, context, client, mirrorNode) {\n    const parsedParams = this.parseParamsWithSchema(params, createAccountParameters, context);\n    let publicKey = parsedParams.publicKey ?? client.operatorPublicKey?.toStringDer();\n    if (!publicKey) {\n      const defaultAccountId = AccountResolver.getDefaultAccount(context, client);\n      if (defaultAccountId) {\n        const account = await mirrorNode.getAccount(defaultAccountId);\n        publicKey = account?.accountPublicKey;\n      }\n    }\n    if (!publicKey) {\n      throw new Error(\n        \"Unable to resolve public key: no param, mirror node, or client operator key available.\"\n      );\n    }\n    return {\n      ...parsedParams,\n      key: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.PublicKey.fromString(publicKey)\n    };\n  }\n  static normaliseHbarBalanceParams(params, context, client) {\n    const parsedParams = this.parseParamsWithSchema(params, accountBalanceQueryParameters, context);\n    const accountId = AccountResolver.resolveAccount(parsedParams.accountId, context, client);\n    return {\n      ...parsedParams,\n      accountId\n    };\n  }\n  static normaliseAccountTokenBalancesParams(params, context, client) {\n    const parsedParams = this.parseParamsWithSchema(params, accountTokenBalancesQueryParameters, context);\n    const accountId = AccountResolver.resolveAccount(parsedParams.accountId, context, client);\n    return {\n      ...parsedParams,\n      accountId\n    };\n  }\n  static normaliseCreateERC20Params(params, factoryContractId, factoryContractAbi, factoryContractFunctionName, context) {\n    const parsedParams = this.parseParamsWithSchema(params, createERC20Parameters, context);\n    const iface = new ethers__WEBPACK_IMPORTED_MODULE_5__.Interface(factoryContractAbi);\n    const encodedData = iface.encodeFunctionData(factoryContractFunctionName, [\n      parsedParams.tokenName,\n      parsedParams.tokenSymbol,\n      parsedParams.decimals,\n      parsedParams.initialSupply\n    ]);\n    const functionParameters = ethers__WEBPACK_IMPORTED_MODULE_6__.getBytes(encodedData);\n    return {\n      ...parsedParams,\n      contractId: factoryContractId,\n      functionParameters,\n      gas: 3e6\n      //TODO: make this configurable\n    };\n  }\n  static normaliseCreateERC721Params(params, factoryContractId, factoryContractAbi, factoryContractFunctionName, context) {\n    const parsedParams = this.parseParamsWithSchema(params, createERC721Parameters, context);\n    const iface = new ethers__WEBPACK_IMPORTED_MODULE_5__.Interface(factoryContractAbi);\n    const encodedData = iface.encodeFunctionData(factoryContractFunctionName, [\n      parsedParams.tokenName,\n      parsedParams.tokenSymbol,\n      parsedParams.baseURI\n    ]);\n    const functionParameters = ethers__WEBPACK_IMPORTED_MODULE_6__.getBytes(encodedData);\n    return {\n      ...parsedParams,\n      contractId: factoryContractId,\n      functionParameters,\n      gas: 3e6\n      //TODO: make this configurable\n    };\n  }\n  static async normaliseMintFungibleTokenParams(params, context, mirrorNode) {\n    const parsedParams = this.parseParamsWithSchema(params, mintFungibleTokenParameters, context);\n    const tokenInfo = await mirrorNode.getTokenInfo(parsedParams.tokenId);\n    const decimals = Number(tokenInfo.decimals);\n    const safeDecimals = Number.isFinite(decimals) ? decimals : 0;\n    const baseAmount = toBaseUnit(parsedParams.amount, safeDecimals).toNumber();\n    return {\n      tokenId: parsedParams.tokenId,\n      amount: baseAmount\n    };\n  }\n  static normaliseMintNonFungibleTokenParams(params, context) {\n    const parsedParams = this.parseParamsWithSchema(params, mintNonFungibleTokenParameters, context);\n    const encoder = new TextEncoder();\n    const metadata = parsedParams.uris.map((uri) => encoder.encode(uri));\n    return {\n      ...parsedParams,\n      metadata\n    };\n  }\n  static async normaliseTransferERC20Params(params, factoryContractAbi, factoryContractFunctionName, context, mirrorNode) {\n    const parsedParams = this.parseParamsWithSchema(params, transferERC20Parameters, context);\n    const recipientAddress = await AccountResolver.getHederaEVMAddress(\n      parsedParams.recipientAddress,\n      mirrorNode\n    );\n    const contractId = await _HederaParameterNormaliser.getHederaAccountId(\n      parsedParams.contractId,\n      mirrorNode\n    );\n    const iface = new ethers__WEBPACK_IMPORTED_MODULE_5__.Interface(factoryContractAbi);\n    const encodedData = iface.encodeFunctionData(factoryContractFunctionName, [\n      recipientAddress,\n      parsedParams.amount\n    ]);\n    const functionParameters = ethers__WEBPACK_IMPORTED_MODULE_6__.getBytes(encodedData);\n    return {\n      contractId,\n      functionParameters,\n      gas: 1e5\n    };\n  }\n  static async normaliseTransferERC721Params(params, factoryContractAbi, factoryContractFunctionName, context, mirrorNode, client) {\n    const parsedParams = this.parseParamsWithSchema(params, transferERC721Parameters, context);\n    const resolvedFromAddress = AccountResolver.resolveAccount(\n      parsedParams.fromAddress,\n      context,\n      client\n    );\n    const fromAddress = await AccountResolver.getHederaEVMAddress(resolvedFromAddress, mirrorNode);\n    const toAddress = await AccountResolver.getHederaEVMAddress(parsedParams.toAddress, mirrorNode);\n    const contractId = await _HederaParameterNormaliser.getHederaAccountId(\n      parsedParams.contractId,\n      mirrorNode\n    );\n    const iface = new ethers__WEBPACK_IMPORTED_MODULE_5__.Interface(factoryContractAbi);\n    const encodedData = iface.encodeFunctionData(factoryContractFunctionName, [\n      fromAddress,\n      toAddress,\n      parsedParams.tokenId\n    ]);\n    const functionParameters = ethers__WEBPACK_IMPORTED_MODULE_6__.getBytes(encodedData);\n    return {\n      contractId,\n      functionParameters,\n      gas: 1e5\n    };\n  }\n  static async normaliseMintERC721Params(params, factoryContractAbi, factoryContractFunctionName, context, mirrorNode, client) {\n    const parsedParams = this.parseParamsWithSchema(params, mintERC721Parameters, context);\n    const resolvedToAddress = AccountResolver.resolveAccount(\n      parsedParams.toAddress,\n      context,\n      client\n    );\n    const toAddress = await AccountResolver.getHederaEVMAddress(resolvedToAddress, mirrorNode);\n    const contractId = await _HederaParameterNormaliser.getHederaAccountId(\n      parsedParams.contractId,\n      mirrorNode\n    );\n    const iface = new ethers__WEBPACK_IMPORTED_MODULE_5__.Interface(factoryContractAbi);\n    const encodedData = iface.encodeFunctionData(factoryContractFunctionName, [toAddress]);\n    const functionParameters = ethers__WEBPACK_IMPORTED_MODULE_6__.getBytes(encodedData);\n    return {\n      contractId,\n      functionParameters,\n      gas: 1e5\n    };\n  }\n  static normaliseDeleteAccount(params, context, client) {\n    const parsedParams = this.parseParamsWithSchema(params, deleteAccountParameters, context);\n    if (!AccountResolver.isHederaAddress(parsedParams.accountId)) {\n      throw new Error(\"Account ID must be a Hedera address\");\n    }\n    const transferAccountId = parsedParams.transferAccountId ?? AccountResolver.getDefaultAccount(context, client);\n    if (!transferAccountId) {\n      throw new Error(\"Could not determine transfer account ID\");\n    }\n    return {\n      accountId: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountId.fromString(parsedParams.accountId),\n      transferAccountId: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountId.fromString(transferAccountId)\n    };\n  }\n  static normaliseUpdateAccount(params, context, client) {\n    const parsedParams = this.parseParamsWithSchema(params, updateAccountParameters, context);\n    const accountId = _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountId.fromString(\n      AccountResolver.resolveAccount(parsedParams.accountId, context, client)\n    );\n    const normalised = {\n      accountId\n    };\n    if (parsedParams.maxAutomaticTokenAssociations !== void 0) {\n      normalised.maxAutomaticTokenAssociations = parsedParams.maxAutomaticTokenAssociations;\n    }\n    if (parsedParams.stakedAccountId !== void 0) {\n      normalised.stakedAccountId = parsedParams.stakedAccountId;\n    }\n    if (parsedParams.accountMemo !== void 0) {\n      normalised.accountMemo = parsedParams.accountMemo;\n    }\n    if (parsedParams.declineStakingReward !== void 0) {\n      normalised.declineStakingReward = parsedParams.declineStakingReward;\n    }\n    return normalised;\n  }\n  static normaliseGetTransactionRecordParams(params, context) {\n    const parsedParams = this.parseParamsWithSchema(params, transactionRecordQueryParameters, context);\n    const normalised = {\n      nonce: parsedParams.nonce\n    };\n    if (!parsedParams.transactionId) {\n      throw new Error(\"transactionId is required\");\n    }\n    const mirrorNodeStyleRegex = /^\\d+\\.\\d+\\.\\d+-\\d+-\\d+$/;\n    const sdkStyleRegex = /^(\\d+\\.\\d+\\.\\d+)@(\\d+)\\.(\\d+)$/;\n    if (mirrorNodeStyleRegex.test(parsedParams.transactionId)) {\n      normalised.transactionId = parsedParams.transactionId;\n    } else {\n      const match = parsedParams.transactionId.match(sdkStyleRegex);\n      if (!match) {\n        throw new Error(`Invalid transactionId format: ${parsedParams.transactionId}`);\n      }\n      const [, accountId, seconds, nanos] = match;\n      normalised.transactionId = `${accountId}-${seconds}-${nanos}`;\n    }\n    return normalised;\n  }\n  static async getHederaAccountId(address, mirrorNode) {\n    if (AccountResolver.isHederaAddress(address)) {\n      return address;\n    }\n    const account = await mirrorNode.getAccount(address);\n    return account.accountId;\n  }\n  static async normaliseUpdateToken(params, context, client) {\n    const parsedParams = this.parseParamsWithSchema(params, updateTokenParameters, context);\n    const tokenId = _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.TokenId.fromString(parsedParams.tokenId);\n    const userPublicKey = await AccountResolver.getDefaultPublicKey(context, client);\n    const normalised = {\n      tokenId\n    };\n    const maybeKeys = {\n      adminKey: parsedParams.adminKey,\n      supplyKey: parsedParams.supplyKey,\n      wipeKey: parsedParams.wipeKey,\n      freezeKey: parsedParams.freezeKey,\n      kycKey: parsedParams.kycKey,\n      feeScheduleKey: parsedParams.feeScheduleKey,\n      pauseKey: parsedParams.pauseKey,\n      metadataKey: parsedParams.metadataKey\n    };\n    for (const [field, rawVal] of Object.entries(maybeKeys)) {\n      const resolved = this.resolveKey(rawVal, userPublicKey);\n      if (resolved) {\n        normalised[field] = resolved;\n      }\n    }\n    if (parsedParams.tokenName) {\n      normalised.tokenName = parsedParams.tokenName;\n    }\n    if (parsedParams.tokenSymbol) {\n      normalised.tokenSymbol = parsedParams.tokenSymbol;\n    }\n    if (parsedParams.treasuryAccountId) {\n      normalised.treasuryAccountId = parsedParams.treasuryAccountId;\n    }\n    if (parsedParams.tokenMemo) {\n      normalised.tokenMemo = parsedParams.tokenMemo;\n    }\n    if (parsedParams.metadata) {\n      normalised.metadata = new TextEncoder().encode(parsedParams.metadata);\n    }\n    if (parsedParams.autoRenewAccountId) {\n      normalised.autoRenewAccountId = parsedParams.autoRenewAccountId;\n    }\n    return normalised;\n  }\n  static resolveKey(rawValue, userKey) {\n    if (rawValue === void 0) return void 0;\n    if (typeof rawValue === \"string\") {\n      try {\n        return _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.PublicKey.fromStringED25519(rawValue);\n      } catch {\n        return _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.PublicKey.fromStringECDSA(rawValue);\n      }\n    }\n    if (rawValue) {\n      return userKey;\n    }\n    return void 0;\n  }\n};\n\n// src/plugins/core-token-plugin/tools/fungible-token/airdrop-fungible-token.ts\n\n\n// src/shared/strategies/tx-mode-strategy.ts\n\nvar ExecuteStrategy = class {\n  defaultPostProcess(response) {\n    return JSON.stringify(response, null, 2);\n  }\n  async handle(tx, client, _context, postProcess35 = this.defaultPostProcess) {\n    const submit = await tx.execute(client);\n    const receipt = await submit.getReceipt(client);\n    const rawTransactionResponse = {\n      status: receipt.status.toString(),\n      accountId: receipt.accountId,\n      tokenId: receipt.tokenId,\n      transactionId: tx.transactionId?.toString() ?? \"\",\n      topicId: receipt.topicId,\n      scheduleId: receipt.scheduleId\n    };\n    return {\n      raw: rawTransactionResponse,\n      humanMessage: postProcess35(rawTransactionResponse)\n    };\n  }\n};\nvar ReturnBytesStrategy = class {\n  async handle(tx, _client, context) {\n    if (!context.accountId) throw new Error(\"\\u2026\");\n    const id = _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.TransactionId.generate(context.accountId);\n    tx.setNodeAccountIds([new _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountId(4), new _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountId(5)]).setTransactionId(id).freeze();\n    return { bytes: tx.toBytes() };\n  }\n};\nvar getStrategyFromContext = (context) => {\n  if (context.mode === \"returnBytes\" /* RETURN_BYTES */) {\n    return new ReturnBytesStrategy();\n  }\n  return new ExecuteStrategy();\n};\nvar handleTransaction = async (tx, client, context, postProcess35) => {\n  const strategy = getStrategyFromContext(context);\n  return await strategy.handle(tx, client, context, postProcess35);\n};\n\n// src/shared/hedera-utils/hedera-builder.ts\n\nvar HederaBuilder = class {\n  static createScheduleTransaction(params) {\n    return new _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.ScheduleCreateTransaction(params.params).setScheduledTransaction(\n      params.scheduledTransaction\n    );\n  }\n  static createFungibleToken(params) {\n    return new _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.TokenCreateTransaction(params);\n  }\n  static createNonFungibleToken(params) {\n    return new _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.TokenCreateTransaction(params);\n  }\n  static transferHbar(params) {\n    return new _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.TransferTransaction(params);\n  }\n  static airdropFungibleToken(params) {\n    return new _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.TokenAirdropTransaction(params);\n  }\n  static updateToken(params) {\n    return new _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.TokenUpdateTransaction(params);\n  }\n  static createTopic(params) {\n    const { transactionMemo, ...rest } = params;\n    const tx = new _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.TopicCreateTransaction(rest);\n    if (transactionMemo) tx.setTransactionMemo(transactionMemo);\n    return tx;\n  }\n  static submitTopicMessage(params) {\n    const { transactionMemo, ...rest } = params;\n    const tx = new _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.TopicMessageSubmitTransaction(rest);\n    if (transactionMemo) tx.setTransactionMemo(transactionMemo);\n    return tx;\n  }\n  static updateTopic(params) {\n    return new _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.TopicUpdateTransaction(params);\n  }\n  static executeTransaction(params) {\n    return new _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.ContractExecuteTransaction(params);\n  }\n  static mintFungibleToken(params) {\n    return new _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.TokenMintTransaction(params);\n  }\n  static mintNonFungibleToken(params) {\n    return new _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.TokenMintTransaction(params);\n  }\n  static dissociateToken(params) {\n    return new _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.TokenDissociateTransaction(params);\n  }\n  static createAccount(params) {\n    return new _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountCreateTransaction(params);\n  }\n  static deleteAccount(params) {\n    return new _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountDeleteTransaction(params);\n  }\n  static updateAccount(params) {\n    return new _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountUpdateTransaction(params);\n  }\n  static deleteToken(params) {\n    return new _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.TokenDeleteTransaction(params);\n  }\n  static deleteTopic(params) {\n    return new _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.TopicDeleteTransaction(params);\n  }\n  static signScheduleTransaction(params) {\n    return new _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.ScheduleSignTransaction(params);\n  }\n  static deleteScheduleTransaction(params) {\n    return new _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.ScheduleDeleteTransaction(params);\n  }\n  static associateToken(params) {\n    return new _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.TokenAssociateTransaction({\n      accountId: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountId.fromString(params.accountId),\n      tokenIds: params.tokenIds.map((t) => _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.TokenId.fromString(t))\n    });\n  }\n  static approveHbarAllowance(params) {\n    const tx = new _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountAllowanceApproveTransaction(params);\n    if (params.transactionMemo) {\n      tx.setTransactionMemo(params.transactionMemo);\n    }\n    return tx;\n  }\n};\n\n// src/shared/hedera-utils/mirrornode/types.ts\n\nvar LedgerIdToBaseUrl = /* @__PURE__ */ new Map([\n  [_hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.LedgerId.MAINNET.toString(), \"https://mainnet-public.mirrornode.hedera.com/api/v1\"],\n  [_hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.LedgerId.TESTNET.toString(), \"https://testnet.mirrornode.hedera.com/api/v1\"]\n]);\n\n// src/shared/hedera-utils/mirrornode/hedera-mirrornode-service-default-impl.ts\n\nvar HederaMirrornodeServiceDefaultImpl = class {\n  constructor(ledgerId) {\n    this.ledgerId = ledgerId;\n    if (!LedgerIdToBaseUrl.has(ledgerId.toString())) {\n      throw new Error(`Network type ${ledgerId} not supported`);\n    }\n    this.baseUrl = LedgerIdToBaseUrl.get(ledgerId.toString());\n  }\n  baseUrl;\n  async getAccount(accountId) {\n    const url = `${this.baseUrl}/accounts/${accountId}`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(\n        `Failed to fetch account ${accountId}: ${response.status} ${response.statusText}`\n      );\n    }\n    const data = await response.json();\n    if (!data.account) {\n      throw new Error(`Account ${accountId} not found`);\n    }\n    return {\n      accountId: data.account,\n      accountPublicKey: data?.key?.key,\n      balance: data.balance,\n      evmAddress: data.evm_address\n    };\n  }\n  async getAccountHBarBalance(accountId) {\n    let account;\n    try {\n      account = await this.getAccount(accountId);\n    } catch (error) {\n      throw Error(`Failed to fetch hbar balance for ${accountId}: ${error}`);\n    }\n    return new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](account.balance.balance);\n  }\n  async getAccountTokenBalances(accountId, tokenId) {\n    const tokenIdParam = tokenId ? `&token.id=${tokenId}` : \"\";\n    const url = `${this.baseUrl}/accounts/${accountId}/tokens?${tokenIdParam}`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(\n        `Failed to fetch balance for an account ${accountId}: ${response.status} ${response.statusText}`\n      );\n    }\n    return await response.json();\n  }\n  async getTopicMessages(queryParams) {\n    const lowerThreshold = queryParams.lowerTimestamp ? `&timestamp=gte:${queryParams.lowerTimestamp}` : \"\";\n    const upperThreshold = queryParams.upperTimestamp ? `&timestamp=lte:${queryParams.upperTimestamp}` : \"\";\n    const baseParams = `&order=desc&limit=100`;\n    let url = `${this.baseUrl}/topics/${queryParams.topicId}/messages?${lowerThreshold}${upperThreshold}${baseParams}`;\n    const arrayOfMessages = [];\n    let fetchedMessages = 0;\n    try {\n      while (url) {\n        fetchedMessages += 1;\n        const response = await fetch(url);\n        if (!response.ok) {\n          throw new Error(\n            `Failed to get topic messages for ${queryParams.topicId}: ${response.status} ${response.statusText}`\n          );\n        }\n        const data = await response.json();\n        arrayOfMessages.push(...data.messages);\n        if (fetchedMessages >= 100) {\n          break;\n        }\n        url = data.links.next ? this.baseUrl + data.links.next : null;\n      }\n    } catch (error) {\n      console.error(`Failed to fetch topic messages for ${queryParams.topicId}. Error:`, error);\n      throw error;\n    }\n    return {\n      topicId: queryParams.topicId,\n      messages: arrayOfMessages.slice(0, queryParams.limit)\n    };\n  }\n  async getTokenInfo(tokenId) {\n    const url = `${this.baseUrl}/tokens/${tokenId}`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(\n        `Failed to get token info for a token ${tokenId}: ${response.status} ${response.statusText}`\n      );\n    }\n    return await response.json();\n  }\n  async getTopicInfo(topicId) {\n    const url = `${this.baseUrl}/topics/${topicId}`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(\n        `Failed to get topic info for ${topicId}: ${response.status} ${response.statusText}`\n      );\n    }\n    return await response.json();\n  }\n  async getTransactionRecord(transactionId, nonce) {\n    let url = `${this.baseUrl}/transactions/${transactionId}`;\n    if (nonce !== void 0) {\n      url += `?nonce=${nonce}`;\n    }\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(\n        `Failed to get transaction record for ${transactionId}: ${response.status} ${response.statusText}`\n      );\n    }\n    return await response.json();\n  }\n  async getContractInfo(contractId) {\n    const url = `${this.baseUrl}/contracts/${contractId}`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(\n        `Failed to get contract info for ${contractId}: ${response.status} ${response.statusText}`\n      );\n    }\n    return await response.json();\n  }\n  async getPendingAirdrops(accountId) {\n    const url = `${this.baseUrl}/accounts/${accountId}/airdrops/pending`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(\n        `Failed to fetch pending airdrops for an account ${accountId}: ${response.status} ${response.statusText}`\n      );\n    }\n    return await response.json();\n  }\n  async getOutstandingAirdrops(accountId) {\n    const url = `${this.baseUrl}/accounts/${accountId}/airdrops/outstanding`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(\n        `Failed to fetch outstanding airdrops for an account ${accountId}: ${response.status} ${response.statusText}`\n      );\n    }\n    return await response.json();\n  }\n  async getExchangeRate(timestamp) {\n    const timestampParam = timestamp ? `?timestamp=${encodeURIComponent(timestamp)}` : \"\";\n    const url = `${this.baseUrl}/network/exchangerate${timestampParam}`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}. Message: ${response.statusText}`);\n    }\n    return await response.json();\n  }\n};\n\n// src/shared/hedera-utils/mirrornode/hedera-mirrornode-utils.ts\nvar getMirrornodeService = (mirrornodeService, ledgerId) => {\n  if (mirrornodeService) {\n    return mirrornodeService;\n  }\n  return new HederaMirrornodeServiceDefaultImpl(ledgerId);\n};\n\n// src/shared/utils/prompt-generator.ts\nvar PromptGenerator = class {\n  /**\n   * Generates a consistent context snippet for tool prompts.\n   */\n  static getContextSnippet(context) {\n    const lines = [\"Context:\"];\n    if (context.mode === \"returnBytes\" /* RETURN_BYTES */) {\n      lines.push(`- Mode: Return Bytes (preparing transactions for user signing)`);\n      if (context.accountId) {\n        lines.push(`- User Account: ${context.accountId} (default for transaction parameters)`);\n        lines.push(`- When no account is specified, ${context.accountId} will be used`);\n      } else {\n        lines.push(`- User Account: Not specified`);\n        lines.push(`- When no account is specified, the operator account will be used`);\n      }\n    } else if (context.mode === \"autonomous\" /* AUTONOMOUS */) {\n      lines.push(`- Mode: Autonomous (agent executes transactions directly)`);\n      if (context.accountId) {\n        lines.push(`- User Account: ${context.accountId}`);\n      }\n      lines.push(`- When no account is specified, the operator account will be used`);\n    } else {\n      lines.push(`- Mode: ${context.mode || \"Not specified\"}`);\n      if (context.accountId) {\n        lines.push(`- User Account: ${context.accountId}`);\n      }\n      lines.push(`- Default account will be determined at execution time`);\n    }\n    return lines.join(\"\\n\");\n  }\n  static getAnyAddressParameterDescription(paramName, context, isRequired = false) {\n    if (isRequired) {\n      return `${paramName} (str, required): The account address. This can be the EVM address or the Hedera account id`;\n    }\n    return `${paramName} (str, optional): The Hedera account ID or EVM address. If not provided, defaults to the ${AccountResolver.getDefaultAccountDescription(context)}`;\n  }\n  /**\n   * Generates a consistent description for optional account parameters.\n   */\n  static getAccountParameterDescription(paramName, context, isRequired = false) {\n    if (isRequired) {\n      return `${paramName} (str, required): The Hedera account ID`;\n    }\n    const defaultAccountDesc = AccountResolver.getDefaultAccountDescription(context);\n    return `${paramName} (str, optional): The Hedera account ID. If not provided, defaults to the ${defaultAccountDesc}`;\n  }\n  /**\n   * Generates consistent parameter usage instructions.\n   */\n  static getParameterUsageInstructions() {\n    return `\nImportant:\n- Only include optional parameters if explicitly provided by the user\n- Do not generate placeholder values for optional fields\n- Leave optional parameters undefined if not specified by the user`;\n  }\n};\n\n// src/plugins/core-token-plugin/tools/fungible-token/airdrop-fungible-token.ts\nvar airdropFungibleTokenPrompt = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const sourceAccountDesc = PromptGenerator.getAccountParameterDescription(\n    \"sourceAccountId\",\n    context\n  );\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\n\nThis tool will airdrop a fungible token on Hedera.\n\nParameters:\n- tokenId (str, required): The id of the token\n- ${sourceAccountDesc}\n- recipients (array, required): A list of recipient objects, each containing:\n  - accountId (string): The recipient's account ID (e.g., \"0.0.1234\")\n  - amount (number or string): The amount of tokens to send to that recipient (in base units)\n- transactionMemo (str, optional): Optional memo for the transaction\n${usageInstructions}\n\nIf the user specifies multiple recipients in a single request, include them all in **one tool call** as a list of recipients.\n`;\n};\nvar postProcess = (response) => {\n  return `Token successfully airdropped with transaction id ${response.transactionId.toString()}`;\n};\nvar airdropFungibleToken = async (client, context, params) => {\n  try {\n    const mirrornodeService = getMirrornodeService(context.mirrornodeService, client.ledgerId);\n    const normalisedParams = await HederaParameterNormaliser.normaliseAirdropFungibleTokenParams(\n      params,\n      context,\n      client,\n      mirrornodeService\n    );\n    const tx = HederaBuilder.airdropFungibleToken(normalisedParams);\n    const result = await handleTransaction(tx, client, context, postProcess);\n    return result;\n  } catch (error) {\n    const desc = \"Failed to airdrop fungible token\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[airdrop_fungible_token_tool]\", message);\n    return { raw: { status: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.Status.InvalidTransaction, error: message }, humanMessage: message };\n  }\n};\nvar AIRDROP_FUNGIBLE_TOKEN_TOOL = \"airdrop_fungible_token_tool\";\nvar tool = (context) => ({\n  method: AIRDROP_FUNGIBLE_TOKEN_TOOL,\n  name: \"Airdrop Fungible Token\",\n  description: airdropFungibleTokenPrompt(context),\n  parameters: airdropFungibleTokenParameters(context),\n  execute: airdropFungibleToken\n});\nvar airdrop_fungible_token_default = tool;\n\n// src/plugins/core-token-plugin/tools/fungible-token/create-fungible-token.ts\n\nvar createFungibleTokenPrompt = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const treasuryAccountDesc = PromptGenerator.getAccountParameterDescription(\n    \"treasuryAccountId\",\n    context\n  );\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\n\nThis tool creates a fungible token on Hedera.\n\nParameters:\n- tokenName (str, required): The name of the token\n- tokenSymbol (str, optional): The symbol of the token\n- initialSupply (int, optional): The initial supply of the token, defaults to 0\n- supplyType (str, optional): The supply type of the token. Can be \"finite\" or \"infinite\". Defaults to \"finite\"\n- maxSupply (int, optional): The maximum supply of the token. Only applicable if supplyType is \"finite\". Defaults to 1,000,000 if not specified\n- decimals (int, optional): The number of decimals the token supports. Defaults to 0\n- ${treasuryAccountDesc}\n- isSupplyKey (boolean, optional): If user wants to set supply key set to true, otherwise false\n${usageInstructions}\n`;\n};\nvar postProcess2 = (response) => {\n  return `Token created successfully at address ${response.tokenId?.toString()} with transaction id ${response.transactionId}`;\n};\nvar createFungibleToken = async (client, context, params) => {\n  try {\n    const mirrornodeService = getMirrornodeService(context.mirrornodeService, client.ledgerId);\n    const normalisedParams = await HederaParameterNormaliser.normaliseCreateFungibleTokenParams(\n      params,\n      context,\n      client,\n      mirrornodeService\n    );\n    const tx = HederaBuilder.createFungibleToken(normalisedParams);\n    const result = await handleTransaction(tx, client, context, postProcess2);\n    return result;\n  } catch (error) {\n    const desc = \"Failed to create fungible token\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[create_fungible_token_tool]\", message);\n    return { raw: { status: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.Status.InvalidTransaction, error: message }, humanMessage: message };\n  }\n};\nvar CREATE_FUNGIBLE_TOKEN_TOOL = \"create_fungible_token_tool\";\nvar tool2 = (context) => ({\n  method: CREATE_FUNGIBLE_TOKEN_TOOL,\n  name: \"Create Fungible Token\",\n  description: createFungibleTokenPrompt(context),\n  parameters: createFungibleTokenParameters(context),\n  execute: createFungibleToken\n});\nvar create_fungible_token_default = tool2;\n\n// src/plugins/core-token-plugin/tools/fungible-token/mint-fungible-token.ts\n\nvar mintFungibleTokenPrompt = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\n\nThis tool will mint a given amount (supply) of an existing fungible token on Hedera.\n\nParameters:\n- tokenId (str, required): The id of the token\n- amount (number, required): The amount to be minted\n${usageInstructions}\n\nExample: \"Mint 1 of 0.0.6458037\" means minting the amount of 1 of the token with id 0.0.6458037.\n`;\n};\nvar postProcess3 = (response) => {\n  return `Tokens successfully minted with transaction id ${response.transactionId.toString()}`;\n};\nvar mintFungibleToken = async (client, context, params) => {\n  try {\n    const mirrornodeService = getMirrornodeService(context.mirrornodeService, client.ledgerId);\n    const normalisedParams = await HederaParameterNormaliser.normaliseMintFungibleTokenParams(\n      params,\n      context,\n      mirrornodeService\n    );\n    const tx = HederaBuilder.mintFungibleToken(normalisedParams);\n    const result = await handleTransaction(tx, client, context, postProcess3);\n    return result;\n  } catch (error) {\n    const desc = \"Failed to mint fungible token\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[mint_fungible_token_tool]\", message);\n    return { raw: { status: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.Status.InvalidTransaction, error: message }, humanMessage: message };\n  }\n};\nvar MINT_FUNGIBLE_TOKEN_TOOL = \"mint_fungible_token_tool\";\nvar tool3 = (context) => ({\n  method: MINT_FUNGIBLE_TOKEN_TOOL,\n  name: \"Mint Fungible Token\",\n  description: mintFungibleTokenPrompt(context),\n  parameters: mintFungibleTokenParameters(context),\n  execute: mintFungibleToken\n});\nvar mint_fungible_token_default = tool3;\n\n// src/plugins/core-token-plugin/tools/non-fungible-token/create-non-fungible-token.ts\n\nvar createNonFungibleTokenPrompt = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const treasuryAccountDesc = PromptGenerator.getAccountParameterDescription(\n    \"treasuryAccountId\",\n    context\n  );\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\n\nThis tool creates a non-fungible token (NFT) on Hedera.\n\nParameters:\n- tokenName (str, required): Name of the token\n- tokenSymbol (str, required): Symbol of the token\n- maxSupply (int, optional): Maximum NFT supply. Defaults to 100 if not provided\n- ${treasuryAccountDesc}\n${usageInstructions}\n`;\n};\nvar postProcess4 = (response) => {\n  return `Token created successfully at address ${response.tokenId?.toString()} with transaction id ${response.transactionId.toString()}`;\n};\nvar createNonFungibleToken = async (client, context, params) => {\n  try {\n    const mirrornodeService = getMirrornodeService(context.mirrornodeService, client.ledgerId);\n    const normalisedParams = await HederaParameterNormaliser.normaliseCreateNonFungibleTokenParams(\n      params,\n      context,\n      client,\n      mirrornodeService\n    );\n    const tx = HederaBuilder.createNonFungibleToken(normalisedParams);\n    const result = await handleTransaction(tx, client, context, postProcess4);\n    return result;\n  } catch (error) {\n    const desc = \"Failed to create non-fungible token\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[create_non_fungible_token_tool]\", message);\n    return { raw: { status: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.Status.InvalidTransaction, error: message }, humanMessage: message };\n  }\n};\nvar CREATE_NON_FUNGIBLE_TOKEN_TOOL = \"create_non_fungible_token_tool\";\nvar tool4 = (context) => ({\n  method: CREATE_NON_FUNGIBLE_TOKEN_TOOL,\n  name: \"Create Non-Fungible Token\",\n  description: createNonFungibleTokenPrompt(context),\n  parameters: createNonFungibleTokenParameters(context),\n  execute: createNonFungibleToken\n});\nvar create_non_fungible_token_default = tool4;\n\n// src/plugins/core-token-plugin/tools/non-fungible-token/mint-non-fungible-token.ts\n\nvar mintNonFungibleTokenPrompt = (_context = {}) => {\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n\nThis tool will mint NFTs with its unique metadata for the class of NFTs (non-fungible tokens) defined by the tokenId on Hedera.\n\nParameters:\n- tokenId (str, required): The id of the token\n- uris (array, required): An array of strings (URIs) of maximum size 10 hosting the NFT metadata\n${usageInstructions}\n\nExample: \"Mint 0.0.6465503 with metadata: ipfs://bafyreiao6ajgsfji6qsgbqwdtjdu5gmul7tv2v3pd6kjgcw5o65b2ogst4/metadata.json\" means minting an NFT with the given metadata URI for the class of NFTs defined by the token with id 0.0.6465503.\n`;\n};\nvar postProcess5 = (response) => {\n  return `Token ${response.tokenId?.toString()} successfully minted with transaction id ${response.transactionId.toString()}`;\n};\nvar mintNonFungibleToken = async (client, context, params) => {\n  try {\n    const normalisedParams = HederaParameterNormaliser.normaliseMintNonFungibleTokenParams(\n      params,\n      context\n    );\n    const tx = HederaBuilder.mintNonFungibleToken(normalisedParams);\n    const result = await handleTransaction(tx, client, context, postProcess5);\n    return result;\n  } catch (error) {\n    const desc = \"Failed to mint non-fungible token\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[mint_non_fungible_token_tool]\", message);\n    return { raw: { status: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.Status.InvalidTransaction, error: message }, humanMessage: message };\n  }\n};\nvar MINT_NON_FUNGIBLE_TOKEN_TOOL = \"mint_non_fungible_token_tool\";\nvar tool5 = (context) => ({\n  method: MINT_NON_FUNGIBLE_TOKEN_TOOL,\n  name: \"Mint Non-Fungible Token\",\n  description: mintNonFungibleTokenPrompt(context),\n  parameters: mintNonFungibleTokenParameters(context),\n  execute: mintNonFungibleToken\n});\nvar mint_non_fungible_token_default = tool5;\n\n// src/plugins/core-token-plugin/tools/update-token.ts\n\nvar checkValidityOfUpdates = async (params, mirrornode, userPublicKey) => {\n  const tokenDetails = await mirrornode.getTokenInfo(params.tokenId.toString());\n  if (!tokenDetails) {\n    throw new Error(\"Token not found\");\n  }\n  if (tokenDetails.admin_key?.key !== userPublicKey.toStringRaw()) {\n    console.error(\n      `tokenDetails.admin_key.key: ${tokenDetails.admin_key?.key} vs userPublicKey: ${userPublicKey.toStringRaw()}`\n    );\n    throw new Error(\n      \"You do not have permission to update this token. The adminKey does not match your public key.\"\n    );\n  }\n  const keyChecks = {\n    adminKey: \"admin_key\",\n    kycKey: \"kyc_key\",\n    freezeKey: \"freeze_key\",\n    wipeKey: \"wipe_key\",\n    supplyKey: \"supply_key\",\n    feeScheduleKey: \"fee_schedule_key\",\n    pauseKey: \"pause_key\",\n    metadataKey: \"metadata_key\"\n  };\n  for (const [paramKey, tokenField] of Object.entries(keyChecks)) {\n    const userValue = params[paramKey];\n    const tokenKey = tokenDetails[tokenField];\n    if (userValue instanceof _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.PublicKey && !tokenKey) {\n      throw new Error(`Cannot update ${paramKey}: token was created without a ${paramKey}`);\n    }\n  }\n};\nvar updateTokenPrompt = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const tokenDesc = PromptGenerator.getAnyAddressParameterDescription(\"tokenId\", context);\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\n\nThis tool will update an existing Hedera HTS token. Only the fields provided will be updated.\n\nKey fields (adminKey, kycKey, freezeKey, wipeKey, supplyKey, feeScheduleKey, pauseKey, metadataKey) must contain **Hedera-compatible public keys (as strings) or boolean (true/false)**. You can provide these in one of three ways:\n\n1. **Boolean true** \\u2013 Set this field to use user/operator key. Injecting of the key will be handled automatically.\n2. **Not provided** \\u2013 The field will not be updated.\n3. **String** \\u2013 Provide a Hedera-compatible public key string to set a field explicitly.\n\nParameters:\n- ${tokenDesc}\n- tokenName (string, optional): New name for the token. Up to 100 characters.\n- tokenSymbol (string, optional): New symbol for the token. Up to 100 characters.\n- treasuryAccountId (string, optional): New treasury account for the token (Hedera account ID).\n- adminKey (boolean|string, optional): New admin key. Pass true to use your operator key, or provide a public key string.\n- kycKey (boolean|string, optional): New KYC key. Pass true to use your operator key, or provide a public key string.\n- freezeKey (boolean|string, optional): New freeze key. Pass true to use your operator key, or provide a public key string.\n- wipeKey (boolean|string, optional): New wipe key. Pass true to use your operator key, or provide a public key string.\n- supplyKey (boolean|string, optional): New supply key. Pass true to use your operator key, or provide a public key string.\n- feeScheduleKey (boolean|string, optional): New fee schedule key. Pass true to use your operator key, or provide a public key string.\n- pauseKey (boolean|string, optional): New pause key. Pass true to use your operator key, or provide a public key string.\n- metadataKey (boolean|string, optional): New metadata key. Pass true to use your operator key, or provide a public key string.\n- metadata (string, optional): New metadata for the token, in bytes (hex or base64).\n- tokenMemo (string, optional): Short public memo for the token, up to 100 characters.\n- autoRenewAccountId (string, optional): Account to automatically pay for renewal.\n\nExamples:\n- If the user asks for \"my key\" \\u2192 set the field to \\`true\\`.\n- If the user does not mention the key \\u2192 do not set the field.\n- If the user provides a key \\u2192 set the field to the provided public key string.\n\nIf the user provides multiple fields in a single request, \ncombine them into **one tool call** with all parameters together.\n\n${usageInstructions}\n`;\n};\nvar postProcess6 = (response) => {\n  return `Token successfully updated. Transaction ID: ${response.transactionId}`;\n};\nvar updateToken = async (client, context, params) => {\n  try {\n    const normalisedParams = await HederaParameterNormaliser.normaliseUpdateToken(\n      params,\n      context,\n      client\n    );\n    const mirrornodeService = getMirrornodeService(context.mirrornodeService, client.ledgerId);\n    const userPublicKey = await AccountResolver.getDefaultPublicKey(context, client);\n    await checkValidityOfUpdates(normalisedParams, mirrornodeService, userPublicKey);\n    const tx = HederaBuilder.updateToken(normalisedParams);\n    return await handleTransaction(tx, client, context, postProcess6);\n  } catch (error) {\n    const desc = \"Failed to update token\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[update_token_tool]\", message);\n    return {\n      raw: { status: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.Status.InvalidTransaction, error: message },\n      humanMessage: message\n    };\n  }\n};\nvar UPDATE_TOKEN_TOOL = \"update_token_tool\";\nvar tool6 = (context) => ({\n  method: UPDATE_TOKEN_TOOL,\n  name: \"Update Token\",\n  description: updateTokenPrompt(context),\n  parameters: updateTokenParameters(context),\n  execute: updateToken\n});\nvar update_token_default = tool6;\n\n// src/plugins/core-token-plugin/tools/dissociate-token.ts\n\nvar dissociateTokenPrompt = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const sourceAccountDesc = PromptGenerator.getAccountParameterDescription(\"accountId\", context);\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\n\nThis tool will airdrop a fungible token on Hedera.\n\nParameters:\n- tokenIds (array of strings, required): A list of Hedera token IDs to dissociate from the account. Example: [\"0.0.1234\", \"0.0.5678\"]\n- ${sourceAccountDesc}, account from which to dissociate the token(s)\n- transactionMemo (str, optional): Optional memo for the transaction\n\nExamples:\n- Dissociate a single token: { \"tokenIds\": [\"0.0.1234\"] }\n- Dissociate multiple tokens from a specific account: { \"tokenIds\": [\"0.0.1234\", \"0.0.5678\"], \"accountId\": \"0.0.4321\" }\n\n${usageInstructions}\n`;\n};\nvar postProcess7 = (response) => {\n  return `Token(s) successfully dissociated with transaction id ${response.transactionId.toString()}`;\n};\nvar dissociateToken = async (client, context, params) => {\n  try {\n    const normalisedParams = await HederaParameterNormaliser.normaliseDissociateTokenParams(\n      params,\n      context,\n      client\n    );\n    const tx = HederaBuilder.dissociateToken(normalisedParams);\n    return await handleTransaction(tx, client, context, postProcess7);\n  } catch (error) {\n    const desc = \"Failed to dissociate token\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[dissociate_token_tool]\", message);\n    return { raw: { status: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.Status.InvalidTransaction, error: message }, humanMessage: message };\n  }\n};\nvar DISSOCIATE_TOKEN_TOOL = \"dissociate_token_tool\";\nvar tool7 = (context) => ({\n  method: DISSOCIATE_TOKEN_TOOL,\n  name: \"Dissociate Token\",\n  description: dissociateTokenPrompt(context),\n  parameters: dissociateTokenParameters(context),\n  execute: dissociateToken\n});\nvar dissociate_token_default = tool7;\n\n// src/plugins/core-token-plugin/tools/associate-token.ts\n\nvar associateTokenPrompt = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  const accountToAssociate = PromptGenerator.getAnyAddressParameterDescription(\"accountId\", context);\n  return `\n${contextSnippet}\n\nThis tool will associate one or more tokens with a Hedera account.\n\nParameters:\n${accountToAssociate}\n- tokenIds (string[], required): Array of token IDs to associate\n${usageInstructions}\n\nExample: \"Associate tokens 0.0.123 and 0.0.456 to account 0.0.789\".\n`;\n};\nvar postProcess8 = (response) => {\n  return `Tokens successfully associated with transaction id ${response.transactionId.toString()}`;\n};\nvar associateToken = async (client, context, params) => {\n  try {\n    const normalisedParams = HederaParameterNormaliser.normaliseAssociateTokenParams(\n      params,\n      context,\n      client\n    );\n    const tx = HederaBuilder.associateToken(normalisedParams);\n    const result = await handleTransaction(tx, client, context, postProcess8);\n    return result;\n  } catch (error) {\n    const desc = \"Failed to associate token(s)\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[associate_token_tool]\", message);\n    return { raw: { status: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.Status.InvalidTransaction, error: message }, humanMessage: message };\n  }\n};\nvar ASSOCIATE_TOKEN_TOOL = \"associate_token_tool\";\nvar tool8 = (context) => ({\n  method: ASSOCIATE_TOKEN_TOOL,\n  name: \"Associate Token(s)\",\n  description: associateTokenPrompt(context),\n  parameters: associateTokenParameters(context),\n  execute: associateToken\n});\nvar associate_token_default = tool8;\n\n// src/plugins/core-token-plugin/index.ts\nvar coreTokenPlugin = {\n  name: \"core-token-plugin\",\n  version: \"1.0.0\",\n  description: \"A plugin for the Hedera Token Service\",\n  tools: (context) => {\n    return [\n      create_fungible_token_default(context),\n      mint_fungible_token_default(context),\n      create_non_fungible_token_default(context),\n      airdrop_fungible_token_default(context),\n      mint_non_fungible_token_default(context),\n      update_token_default(context),\n      dissociate_token_default(context),\n      associate_token_default(context)\n    ];\n  }\n};\nvar coreTokenPluginToolNames = {\n  AIRDROP_FUNGIBLE_TOKEN_TOOL,\n  CREATE_FUNGIBLE_TOKEN_TOOL,\n  MINT_FUNGIBLE_TOKEN_TOOL,\n  CREATE_NON_FUNGIBLE_TOKEN_TOOL,\n  MINT_NON_FUNGIBLE_TOKEN_TOOL,\n  DISSOCIATE_TOKEN_TOOL,\n  ASSOCIATE_TOKEN_TOOL,\n  UPDATE_TOKEN_TOOL\n};\n\n// src/plugins/core-account-plugin/tools/account/transfer-hbar.ts\n\nvar transferHbarPrompt = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const sourceAccountDesc = PromptGenerator.getAccountParameterDescription(\n    \"sourceAccountId\",\n    context\n  );\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\n\nThis tool will transfer HBAR to an account.\n\nParameters:\n- transfers (array of objects, required): List of HBAR transfers. Each object should contain:\n  - accountId (string): Recipient account ID\n  - amount (number): Amount of HBAR to transfer\n- ${sourceAccountDesc}\n- transactionMemo (string, optional): Optional memo for the transaction\n${usageInstructions}\n`;\n};\nvar postProcess9 = (response) => {\n  return `HBAR successfully transferred. Transaction ID: ${response.transactionId}`;\n};\nvar transferHbar = async (client, context, params) => {\n  try {\n    const normalisedParams = HederaParameterNormaliser.normaliseTransferHbar(\n      params,\n      context,\n      client\n    );\n    const tx = HederaBuilder.transferHbar(normalisedParams);\n    const result = await handleTransaction(tx, client, context, postProcess9);\n    return result;\n  } catch (error) {\n    const desc = \"Failed to transfer HBAR\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[transfer_hbar_tool]\", message);\n    return { raw: { status: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.Status.InvalidTransaction, error: message }, humanMessage: message };\n  }\n};\nvar TRANSFER_HBAR_TOOL = \"transfer_hbar_tool\";\nvar tool9 = (context) => ({\n  method: TRANSFER_HBAR_TOOL,\n  name: \"Transfer HBAR\",\n  description: transferHbarPrompt(context),\n  parameters: transferHbarParameters(context),\n  execute: transferHbar\n});\nvar transfer_hbar_default = tool9;\n\n// src/plugins/core-account-plugin/tools/account/approve-hbar-allowance.ts\nvar approveHbarAllowancePrompt = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const ownerAccountDesc = PromptGenerator.getAccountParameterDescription(\n    \"ownerAccountId\",\n    context\n  );\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\n\nThis tool approves an HBAR allowance from the owner to the spender.\n\nParameters:\n- ${ownerAccountDesc}\n- spenderAccountId (string, required): Spender account ID\n- amount (number, required): Amount of HBAR to approve (can be decimal, cannot be negative)\n- transactionMemo (string, optional): Optional memo for the transaction\n${usageInstructions}\n`;\n};\nvar postProcess10 = (response) => {\n  return `HBAR allowance approved successfully. Transaction ID: ${response.transactionId}`;\n};\nvar approveHbarAllowance = async (client, context, params) => {\n  const normalisedParams = HederaParameterNormaliser.normaliseApproveHbarAllowance(\n    params,\n    context,\n    client\n  );\n  const tx = HederaBuilder.approveHbarAllowance(normalisedParams);\n  const result = await handleTransaction(tx, client, context, postProcess10);\n  return result;\n};\nvar APPROVE_HBAR_ALLOWANCE_TOOL = \"approve_hbar_allowance_tool\";\nvar tool10 = (context) => ({\n  method: APPROVE_HBAR_ALLOWANCE_TOOL,\n  name: \"Approve HBAR Allowance\",\n  description: approveHbarAllowancePrompt(context),\n  parameters: approveHbarAllowanceParameters(context),\n  execute: approveHbarAllowance\n});\nvar approve_hbar_allowance_default = tool10;\n\n// src/plugins/core-account-plugin/tools/account/create-account.ts\n\nvar createAccountPrompt = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\n\nThis tool will create a new Hedera account with a passed public key. If not passed, the tool will use operators public key.\n\nParameters:\n- publicKey (string, optional): Public key to use for the account. If not provided, the tool will use the operators public key.\n- accountMemo (string, optional): Optional memo for the account\n- initialBalance (number, optional, default 0): Initial HBAR to fund the account\n- maxAutomaticTokenAssociations (number, optional, default -1): -1 means unlimited\n${usageInstructions}\n`;\n};\nvar postProcess11 = (response) => {\n  const accountIdStr = response.accountId ? response.accountId.toString() : \"unknown\";\n  return `Account created successfully.\nTransaction ID: ${response.transactionId}\nNew Account ID: ${accountIdStr}\n}`;\n};\nvar createAccount = async (client, context, params) => {\n  try {\n    const mirrornodeService = getMirrornodeService(context.mirrornodeService, client.ledgerId);\n    const normalisedParams = await HederaParameterNormaliser.normaliseCreateAccount(\n      params,\n      context,\n      client,\n      mirrornodeService\n    );\n    const tx = HederaBuilder.createAccount(normalisedParams);\n    const result = await handleTransaction(tx, client, context, postProcess11);\n    return result;\n  } catch (error) {\n    const desc = \"Failed to create account\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[create_account_tool]\", message);\n    return { raw: { status: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.Status.InvalidTransaction, error: message }, humanMessage: message };\n  }\n};\nvar CREATE_ACCOUNT_TOOL = \"create_account_tool\";\nvar tool11 = (context) => ({\n  method: CREATE_ACCOUNT_TOOL,\n  name: \"Create Account\",\n  description: createAccountPrompt(context),\n  parameters: createAccountParameters(context),\n  execute: createAccount\n});\nvar create_account_default = tool11;\n\n// src/plugins/core-account-plugin/tools/account/delete-account.ts\n\nvar deleteAccountPrompt = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const accountDesc = PromptGenerator.getAccountParameterDescription(\"accountId\", context);\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\n\nThis tool will delete an existing Hedera account. The remaining balance of the account will be transferred to the transferAccountId if provided, otherwise the operator account will be used.\n\nParameters:\n- ${accountDesc}\n- accountId (str, required): The account ID to delete\n- transferAccountId (str, optional): The account ID to transfer the remaining balance to. If not provided, the operator account will be used.\n${usageInstructions}\n`;\n};\nvar postProcess12 = (response) => {\n  return `Account successfully deleted. Transaction ID: ${response.transactionId}`;\n};\nvar deleteAccount = async (client, context, params) => {\n  try {\n    const normalisedParams = HederaParameterNormaliser.normaliseDeleteAccount(\n      params,\n      context,\n      client\n    );\n    let tx = HederaBuilder.deleteAccount(normalisedParams);\n    const result = await handleTransaction(tx, client, context, postProcess12);\n    return result;\n  } catch (error) {\n    const desc = \"Failed to delete account\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[delete_account_tool]\", message);\n    return { raw: { status: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.Status.InvalidTransaction, error: message }, humanMessage: message };\n  }\n};\nvar DELETE_ACCOUNT_TOOL = \"delete_account_tool\";\nvar tool12 = (context) => ({\n  method: DELETE_ACCOUNT_TOOL,\n  name: \"Delete Account\",\n  description: deleteAccountPrompt(context),\n  parameters: deleteAccountParameters(context),\n  execute: deleteAccount\n});\nvar delete_account_default = tool12;\n\n// src/plugins/core-account-plugin/tools/account/update-account.ts\n\nvar updateAccountPrompt = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const accountDesc = PromptGenerator.getAccountParameterDescription(\"accountId\", context);\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\n\nThis tool will update an existing Hedera account. Only provided fields will be updated.\n\nParameters:\n- ${accountDesc}\n- accountId (string, optional) Account ID to update (e.g., 0.0.xxxxx). If not provided, operator account ID will be used\n- maxAutomaticTokenAssociations (number, optional)\n- stakedAccountId (string, optional)\n- accountMemo (string, optional)\n- declineStakingReward (boolean, optional)\n${usageInstructions}\n`;\n};\nvar postProcess13 = (response) => {\n  return `Account successfully updated. Transaction ID: ${response.transactionId}`;\n};\nvar updateAccount = async (client, context, params) => {\n  try {\n    const normalisedParams = HederaParameterNormaliser.normaliseUpdateAccount(\n      params,\n      context,\n      client\n    );\n    let tx = HederaBuilder.updateAccount(normalisedParams);\n    const result = await handleTransaction(tx, client, context, postProcess13);\n    return result;\n  } catch (error) {\n    const desc = \"Failed to update account\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[update_account_tool]\", message);\n    return { raw: { status: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.Status.InvalidTransaction, error: message }, humanMessage: message };\n  }\n};\nvar UPDATE_ACCOUNT_TOOL = \"update_account_tool\";\nvar tool13 = (context) => ({\n  method: UPDATE_ACCOUNT_TOOL,\n  name: \"Update Account\",\n  description: updateAccountPrompt(context),\n  parameters: updateAccountParameters(context),\n  execute: updateAccount\n});\nvar update_account_default = tool13;\n\n// src/plugins/core-account-plugin/tools/account/sign-schedule-transaction.ts\n\nvar signScheduleTransactionPrompt = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\n\nThis tool will sign a scheduled transaction and return the transaction ID.\n\nParameters:\n- scheduleId (string, required): The ID of the scheduled transaction to sign\n${usageInstructions}\n`;\n};\nvar postProcess14 = (response) => {\n  return `Transaction successfully signed. Transaction ID: ${response.transactionId}`;\n};\nvar signScheduleTransaction = async (client, context, params) => {\n  try {\n    const tx = HederaBuilder.signScheduleTransaction(params);\n    const result = await handleTransaction(tx, client, context, postProcess14);\n    return result;\n  } catch (error) {\n    const desc = \"Failed to sign scheduled transaction\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[sign_schedule_transaction_tool]\", message);\n    return { raw: { status: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.Status.InvalidTransaction, error: message }, humanMessage: message };\n  }\n};\nvar SIGN_SCHEDULE_TRANSACTION_TOOL = \"sign_schedule_transaction_tool\";\nvar tool14 = (context) => ({\n  method: SIGN_SCHEDULE_TRANSACTION_TOOL,\n  name: \"Sign Scheduled Transaction\",\n  description: signScheduleTransactionPrompt(context),\n  parameters: signScheduleTransactionParameters(context),\n  execute: signScheduleTransaction\n});\nvar sign_schedule_transaction_default = tool14;\n\n// src/plugins/core-account-plugin/tools/account/schedule-delete.ts\n\nvar scheduleDeletePrompt = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\n\nThis tool will delete a scheduled transaction (by admin) so it will not execute.\n\nParameters:\n- scheduleId (string, required): The ID of the scheduled transaction to delete\n${usageInstructions}\n`;\n};\nvar postProcess15 = (response) => {\n  return `Scheduled transaction successfully deleted. Transaction ID: ${response.transactionId}`;\n};\nvar scheduleDelete = async (client, context, params) => {\n  try {\n    const tx = HederaBuilder.deleteScheduleTransaction(params);\n    const result = await handleTransaction(tx, client, context, postProcess15);\n    return result;\n  } catch (error) {\n    const desc = \"Failed to delete scheduled transaction\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[schedule_delete_tool]\", message);\n    return { raw: { status: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.Status.InvalidTransaction, error: message }, humanMessage: message };\n  }\n};\nvar SCHEDULE_DELETE_TOOL = \"schedule_delete_tool\";\nvar tool15 = (context) => ({\n  method: SCHEDULE_DELETE_TOOL,\n  name: \"Delete Scheduled Transaction\",\n  description: scheduleDeletePrompt(context),\n  parameters: scheduleDeleteTransactionParameters(context),\n  execute: scheduleDelete\n});\nvar schedule_delete_default = tool15;\n\n// src/plugins/core-account-plugin/index.ts\nvar coreAccountPlugin = {\n  name: \"core-account-plugin\",\n  version: \"1.0.0\",\n  description: \"A plugin for the Hedera Account Service\",\n  tools: (context) => {\n    return [\n      transfer_hbar_default(context),\n      approve_hbar_allowance_default(context),\n      delete_account_default(context),\n      update_account_default(context),\n      create_account_default(context),\n      sign_schedule_transaction_default(context),\n      schedule_delete_default(context)\n    ];\n  }\n};\nvar coreAccountPluginToolNames = {\n  TRANSFER_HBAR_TOOL,\n  APPROVE_HBAR_ALLOWANCE_TOOL,\n  CREATE_ACCOUNT_TOOL,\n  DELETE_ACCOUNT_TOOL,\n  UPDATE_ACCOUNT_TOOL,\n  SIGN_SCHEDULE_TRANSACTION_TOOL,\n  SCHEDULE_DELETE_TOOL\n};\n\n// src/plugins/core-consensus-plugin/tools/consensus/create-topic.ts\n\nvar createTopicPrompt = (_context = {}) => {\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\nThis tool will create a new topic on the Hedera network.\n\nParameters:\n- topicMemo (str, optional): A memo for the topic\n- transactionMemo (str, optional): An optional memo to include on the submitted transaction\n- isSubmitKey (bool, optional): Whether to set a submit key for the topic. Set to true if user wants to set a submit key, otherwise false\n${usageInstructions}\n`;\n};\nvar postProcess16 = (response) => {\n  return `Topic created successfully with topic id ${response.topicId?.toString()} and transaction id ${response.transactionId.toString()}`;\n};\nvar createTopic = async (client, context, params) => {\n  try {\n    const mirrornodeService = getMirrornodeService(\n      context.mirrornodeService,\n      client.ledgerId\n    );\n    const normalisedParams = await HederaParameterNormaliser.normaliseCreateTopicParams(\n      params,\n      context,\n      client,\n      mirrornodeService\n    );\n    const tx = HederaBuilder.createTopic(normalisedParams);\n    const result = await handleTransaction(tx, client, context, postProcess16);\n    return result;\n  } catch (error) {\n    const desc = \"Failed to create topic\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[create_topic_tool]\", message);\n    return { raw: { status: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.Status.InvalidTransaction, error: message }, humanMessage: message };\n  }\n};\nvar CREATE_TOPIC_TOOL = \"create_topic_tool\";\nvar tool16 = (context) => ({\n  method: CREATE_TOPIC_TOOL,\n  name: \"Create Topic\",\n  description: createTopicPrompt(context),\n  parameters: createTopicParameters(context),\n  execute: createTopic\n});\nvar create_topic_default = tool16;\n\n// src/plugins/core-consensus-plugin/tools/consensus/delete-topic.ts\n\nvar deleteTopicPrompt = (_context = {}) => {\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\nThis tool will delete a given Hedera network topic.\n\nParameters:\n- topicId (str, required): id of topic to delete\n${usageInstructions}\n`;\n};\nvar postProcess17 = (response) => {\n  return `Topic with id ${response.topicId?.toString()} deleted successfully. Transaction id ${response.transactionId.toString()}`;\n};\nvar deleteTopic = async (client, context, params) => {\n  try {\n    const mirrornodeService = getMirrornodeService(\n      context.mirrornodeService,\n      client.ledgerId\n    );\n    const normalisedParams = HederaParameterNormaliser.normaliseDeleteTopic(\n      params,\n      context,\n      client,\n      mirrornodeService\n    );\n    const tx = HederaBuilder.deleteTopic(normalisedParams);\n    return await handleTransaction(tx, client, context, postProcess17);\n  } catch (error) {\n    const desc = \"Failed to delete the topic\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[delete_topic_tool]\", message);\n    return { raw: { status: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.Status.InvalidTransaction, error: message }, humanMessage: message };\n  }\n};\nvar DELETE_TOPIC_TOOL = \"delete_topic_tool\";\nvar tool17 = (context) => ({\n  method: DELETE_TOPIC_TOOL,\n  name: \"Delete Topic\",\n  description: deleteTopicPrompt(context),\n  parameters: deleteTopicParameters(context),\n  execute: deleteTopic\n});\nvar delete_topic_default = tool17;\n\n// src/plugins/core-consensus-plugin/tools/consensus/submit-topic-message.ts\n\nvar submitTopicMessagePrompt = (_context = {}) => {\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\nThis tool will submit a message to a topic on the Hedera network.\n\nParameters:\n- topicId (str, required): The ID of the topic to submit the message to\n- message (str, required): The message to submit to the topic\n- transactionMemo (str, optional): An optional memo to include on the transaction\n${usageInstructions}\n`;\n};\nvar postProcess18 = (response) => {\n  return `Message submitted successfully with transaction id ${response.transactionId.toString()}`;\n};\nvar submitTopicMessage = async (client, context, params) => {\n  try {\n    const tx = HederaBuilder.submitTopicMessage(params);\n    const result = await handleTransaction(tx, client, context, postProcess18);\n    return { ...result, topicId: params.topicId };\n  } catch (error) {\n    const desc = \"Failed to submit message to topic\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[submit_topic_message_tool]\", message);\n    return { raw: { status: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.Status.InvalidTransaction, error: message }, humanMessage: message };\n  }\n};\nvar SUBMIT_TOPIC_MESSAGE_TOOL = \"submit_topic_message_tool\";\nvar tool18 = (context) => ({\n  method: SUBMIT_TOPIC_MESSAGE_TOOL,\n  name: \"Submit Topic Message\",\n  description: submitTopicMessagePrompt(context),\n  parameters: submitTopicMessageParameters(context),\n  execute: submitTopicMessage\n});\nvar submit_topic_message_default = tool18;\n\n// src/plugins/core-consensus-plugin/tools/consensus/update-topic.ts\n\nvar checkValidityOfUpdates2 = async (params, mirrornode, userPublicKey) => {\n  const topicDetails = await mirrornode.getTopicInfo(params.topicId.toString());\n  if (!topicDetails) {\n    throw new Error(\"Topic not found\");\n  }\n  if (topicDetails.admin_key === void 0) {\n    throw new Error(\"Topic does not have an admin key. It cannot be updated.\");\n  }\n  if (topicDetails.admin_key.key !== userPublicKey.toStringRaw()) {\n    console.error(\n      `topicDetails.admin_key.key: ${topicDetails.admin_key?.key} vs userPublicKey: ${userPublicKey.toStringRaw()}`\n    );\n    throw new Error(\n      \"You do not have permission to update this topic. The adminKey does not match your public key.\"\n    );\n  }\n  const keyChecks = {\n    adminKey: \"admin_key\",\n    submitKey: \"submit_key\"\n  };\n  for (const [paramKey, topicField] of Object.entries(keyChecks)) {\n    const userValue = params[paramKey];\n    const topicKey = topicDetails[topicField];\n    if (userValue instanceof _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.PublicKey && !topicKey) {\n      throw new Error(`Cannot update ${paramKey}: topic was created without a ${paramKey}`);\n    }\n  }\n};\nvar updateTopicPrompt = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const topicDesc = PromptGenerator.getAnyAddressParameterDescription(\"topicId\", context);\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\nThis tool will update an existing Hedera Consensus Topic. Only the fields provided will be updated.\nKey fields (adminKey, submitKey) must contain **Hedera-compatible public keys (as strings) or boolean (true/false)**. You can provide these in one of three ways:\n1. **Boolean true** \\u2013 Set this field to use user/operator key. Injecting of the key will be handled automatically.\n2. **Not provided** \\u2013 The field will not be updated.\n3. **String** \\u2013 Provide a Hedera-compatible public key string to set a field explicitly.\n\nParameters:\n- ${topicDesc}\n- topicMemo (string, optional): New memo for the topic.\n- adminKey (boolean|string, optional): New admin key. Pass true to use your operator key, or provide a public key string.\n- submitKey (boolean|string, optional): New submit key. Pass true to use your operator key, or provide a public key string.\n- autoRenewAccountId (string, optional): Account to automatically pay for renewal.\n- autoRenewPeriod (number, optional): Auto renew period in seconds.\n- expirationTime (string|Date, optional): New expiration time for the topic (ISO string or Date).\nExamples:\n- If the user asks for \"my key\" \\u2192 set the field to \\`true\\`.\n- If the user does not mention the key \\u2192 do not set the field.\n- If the user provides a key \\u2192 set the field to the provided public key string.\n\nIf the user provides multiple fields in a single request, \ncombine them into **one tool call** with all parameters together.\n${usageInstructions}\n`;\n};\nvar postProcess19 = (response) => {\n  return `Topic successfully updated. Transaction ID: ${response.transactionId}`;\n};\nvar updateTopic = async (client, context, params) => {\n  try {\n    const normalisedParams = await HederaParameterNormaliser.normaliseUpdateTopic(\n      params,\n      context,\n      client\n    );\n    const mirrornodeService = getMirrornodeService(context.mirrornodeService, client.ledgerId);\n    const userPublicKey = await AccountResolver.getDefaultPublicKey(context, client);\n    await checkValidityOfUpdates2(normalisedParams, mirrornodeService, userPublicKey);\n    const tx = HederaBuilder.updateTopic(normalisedParams);\n    return await handleTransaction(tx, client, context, postProcess19);\n  } catch (error) {\n    const desc = \"Failed to update topic\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[update_topic_tool]\", message);\n    return {\n      raw: { status: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.Status.InvalidTransaction, error: message },\n      humanMessage: message\n    };\n  }\n};\nvar UPDATE_TOPIC_TOOL = \"update_topic_tool\";\nvar tool19 = (context) => ({\n  method: UPDATE_TOPIC_TOOL,\n  name: \"Update Topic\",\n  description: updateTopicPrompt(context),\n  parameters: updateTopicParameters(context),\n  execute: updateTopic\n});\nvar update_topic_default = tool19;\n\n// src/plugins/core-consensus-plugin/index.ts\nvar coreConsensusPlugin = {\n  name: \"core-consensus-plugin\",\n  version: \"1.0.0\",\n  description: \"A plugin for the Hedera Consensus Service\",\n  tools: (context) => {\n    return [\n      create_topic_default(context),\n      submit_topic_message_default(context),\n      delete_topic_default(context),\n      update_topic_default(context)\n    ];\n  }\n};\nvar coreConsensusPluginToolNames = {\n  CREATE_TOPIC_TOOL,\n  SUBMIT_TOPIC_MESSAGE_TOOL,\n  DELETE_TOPIC_TOOL,\n  UPDATE_TOPIC_TOOL\n};\n\n// src/shared/hedera-utils/hbar-conversion-utils.ts\nfunction toHBar(tinyBars) {\n  return tinyBars.div(1e8);\n}\n\n// src/plugins/core-queries-plugin/tools/queries/get-hbar-balance-query.ts\nvar getHbarBalanceQueryPrompt = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const accountDesc = PromptGenerator.getAccountParameterDescription(\"accountId\", context);\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\n\nThis tool will return the HBAR balance for a given Hedera account.\n\nParameters:\n- ${accountDesc}\n${usageInstructions}\n`;\n};\nvar postProcess20 = (hbarBalance, accountId) => {\n  return `Account ${accountId} has a balance of ${hbarBalance} HBAR`;\n};\nvar getHbarBalanceQuery = async (client, context, params) => {\n  try {\n    const normalisedParams = HederaParameterNormaliser.normaliseHbarBalanceParams(\n      params,\n      context,\n      client\n    );\n    const mirrornodeService = getMirrornodeService(context.mirrornodeService, client.ledgerId);\n    const balance = await mirrornodeService.getAccountHBarBalance(\n      normalisedParams.accountId\n    );\n    return {\n      raw: { accountId: normalisedParams.accountId, hbarBalance: toHBar(balance).toString() },\n      humanMessage: postProcess20(toHBar(balance).toString(), normalisedParams.accountId)\n    };\n  } catch (error) {\n    const desc = \"Failed to get HBAR balance\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[get_hbar_balance_query_tool]\", message);\n    return { raw: { error: message }, humanMessage: message };\n  }\n};\nvar GET_HBAR_BALANCE_QUERY_TOOL = \"get_hbar_balance_query_tool\";\nvar tool20 = (context) => ({\n  method: GET_HBAR_BALANCE_QUERY_TOOL,\n  name: \"Get HBAR Balance\",\n  description: getHbarBalanceQueryPrompt(context),\n  parameters: accountBalanceQueryParameters(context),\n  execute: getHbarBalanceQuery\n});\nvar get_hbar_balance_query_default = tool20;\n\n// src/plugins/core-queries-plugin/tools/queries/get-account-query.ts\n\nvar getAccountQueryPrompt = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\n\nThis tool will return the account information for a given Hedera account.\n\nParameters:\n- accountId (str, required): The account ID to query\n${usageInstructions}\n`;\n};\nvar postProcess21 = (account) => {\n  return `Details for ${account.accountId}\nBalance: ${account.balance.balance.toString()}\nPublic Key: ${account.accountPublicKey},\nEVM address: ${account.evmAddress},\n`;\n};\nvar getAccountQuery = async (client, context, params) => {\n  try {\n    const mirrornodeService = getMirrornodeService(context.mirrornodeService, client.ledgerId);\n    const account = await mirrornodeService.getAccount(params.accountId);\n    return {\n      raw: { accountId: params.accountId, account },\n      humanMessage: postProcess21(account)\n    };\n  } catch (error) {\n    const desc = \"Failed to get account query\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[get_account_query_tool]\", message);\n    return { raw: { status: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.Status.InvalidTransaction, error: message }, humanMessage: message };\n  }\n};\nvar GET_ACCOUNT_QUERY_TOOL = \"get_account_query_tool\";\nvar tool21 = (context) => ({\n  method: GET_ACCOUNT_QUERY_TOOL,\n  name: \"Get Account Query\",\n  description: getAccountQueryPrompt(context),\n  parameters: accountQueryParameters(context),\n  execute: getAccountQuery\n});\nvar get_account_query_default = tool21;\n\n// src/plugins/core-queries-plugin/tools/queries/get-account-token-balances-query.ts\nvar getAccountTokenBalancesQueryPrompt = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const accountDesc = PromptGenerator.getAccountParameterDescription(\"accountId\", context);\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\n\nThis tool will return the token balances for a given Hedera account.\n\nParameters:\n- ${accountDesc}\n- tokenId (str, optional): The token ID to query for. If not provided, all token balances will be returned\n${usageInstructions}\n`;\n};\nvar postProcess22 = (tokenBalances, accountId) => {\n  const balancesText = tokenBalances.tokens.map(\n    (token) => `  Token: ${token.token_id}, Balance: ${token.balance}, Decimals: ${token.decimals}`\n  ).join(\"\\n\");\n  return `Details for ${accountId}\n--- Token Balances ---\n${balancesText}`;\n};\nvar getAccountTokenBalancesQuery = async (client, context, params) => {\n  try {\n    const normalisedParams = HederaParameterNormaliser.normaliseAccountTokenBalancesParams(\n      params,\n      context,\n      client\n    );\n    const mirrornodeService = getMirrornodeService(context.mirrornodeService, client.ledgerId);\n    const tokenBalances = await mirrornodeService.getAccountTokenBalances(\n      normalisedParams.accountId,\n      normalisedParams.tokenId\n    );\n    return {\n      raw: { accountId: normalisedParams.accountId, tokenBalances },\n      humanMessage: postProcess22(tokenBalances, normalisedParams.accountId)\n    };\n  } catch (error) {\n    const desc = \"Failed to get account token balances\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[get_account_token_balances_query_tool]\", message);\n    return { raw: { error: message }, humanMessage: message };\n  }\n};\nvar GET_ACCOUNT_TOKEN_BALANCES_QUERY_TOOL = \"get_account_token_balances_query_tool\";\nvar tool22 = (context) => ({\n  method: GET_ACCOUNT_TOKEN_BALANCES_QUERY_TOOL,\n  name: \"Get Account Token Balances\",\n  description: getAccountTokenBalancesQueryPrompt(context),\n  parameters: accountTokenBalancesQueryParameters(context),\n  execute: getAccountTokenBalancesQuery\n});\nvar get_account_token_balances_query_default = tool22;\n\n// src/plugins/core-queries-plugin/tools/queries/get-topic-messages-query.ts\nvar getTopicMessagesQueryPrompt = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\n\nThis tool will return the messages for a given Hedera topic.\n\nParameters:\n- topicId (str, required): The topic ID to query\n- startTime (datetime, optional): The start datetime to query. If set, the messages will be returned after this datetime\n- endTime (datetime, optional): The end datetime to query. If set, the messages will be returned before this datetime\n- limit (int, optional): The limit of messages to query. If set, the number of messages to return\n${usageInstructions}\n`;\n};\nvar postProcess23 = (messages, topicId) => {\n  const messagesText = messages.map(\n    (message) => `${Buffer.from(message.message, \"base64\").toString(\"utf-8\")} - posted at: ${message.consensus_timestamp}\n`\n  );\n  return `Messages for topic ${topicId}:\n  --- Messages ---\n  ${messagesText}\n  `;\n};\nvar getTopicMessagesQueryParams = (params) => {\n  return {\n    topicId: params.topicId,\n    lowerTimestamp: params.startTime ? `${Math.floor(new Date(params.startTime).getTime() / 1e3)}.000000000` : \"\",\n    upperTimestamp: params.endTime ? `${Math.floor(new Date(params.endTime).getTime() / 1e3)}.000000000` : \"\",\n    limit: params.limit || 100\n  };\n};\nvar convertMessagesFromBase64ToString = (messages) => {\n  return messages.map((message) => {\n    return {\n      ...message,\n      message: Buffer.from(message.message, \"base64\").toString(\"utf-8\")\n    };\n  });\n};\nvar getTopicMessagesQuery = async (client, context, params) => {\n  try {\n    const mirrornodeService = getMirrornodeService(context.mirrornodeService, client.ledgerId);\n    const messages = await mirrornodeService.getTopicMessages(getTopicMessagesQueryParams(params));\n    return {\n      raw: {\n        topicId: messages.topicId,\n        messages: convertMessagesFromBase64ToString(messages.messages)\n      },\n      humanMessage: postProcess23(messages.messages, params.topicId)\n    };\n  } catch (error) {\n    const desc = \"Failed to get topic messages\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[get_topic_messages_query_tool]\", message);\n    return { raw: { error: message }, humanMessage: message };\n  }\n};\nvar GET_TOPIC_MESSAGES_QUERY_TOOL = \"get_topic_messages_query_tool\";\nvar tool23 = (context) => ({\n  method: GET_TOPIC_MESSAGES_QUERY_TOOL,\n  name: \"Get Topic Messages\",\n  description: getTopicMessagesQueryPrompt(context),\n  parameters: topicMessagesQueryParameters(context),\n  execute: getTopicMessagesQuery\n});\nvar get_topic_messages_query_default = tool23;\n\n// src/plugins/core-queries-plugin/tools/queries/get-token-info-query.ts\nvar getTokenInfoQueryPrompt = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\n\nThis tool will return the information for a given Hedera token.\n\nParameters:\n- tokenId (str): The token ID to query for.\n${usageInstructions}\n`;\n};\nvar postProcess24 = (tokenInfo) => {\n  const formatSupply = (supply) => {\n    if (!supply) return \"N/A\";\n    const decimals = Number(tokenInfo.decimals || \"0\");\n    const amount = Number(supply);\n    if (isNaN(amount)) return supply;\n    return (amount / 10 ** decimals).toLocaleString();\n  };\n  const formatKey = (key) => {\n    if (!key) return \"Not Set\";\n    return key._type ? `${key.key}` : \"Present\";\n  };\n  const supplyType = tokenInfo.supply_type === \"INFINITE\" ? \"Infinite\" : tokenInfo.max_supply || \"Finite\";\n  const freezeStatus = tokenInfo.freeze_default ? \"Frozen\" : \"Active\";\n  return `Here are the details for token **${tokenInfo.token_id}**:\n\n- **Token Name**: ${tokenInfo.name}\n- **Token Symbol**: ${tokenInfo.symbol}\n- **Token Type**: ${tokenInfo.type || \"N/A\"}\n- **Decimals**: ${tokenInfo.decimals}\n- **Max Supply**: ${formatSupply(tokenInfo.max_supply)}\n- **Current Supply**: ${formatSupply(tokenInfo.total_supply)}\n- **Supply Type**: ${supplyType}\n- **Treasury Account ID**: ${tokenInfo.treasury_account_id || \"N/A\"}\n- **Status (Deleted/Active)**: ${tokenInfo.deleted ? \"Deleted\" : \"Active\"}\n- **Status (Frozen/Active)**: ${freezeStatus}\n\n**Keys**:\n- Admin Key: ${formatKey(tokenInfo.admin_key)}\n- Supply Key: ${formatKey(tokenInfo.supply_key)}\n- Wipe Key: ${formatKey(tokenInfo.wipe_key)}\n- KYC Key: ${formatKey(tokenInfo.kyc_key)}\n- Freeze Key: ${formatKey(tokenInfo.freeze_key)}\n- Fee Schedule Key: ${formatKey(tokenInfo.fee_schedule_key)}\n- Pause Key: ${formatKey(tokenInfo.pause_key)}\n- Metadata Key: ${formatKey(tokenInfo.metadata_key)}\n\n${tokenInfo.memo ? `**Memo**: ${tokenInfo.memo}` : \"\"}\n`;\n};\nvar getTokenInfoQuery = async (client, context, params) => {\n  try {\n    const mirrornodeService = getMirrornodeService(context.mirrornodeService, client.ledgerId);\n    const tokenInfo = {\n      ...await mirrornodeService.getTokenInfo(params.tokenId),\n      token_id: params.tokenId\n    };\n    return {\n      raw: { tokenId: params.tokenId, tokenInfo },\n      humanMessage: postProcess24(tokenInfo)\n    };\n  } catch (error) {\n    const desc = \"Failed to get token info\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[get_token_info_query_tool]\", message);\n    return { raw: { error: message }, humanMessage: message };\n  }\n};\nvar GET_TOKEN_INFO_QUERY_TOOL = \"get_token_info_query_tool\";\nvar tool24 = (context) => ({\n  method: GET_TOKEN_INFO_QUERY_TOOL,\n  name: \"Get Token Info\",\n  description: getTokenInfoQueryPrompt(context),\n  parameters: tokenInfoQueryParameters(context),\n  execute: getTokenInfoQuery\n});\nvar get_token_info_query_default = tool24;\n\n// src/plugins/core-queries-plugin/index.ts\nvar coreQueriesPlugin = {\n  name: \"core-queries-plugin\",\n  version: \"1.0.0\",\n  description: \"A plugin for the Hedera Queries Service (DEPRECATED)\",\n  tools: (context) => {\n    return [\n      get_hbar_balance_query_default(context),\n      get_account_query_default(context),\n      get_account_token_balances_query_default(context),\n      get_topic_messages_query_default(context),\n      get_token_info_query_default(context)\n    ];\n  }\n};\nvar coreQueriesPluginToolNames = {\n  GET_HBAR_BALANCE_QUERY_TOOL,\n  GET_ACCOUNT_QUERY_TOOL,\n  GET_ACCOUNT_TOKEN_BALANCES_QUERY_TOOL,\n  GET_TOPIC_MESSAGES_QUERY_TOOL,\n  GET_TOKEN_INFO_QUERY_TOOL\n};\n\n// src/shared/parameter-schemas/core-misc.zod.ts\n\nvar exchangeRateQueryParameters = (_context) => zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  timestamp: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"Historical timestamp to query (seconds or nanos since epoch)\").optional()\n});\n\n// src/plugins/core-misc-query-plugin/tools/queries/get-exchange-rate-query.ts\nvar getExchangeRatePrompt = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\n\nThis tool returns the Hedera network HBAR exchange rate from the Mirror Node.\n\nParameters:\n- timestamp (str, optional): Historical timestamp to query. Pass seconds or nanos since epoch (e.g., 1726000000.123456789). If omitted, returns the latest rate.\n${usageInstructions}\n`;\n};\nvar calculateUsdPerHBAR = (cent_equivalent, hbar_equivalent) => {\n  return cent_equivalent / 100 / hbar_equivalent;\n};\nvar postProcess25 = (rates) => {\n  const { current_rate, next_rate, timestamp } = rates;\n  const usdPerHBAR = calculateUsdPerHBAR(\n    current_rate.cent_equivalent,\n    current_rate.hbar_equivalent\n  );\n  const nextUsdPerHBAR = calculateUsdPerHBAR(next_rate.cent_equivalent, next_rate.hbar_equivalent);\n  return `\n  Details for timestamp: ${timestamp}\n  \n  Current exchange rate: ${usdPerHBAR}\n  Expires at ${new Date(current_rate.expiration_time * 1e3).toISOString()})\n  \n  Next exchange rate: ${nextUsdPerHBAR}\n  Expires at ${new Date(next_rate.expiration_time * 1e3).toISOString()})`;\n};\nvar getExchangeRateQuery = async (client, context, params) => {\n  try {\n    const mirrornodeService = getMirrornodeService(context.mirrornodeService, client.ledgerId);\n    const rates = await mirrornodeService.getExchangeRate(params.timestamp);\n    return {\n      raw: rates,\n      humanMessage: postProcess25(rates)\n    };\n  } catch (error) {\n    console.error(\"[GetExchangeRate] Error getting exchange rate\", error);\n    const message = error instanceof Error ? error.message : \"Failed to get exchange rate\";\n    return {\n      raw: { error: message },\n      humanMessage: message\n    };\n  }\n};\nvar GET_EXCHANGE_RATE_TOOL = \"get_exchange_rate_tool\";\nvar tool25 = (context) => ({\n  method: GET_EXCHANGE_RATE_TOOL,\n  name: \"Get Exchange Rate\",\n  description: getExchangeRatePrompt(context),\n  parameters: exchangeRateQueryParameters(context),\n  execute: getExchangeRateQuery\n});\nvar get_exchange_rate_query_default = tool25;\n\n// src/plugins/core-misc-query-plugin/index.ts\nvar coreMiscQueriesPlugin = {\n  name: \"core-misc-queries-plugin\",\n  version: \"1.0.0\",\n  description: \"A plugin for Hedera Misc Queries\",\n  tools: (context) => {\n    return [get_exchange_rate_query_default(context)];\n  }\n};\nvar coreMiscQueriesPluginsToolNames = {\n  GET_EXCHANGE_RATE_TOOL\n};\n\n// src/plugins/core-evm-plugin/tools/erc20/create-erc20.ts\n\n\n// src/shared/constants/contracts.ts\n\nvar TESTNET_ERC20_FACTORY_ADDRESS = \"0.0.6471814\";\nvar TESTNET_ERC721_FACTORY_ADDRESS = \"0.0.6510666\";\nvar ERC20_FACTORY_ADDRESSES = /* @__PURE__ */ new Map([\n  [_hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.LedgerId.TESTNET.toString(), TESTNET_ERC20_FACTORY_ADDRESS]\n  // Current testnet address\n]);\nvar ERC721_FACTORY_ADDRESSES = /* @__PURE__ */ new Map([\n  [_hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.LedgerId.TESTNET.toString(), TESTNET_ERC721_FACTORY_ADDRESS]\n  // Current testnet address\n]);\nvar ERC20_FACTORY_ABI = [\n  \"function deployToken(string memory name_, string memory symbol_, uint8 decimals_, uint256 initialSupply_) external returns (address)\"\n];\nvar ERC721_FACTORY_ABI = [\n  \"function deployToken(string memory name_, string memory symbol_, string memory baseURI_) external returns (address)\"\n];\nvar ERC20_TRANSFER_FUNCTION_NAME = \"transfer\";\nvar ERC20_TRANSFER_FUNCTION_ABI = [\n  \"function transfer(address to, uint256 amount) external returns (bool)\"\n];\nvar ERC721_TRANSFER_FUNCTION_NAME = \"transferFrom\";\nvar ERC721_TRANSFER_FUNCTION_ABI = [\n  \"function transferFrom(address from, address to, uint256 tokenId) external returns (bool)\"\n];\nvar ERC721_MINT_FUNCTION_NAME = \"safeMint\";\nvar ERC721_MINT_FUNCTION_ABI = [\"function safeMint(address to) external returns (bool)\"];\nfunction getERC20FactoryAddress(ledgerId) {\n  const address = ERC20_FACTORY_ADDRESSES.get(ledgerId.toString());\n  if (!address) {\n    throw new Error(`Network type ${ledgerId} not supported for ERC20 factory`);\n  }\n  return address;\n}\nfunction getERC721FactoryAddress(ledgerId) {\n  const address = ERC721_FACTORY_ADDRESSES.get(ledgerId.toString());\n  if (!address) {\n    throw new Error(`Network type ${ledgerId} not supported for ERC721 factory`);\n  }\n  return address;\n}\n\n// src/plugins/core-evm-plugin/tools/erc20/create-erc20.ts\nvar createERC20Prompt = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\n\nThis tool creates an ERC20 token on Hedera by calling the BaseERC20Factory contract.\n\nParameters:\n- tokenName (str, required): The name of the token\n- tokenSymbol (str, required): The symbol of the token\n- decimals (int, optional): The number of decimals the token supports. Defaults to 18\n- initialSupply (int, optional): The initial supply of the token. Defaults to 0\n${usageInstructions}\n`;\n};\nvar getERC20Address = async (client, executeStrategyResult) => {\n  const record = await new _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.TransactionRecordQuery().setTransactionId(executeStrategyResult.raw.transactionId).execute(client);\n  return \"0x\" + record.contractFunctionResult?.getAddress(0);\n};\nvar createERC20 = async (client, context, params) => {\n  try {\n    const factoryContractAddress = getERC20FactoryAddress(client.ledgerId);\n    const normalisedParams = HederaParameterNormaliser.normaliseCreateERC20Params(\n      params,\n      factoryContractAddress,\n      ERC20_FACTORY_ABI,\n      \"deployToken\",\n      context\n    );\n    const tx = HederaBuilder.executeTransaction(normalisedParams);\n    const result = await handleTransaction(tx, client, context);\n    if (context.mode == \"autonomous\" /* AUTONOMOUS */) {\n      const erc20Address = await getERC20Address(client, result);\n      return {\n        ...result,\n        erc20Address: erc20Address?.toString(),\n        humanMessage: `ERC20 token created successfully at address ${erc20Address?.toString()}`\n      };\n    }\n    return result;\n  } catch (error) {\n    const desc = \"Failed to create ERC20 token\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[create_erc20_tool]\", message);\n    return { raw: { status: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.Status.InvalidTransaction, error: message }, humanMessage: message };\n  }\n};\nvar CREATE_ERC20_TOOL = \"create_erc20_tool\";\nvar tool26 = (context) => ({\n  method: CREATE_ERC20_TOOL,\n  name: \"Create ERC20 Token\",\n  description: createERC20Prompt(context),\n  parameters: createERC20Parameters(context),\n  execute: createERC20\n});\nvar create_erc20_default = tool26;\n\n// src/plugins/core-evm-plugin/tools/erc20/transfer-erc20.ts\n\nvar transferERC20Prompt = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\n\nThis tool will transfer a given amount of an existing ERC20 token on Hedera.\n\nParameters:\n- contractId (str, required): The id of the ERC20 contract. This can be the EVM address or the Hedera account id.\n- recipientAddress (str, required): The EVM or Hedera address to which the tokens will be transferred. This can be the EVM address or the Hedera account id.\n- amount (number, required): The amount to be transferred\n${usageInstructions}\n\nExample: \"Transfer 1 ERC20 token 0.0.6473135 to 0xd94dc7f82f103757f715514e4a37186be6e4580b\" means transferring the amount of 1 of the ERC20 token with contract id 0.0.6473135 to the 0xd94dc7f82f103757f715514e4a37186be6e4580b EVM address.\nExample: \"Transfer 1 ERC20 token 0xd94dc7f82f103757f715514e4a37186be6e4580b to 0.0.6473135\" means transferring the amount of 1 of the ERC20 token with contract id 0xd94dc7f82f103757f715514e4a37186be6e4580b to the 0.0.6473135 Hedera account id.\n`;\n};\nvar transferERC20 = async (client, context, params) => {\n  const mirrorNode = getMirrornodeService(context.mirrornodeService, client.ledgerId);\n  try {\n    const normalisedParams = await HederaParameterNormaliser.normaliseTransferERC20Params(\n      params,\n      ERC20_TRANSFER_FUNCTION_ABI,\n      ERC20_TRANSFER_FUNCTION_NAME,\n      context,\n      mirrorNode\n    );\n    const tx = HederaBuilder.executeTransaction(normalisedParams);\n    const result = await handleTransaction(tx, client, context);\n    return result;\n  } catch (error) {\n    const desc = \"Failed to transfer ERC20\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[transfer_erc20_tool]\", message);\n    return { raw: { status: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.Status.InvalidTransaction, error: message }, humanMessage: message };\n  }\n};\nvar TRANSFER_ERC20_TOOL = \"transfer_erc20_tool\";\nvar tool27 = (context) => ({\n  method: TRANSFER_ERC20_TOOL,\n  name: \"Transfer ERC20\",\n  description: transferERC20Prompt(context),\n  parameters: transferERC20Parameters(context),\n  execute: transferERC20\n});\nvar transfer_erc20_default = tool27;\n\n// src/plugins/core-evm-plugin/tools/erc721/transfer-erc721.ts\n\nvar transferERC721Prompt = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const fromAddressDesc = PromptGenerator.getAnyAddressParameterDescription(\"fromAddress\", context);\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\n\nThis tool will transfer an existing ERC721 token on Hedera.\n\nParameters:\n- contractId (str, required): The id of the ERC721 contract\n- ${fromAddressDesc}\n- toAddress (str, required): The address to which the token will be transferred. This can be the EVM address or the Hedera account id.\n- tokenId (number, required): The ID of the transfered token\n${usageInstructions}\n\nExample: \"Transfer ERC721 token 0.0.6486793 with id 0 from 0xd94dc7f82f103757f715514e4a37186be6e4580b to 0xd94dc7f82f103757f715514e4a37186be6e4580b\" means transfering the ERC721 token (identified by 0) with contract id 0.0.6486793 from the 0xd94dc7f82f103757f715514e4a37186be6e4580b EVM address to the 0xd94dc7f82f103757f715514e4a37186be6e4580b EVM address.\nExample: \"Transfer ERC721 token 0.0.6486793 with id 0 from 0.0.6486793 to 0xd94dc7f82f103757f715514e4a37186be6e4580b\" means transfering the ERC721 token (identified by 0) with contract id 0.0.6486793 from the 0.0.6486793 Hedera account id to the 0xd94dc7f82f103757f715514e4a37186be6e4580b EVM address.\n`;\n};\nvar transferERC721 = async (client, context, params) => {\n  try {\n    const mirrorNode = getMirrornodeService(context.mirrornodeService, client.ledgerId);\n    const normalisedParams = await HederaParameterNormaliser.normaliseTransferERC721Params(\n      params,\n      ERC721_TRANSFER_FUNCTION_ABI,\n      ERC721_TRANSFER_FUNCTION_NAME,\n      context,\n      mirrorNode,\n      client\n    );\n    const tx = HederaBuilder.executeTransaction(normalisedParams);\n    const result = await handleTransaction(tx, client, context);\n    return result;\n  } catch (error) {\n    const desc = \"Failed to transfer ERC721\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[transfer_erc721_tool]\", message);\n    return { raw: { status: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.Status.InvalidTransaction, error: message }, humanMessage: message };\n  }\n};\nvar TRANSFER_ERC721_TOOL = \"transfer_erc721_tool\";\nvar tool28 = (context) => ({\n  method: TRANSFER_ERC721_TOOL,\n  name: \"Transfer ERC721\",\n  description: transferERC721Prompt(context),\n  parameters: transferERC721Parameters(context),\n  execute: transferERC721\n});\nvar transfer_erc721_default = tool28;\n\n// src/plugins/core-evm-plugin/tools/erc721/mint-erc721.ts\n\nvar mintERC721Prompt = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  const toAddressDesc = PromptGenerator.getAnyAddressParameterDescription(\"toAddress\", context);\n  return `\n${contextSnippet}\n\nThis tool will mint a new ERC721 token on Hedera.\n\nParameters:\n- contractId (str, required): The id of the ERC721 contract\n- ${toAddressDesc}\n${usageInstructions}\n\nExample: \"Mint ERC721 token 0.0.6486793 to 0xd94dc7f82f103757f715514e4a37186be6e4580b\" means minting the ERC721 token with contract id 0.0.6486793 to the 0xd94dc7f82f103757f715514e4a37186be6e4580b EVM address.\nExample: \"Mint ERC721 token 0.0.6486793 to 0.0.6486793\" means minting the ERC721 token with contract id 0.0.6486793 to the 0.0.6486793 Hedera account id.\n`;\n};\nvar mintERC721 = async (client, context, params) => {\n  try {\n    const mirrorNode = getMirrornodeService(context.mirrornodeService, client.ledgerId);\n    const normalisedParams = await HederaParameterNormaliser.normaliseMintERC721Params(\n      params,\n      ERC721_MINT_FUNCTION_ABI,\n      ERC721_MINT_FUNCTION_NAME,\n      context,\n      mirrorNode,\n      client\n    );\n    const tx = HederaBuilder.executeTransaction(normalisedParams);\n    const result = await handleTransaction(tx, client, context);\n    return result;\n  } catch (error) {\n    const desc = \"Failed to mint ERC721\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[mint_erc721_tool]\", message);\n    return { raw: { status: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.Status.InvalidTransaction, error: message }, humanMessage: message };\n  }\n};\nvar MINT_ERC721_TOOL = \"mint_erc721_tool\";\nvar tool29 = (context) => ({\n  method: MINT_ERC721_TOOL,\n  name: \"Mint ERC721\",\n  description: mintERC721Prompt(context),\n  parameters: mintERC721Parameters(context),\n  execute: mintERC721\n});\nvar mint_erc721_default = tool29;\n\n// src/plugins/core-evm-plugin/tools/erc721/create-erc721.ts\n\nvar createERC721Prompt = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\n\nThis tool creates an ERC721 token on Hedera by calling the BaseERC721Factory contract.\n\nParameters:\n- tokenName (str, required): The name of the token\n- tokenSymbol (str, required): The symbol of the token\n- baseURI (str, required): The base URI for token metadata.\n${usageInstructions}\n\nThe contractId returned by the tool is the address of the ERC721 Factory contract, the address of the ERC721 token is the erc721Address returned by the tool.\n`;\n};\nvar getERC721Address = async (client, executeStrategyResult) => {\n  const record = await new _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.TransactionRecordQuery().setTransactionId(executeStrategyResult.raw.transactionId).execute(client);\n  return \"0x\" + record.contractFunctionResult?.getAddress(0);\n};\nvar createERC721 = async (client, context, params) => {\n  try {\n    const factoryContractAddress = getERC721FactoryAddress(client.ledgerId);\n    const normalisedParams = HederaParameterNormaliser.normaliseCreateERC721Params(\n      params,\n      factoryContractAddress,\n      ERC721_FACTORY_ABI,\n      \"deployToken\",\n      context\n    );\n    const tx = HederaBuilder.executeTransaction(normalisedParams);\n    const result = await handleTransaction(tx, client, context);\n    if (context.mode == \"autonomous\" /* AUTONOMOUS */) {\n      const erc721Address = await getERC721Address(client, result);\n      return {\n        ...result,\n        erc721Address: erc721Address?.toString(),\n        message: `ERC721 token created successfully at address ${erc721Address?.toString()}`\n      };\n    }\n    return result;\n  } catch (error) {\n    const desc = \"Failed to create ERC721 token\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[create_erc721_tool]\", message);\n    return { raw: { status: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.Status.InvalidTransaction, error: message }, humanMessage: message };\n  }\n};\nvar CREATE_ERC721_TOOL = \"create_erc721_tool\";\nvar tool30 = (context) => ({\n  method: CREATE_ERC721_TOOL,\n  name: \"Create ERC721 Token\",\n  description: createERC721Prompt(context),\n  parameters: createERC721Parameters(context),\n  execute: createERC721\n});\nvar create_erc721_default = tool30;\n\n// src/plugins/core-evm-plugin/index.ts\nvar coreEVMPlugin = {\n  name: \"core-evm-plugin\",\n  version: \"1.0.0\",\n  description: \"A plugin for the Hedera EVM\",\n  tools: (context) => {\n    return [\n      create_erc20_default(context),\n      transfer_erc20_default(context),\n      transfer_erc721_default(context),\n      mint_erc721_default(context),\n      create_erc721_default(context)\n    ];\n  }\n};\nvar coreEVMPluginToolNames = {\n  TRANSFER_ERC721_TOOL,\n  MINT_ERC721_TOOL,\n  CREATE_ERC20_TOOL,\n  TRANSFER_ERC20_TOOL,\n  CREATE_ERC721_TOOL\n};\n\n// src/plugins/core-account-query-plugin/tools/queries/get-hbar-balance-query.ts\nvar getHbarBalanceQueryPrompt2 = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const accountDesc = PromptGenerator.getAccountParameterDescription(\"accountId\", context);\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\n\nThis tool will return the HBAR balance for a given Hedera account.\n\nParameters:\n- ${accountDesc}\n${usageInstructions}\n`;\n};\nvar postProcess26 = (hbarBalance, accountId) => {\n  return `Account ${accountId} has a balance of ${hbarBalance} HBAR`;\n};\nvar getHbarBalanceQuery2 = async (client, context, params) => {\n  try {\n    const normalisedParams = HederaParameterNormaliser.normaliseHbarBalanceParams(\n      params,\n      context,\n      client\n    );\n    const mirrornodeService = getMirrornodeService(context.mirrornodeService, client.ledgerId);\n    const balance = await mirrornodeService.getAccountHBarBalance(\n      normalisedParams.accountId\n    );\n    return {\n      raw: { accountId: normalisedParams.accountId, hbarBalance: toHBar(balance).toString() },\n      humanMessage: postProcess26(toHBar(balance).toString(), normalisedParams.accountId)\n    };\n  } catch (error) {\n    const desc = \"Failed to get HBAR balance\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[get_hbar_balance_query_tool]\", message);\n    return { raw: { error: message }, humanMessage: message };\n  }\n};\nvar GET_HBAR_BALANCE_QUERY_TOOL2 = \"get_hbar_balance_query_tool\";\nvar tool31 = (context) => ({\n  method: GET_HBAR_BALANCE_QUERY_TOOL2,\n  name: \"Get HBAR Balance\",\n  description: getHbarBalanceQueryPrompt2(context),\n  parameters: accountBalanceQueryParameters(context),\n  execute: getHbarBalanceQuery2\n});\nvar get_hbar_balance_query_default2 = tool31;\n\n// src/plugins/core-account-query-plugin/tools/queries/get-account-query.ts\n\nvar getAccountQueryPrompt2 = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\n\nThis tool will return the account information for a given Hedera account.\n\nParameters:\n- accountId (str, required): The account ID to query\n${usageInstructions}\n`;\n};\nvar postProcess27 = (account) => {\n  return `Details for ${account.accountId}\nBalance: ${account.balance.balance.toString()}\nPublic Key: ${account.accountPublicKey},\nEVM address: ${account.evmAddress},\n`;\n};\nvar getAccountQuery2 = async (client, context, params) => {\n  try {\n    const mirrornodeService = getMirrornodeService(context.mirrornodeService, client.ledgerId);\n    const account = await mirrornodeService.getAccount(params.accountId);\n    return {\n      raw: { accountId: params.accountId, account },\n      humanMessage: postProcess27(account)\n    };\n  } catch (error) {\n    const desc = \"Failed to get account query\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[get_account_query_tool]\", message);\n    return { raw: { status: _hashgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.Status.InvalidTransaction, error: message }, humanMessage: message };\n  }\n};\nvar GET_ACCOUNT_QUERY_TOOL2 = \"get_account_query_tool\";\nvar tool32 = (context) => ({\n  method: GET_ACCOUNT_QUERY_TOOL2,\n  name: \"Get Account Query\",\n  description: getAccountQueryPrompt2(context),\n  parameters: accountQueryParameters(context),\n  execute: getAccountQuery2\n});\nvar get_account_query_default2 = tool32;\n\n// src/plugins/core-account-query-plugin/tools/queries/get-account-token-balances-query.ts\nvar getAccountTokenBalancesQueryPrompt2 = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const accountDesc = PromptGenerator.getAccountParameterDescription(\"accountId\", context);\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\n\nThis tool will return the token balances for a given Hedera account.\n\nParameters:\n- ${accountDesc}\n- tokenId (str, optional): The token ID to query for. If not provided, all token balances will be returned\n${usageInstructions}\n`;\n};\nvar postProcess28 = (tokenBalances, accountId) => {\n  if (tokenBalances.tokens.length === 0) {\n    return `No token balances found for account ${accountId}`;\n  }\n  const balancesText = tokenBalances.tokens.map(\n    (token) => `  Token: ${token.token_id}, Balance: ${token.balance}, Decimals: ${token.decimals}`\n  ).join(\"\\n\");\n  return `Details for ${accountId}\n--- Token Balances ---\n${balancesText}`;\n};\nvar getAccountTokenBalancesQuery2 = async (client, context, params) => {\n  try {\n    const normalisedParams = HederaParameterNormaliser.normaliseAccountTokenBalancesParams(\n      params,\n      context,\n      client\n    );\n    const mirrornodeService = getMirrornodeService(context.mirrornodeService, client.ledgerId);\n    const tokenBalances = await mirrornodeService.getAccountTokenBalances(\n      normalisedParams.accountId,\n      normalisedParams.tokenId\n    );\n    return {\n      raw: { accountId: normalisedParams.accountId, tokenBalances },\n      humanMessage: postProcess28(tokenBalances, normalisedParams.accountId)\n    };\n  } catch (error) {\n    const desc = \"Failed to get account token balances\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[get_account_token_balances_query_tool]\", message);\n    return { raw: { error: message }, humanMessage: message };\n  }\n};\nvar GET_ACCOUNT_TOKEN_BALANCES_QUERY_TOOL2 = \"get_account_token_balances_query_tool\";\nvar tool33 = (context) => ({\n  method: GET_ACCOUNT_TOKEN_BALANCES_QUERY_TOOL2,\n  name: \"Get Account Token Balances\",\n  description: getAccountTokenBalancesQueryPrompt2(context),\n  parameters: accountTokenBalancesQueryParameters(context),\n  execute: getAccountTokenBalancesQuery2\n});\nvar get_account_token_balances_query_default2 = tool33;\n\n// src/plugins/core-account-query-plugin/index.ts\nvar coreAccountQueryPlugin = {\n  name: \"core-account-query-plugin\",\n  version: \"1.0.0\",\n  description: \"A plugin for Hedera Account Service queries\",\n  tools: (context) => {\n    return [\n      get_hbar_balance_query_default2(context),\n      get_account_query_default2(context),\n      get_account_token_balances_query_default2(context)\n    ];\n  }\n};\nvar coreAccountQueryPluginToolNames = {\n  GET_HBAR_BALANCE_QUERY_TOOL: GET_HBAR_BALANCE_QUERY_TOOL2,\n  GET_ACCOUNT_QUERY_TOOL: GET_ACCOUNT_QUERY_TOOL2,\n  GET_ACCOUNT_TOKEN_BALANCES_QUERY_TOOL: GET_ACCOUNT_TOKEN_BALANCES_QUERY_TOOL2\n};\n\n// src/plugins/core-token-query-plugin/tools/queries/get-token-info-query.ts\nvar getTokenInfoQueryPrompt2 = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\n\nThis tool will return the information for a given Hedera token.\n\nParameters:\n- tokenId (str): The token ID to query for.\n${usageInstructions}\n`;\n};\nvar postProcess29 = (tokenInfo) => {\n  const formatSupply = (supply) => {\n    if (!supply) return \"N/A\";\n    const decimals = Number(tokenInfo.decimals || \"0\");\n    const amount = Number(supply);\n    if (isNaN(amount)) return supply;\n    return (amount / 10 ** decimals).toLocaleString();\n  };\n  const formatKey = (key) => {\n    if (!key) return \"Not Set\";\n    return key._type ? `${key.key}` : \"Present\";\n  };\n  const supplyType = tokenInfo.supply_type === \"INFINITE\" ? \"Infinite\" : \"Finite\";\n  const freezeStatus = tokenInfo.freeze_default ? \"Frozen\" : \"Active\";\n  return `Here are the details for token **${tokenInfo.token_id}**:\n\n- **Token Name**: ${tokenInfo.name}\n- **Token Symbol**: ${tokenInfo.symbol}\n- **Token Type**: ${tokenInfo.type || \"N/A\"}\n- **Decimals**: ${tokenInfo.decimals}\n- **Max Supply**: ${formatSupply(tokenInfo.max_supply)}\n- **Current Supply**: ${formatSupply(tokenInfo.total_supply)}\n- **Supply Type**: ${supplyType}\n- **Treasury Account ID**: ${tokenInfo.treasury_account_id || \"N/A\"}\n- **Status (Deleted/Active)**: ${tokenInfo.deleted ? \"Deleted\" : \"Active\"}\n- **Status (Frozen/Active)**: ${freezeStatus}\n\n**Keys**:\n- Admin Key: ${formatKey(tokenInfo.admin_key)}\n- Supply Key: ${formatKey(tokenInfo.supply_key)}\n- Wipe Key: ${formatKey(tokenInfo.wipe_key)}\n- KYC Key: ${formatKey(tokenInfo.kyc_key)}\n- Freeze Key: ${formatKey(tokenInfo.freeze_key)}\n- Fee Schedule Key: ${formatKey(tokenInfo.fee_schedule_key)}\n- Pause Key: ${formatKey(tokenInfo.pause_key)}\n- Metadata Key: ${formatKey(tokenInfo.metadata_key)}\n\n${tokenInfo.memo ? `**Memo**: ${tokenInfo.memo}` : \"\"}\n`;\n};\nvar getTokenInfoQuery2 = async (client, context, params) => {\n  try {\n    const mirrornodeService = getMirrornodeService(context.mirrornodeService, client.ledgerId);\n    const tokenInfo = {\n      ...await mirrornodeService.getTokenInfo(params.tokenId),\n      token_id: params.tokenId\n    };\n    return {\n      raw: { tokenId: params.tokenId, tokenInfo },\n      humanMessage: postProcess29(tokenInfo)\n    };\n  } catch (error) {\n    const desc = \"Failed to get token info\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[get_token_info_query_tool]\", message);\n    return { raw: { error: message }, humanMessage: message };\n  }\n};\nvar GET_TOKEN_INFO_QUERY_TOOL2 = \"get_token_info_query_tool\";\nvar tool34 = (context) => ({\n  method: GET_TOKEN_INFO_QUERY_TOOL2,\n  name: \"Get Token Info\",\n  description: getTokenInfoQueryPrompt2(context),\n  parameters: tokenInfoQueryParameters(context),\n  execute: getTokenInfoQuery2\n});\nvar get_token_info_query_default2 = tool34;\n\n// src/plugins/core-token-query-plugin/tools/queries/get-pending-airdrop-query.ts\nvar getPendingAirdropQueryPrompt = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const accountDesc = PromptGenerator.getAccountParameterDescription(\"accountId\", context);\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\n\nThis tool will return pending airdrops for a given Hedera account.\n\nParameters:\n- ${accountDesc}\n${usageInstructions}\n`;\n};\nvar formatAirdrop = (airdrop, index) => {\n  const token = airdrop.token_id ?? \"N/A\";\n  const amount = airdrop.amount ?? 0;\n  const serial = airdrop.serial_number ?? \"N/A\";\n  const sender = airdrop.sender_id ?? \"N/A\";\n  const receiver = airdrop.receiver_id ?? \"N/A\";\n  const fromTs = airdrop.timestamp?.from ?? \"N/A\";\n  const toTs = airdrop.timestamp?.to ?? \"N/A\";\n  return `#${index + 1} Token: ${token}, Amount: ${amount}, Serial: ${serial}, Sender: ${sender}, Receiver: ${receiver}, Timestamp: ${fromTs}${toTs ? ` \\u2192 ${toTs}` : \"\"}`;\n};\nvar postProcess30 = (accountId, response) => {\n  const count = response.airdrops?.length ?? 0;\n  if (count === 0) {\n    return `No pending airdrops found for account ${accountId}`;\n  }\n  const details = response.airdrops.map(formatAirdrop).join(\"\\n\");\n  return `Here are the pending airdrops for account **${accountId}** (total: ${count}):\n\n${details}`;\n};\nvar getPendingAirdropQuery = async (client, context, params) => {\n  try {\n    const accountId = params.accountId ?? AccountResolver.getDefaultAccount(context, client);\n    if (!accountId) throw new Error(\"Account ID is required and was not provided\");\n    const mirrornodeService = getMirrornodeService(context.mirrornodeService, client.ledgerId);\n    const response = await mirrornodeService.getPendingAirdrops(accountId);\n    return {\n      raw: { accountId, pendingAirdrops: response },\n      humanMessage: postProcess30(accountId, response)\n    };\n  } catch (error) {\n    const desc = \"Failed to get pending airdrops\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[get_pending_airdrop_query_tool]\", message);\n    return { raw: { error: message }, humanMessage: message };\n  }\n};\nvar GET_PENDING_AIRDROP_TOOL = \"get_pending_airdrop_tool\";\nvar tool35 = (context) => ({\n  method: GET_PENDING_AIRDROP_TOOL,\n  name: \"Get Pending Airdrops\",\n  description: getPendingAirdropQueryPrompt(context),\n  parameters: pendingAirdropQueryParameters(context),\n  execute: getPendingAirdropQuery\n});\nvar get_pending_airdrop_query_default = tool35;\n\n// src/plugins/core-token-query-plugin/index.ts\nvar coreTokenQueryPlugin = {\n  name: \"core-token-query-plugin\",\n  version: \"1.0.0\",\n  description: \"A plugin for Hedera Token Service queries\",\n  tools: (context) => {\n    return [get_token_info_query_default2(context), get_pending_airdrop_query_default(context)];\n  }\n};\nvar coreTokenQueryPluginToolNames = {\n  GET_TOKEN_INFO_QUERY_TOOL: GET_TOKEN_INFO_QUERY_TOOL2,\n  GET_PENDING_AIRDROP_TOOL\n};\n\n// src/plugins/core-consensus-query-plugin/tools/queries/get-topic-messages-query.ts\nvar getTopicMessagesQueryPrompt2 = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\n\nThis tool will return the messages for a given Hedera topic.\n\nParameters:\n- topicId (str, required): The topic ID to query\n- startTime (datetime, optional): The start datetime to query. If set, the messages will be returned after this datetime\n- endTime (datetime, optional): The end datetime to query. If set, the messages will be returned before this datetime\n- limit (int, optional): The limit of messages to query. If set, the number of messages to return\n${usageInstructions}\n`;\n};\nvar postProcess31 = (messages, topicId) => {\n  if (messages.length === 0) {\n    return `No messages found for topic ${topicId}.`;\n  }\n  const messagesText = messages.map(\n    (message) => `${Buffer.from(message.message, \"base64\").toString(\"utf-8\")} - posted at: ${message.consensus_timestamp}\n`\n  );\n  return `Messages for topic ${topicId}:\n  --- Messages ---\n  ${messagesText}\n  `;\n};\nvar getTopicMessagesQueryParams2 = (params) => {\n  return {\n    topicId: params.topicId,\n    lowerTimestamp: params.startTime ? `${Math.floor(new Date(params.startTime).getTime() / 1e3)}.000000000` : \"\",\n    upperTimestamp: params.endTime ? `${Math.floor(new Date(params.endTime).getTime() / 1e3)}.000000000` : \"\",\n    limit: params.limit || 100\n  };\n};\nvar convertMessagesFromBase64ToString2 = (messages) => {\n  return messages.map((message) => {\n    return {\n      ...message,\n      message: Buffer.from(message.message, \"base64\").toString(\"utf-8\")\n    };\n  });\n};\nvar getTopicMessagesQuery2 = async (client, context, params) => {\n  try {\n    const mirrornodeService = getMirrornodeService(context.mirrornodeService, client.ledgerId);\n    const messages = await mirrornodeService.getTopicMessages(getTopicMessagesQueryParams2(params));\n    return {\n      raw: {\n        topicId: messages.topicId,\n        messages: convertMessagesFromBase64ToString2(messages.messages)\n      },\n      humanMessage: postProcess31(messages.messages, params.topicId)\n    };\n  } catch (error) {\n    const desc = \"Failed to get topic messages\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[get_topic_messages_query_tool]\", message);\n    return { raw: { error: message }, humanMessage: message };\n  }\n};\nvar GET_TOPIC_MESSAGES_QUERY_TOOL2 = \"get_topic_messages_query_tool\";\nvar tool36 = (context) => ({\n  method: GET_TOPIC_MESSAGES_QUERY_TOOL2,\n  name: \"Get Topic Messages\",\n  description: getTopicMessagesQueryPrompt2(context),\n  parameters: topicMessagesQueryParameters(context),\n  execute: getTopicMessagesQuery2\n});\nvar get_topic_messages_query_default2 = tool36;\n\n// src/plugins/core-consensus-query-plugin/tools/queries/get-topic-info-query.ts\nvar getTopicInfoQueryPrompt = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\n\nThis tool will return the information for a given Hedera topic (HCS).\n\nParameters:\n- topicId (str): The topic ID to query for.\n${usageInstructions}\n`;\n};\nvar postProcess32 = (topic) => {\n  const formatKey = (key) => {\n    if (!key) return \"Not Set\";\n    return key._type ? key.key || \"Present\" : \"Present\";\n  };\n  const formatTimestamp = (ts) => {\n    if (!ts) return \"N/A\";\n    const [seconds] = ts.split(\".\");\n    const date = new Date(Number(seconds) * 1e3);\n    return date.toISOString();\n  };\n  return `Here are the details for topic **${topic.topic_id || \"N/A\"}**:\n\n- **Memo**: ${topic.memo || \"N/A\"}\n- **Deleted**: ${topic.deleted ? \"Yes\" : \"No\"}\n- **Sequence Number**: ${topic.sequence_number ?? \"N/A\"}\n\n**Timestamps**:\n- Created: ${formatTimestamp(topic.created_timestamp)}\n\n**Entity IDs**:\n- Auto Renew Account: ${topic.auto_renew_account || \"N/A\"}\n- Auto Renew Period: ${topic.auto_renew_period ?? \"N/A\"}\n\n**Keys**:\n- Admin Key: ${formatKey(topic.admin_key)}\n- Submit Key: ${formatKey(topic.submit_key)}\n`;\n};\nvar getTopicInfoQuery = async (client, context, params) => {\n  try {\n    const mirrornodeService = getMirrornodeService(context.mirrornodeService, client.ledgerId);\n    const topicInfo = {\n      ...await mirrornodeService.getTopicInfo(params.topicId),\n      topic_id: params.topicId\n    };\n    return {\n      raw: { topicId: params.topicId, topicInfo },\n      humanMessage: postProcess32(topicInfo)\n    };\n  } catch (error) {\n    const desc = \"Failed to get topic info\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[get_topic_info_query_tool]\", message);\n    return { raw: { error: message }, humanMessage: message };\n  }\n};\nvar GET_TOPIC_INFO_QUERY_TOOL = \"get_topic_info_query_tool\";\nvar tool37 = (context) => ({\n  method: GET_TOPIC_INFO_QUERY_TOOL,\n  name: \"Get Topic Info\",\n  description: getTopicInfoQueryPrompt(context),\n  parameters: getTopicInfoParameters(context),\n  execute: getTopicInfoQuery\n});\nvar get_topic_info_query_default = tool37;\n\n// src/plugins/core-consensus-query-plugin/index.ts\nvar coreConsensusQueryPlugin = {\n  name: \"core-consensus-query-plugin\",\n  version: \"1.0.0\",\n  description: \"A plugin for Hedera Consensus Service queries\",\n  tools: (context) => {\n    return [get_topic_messages_query_default2(context), get_topic_info_query_default(context)];\n  }\n};\nvar coreConsensusQueryPluginToolNames = {\n  GET_TOPIC_MESSAGES_QUERY_TOOL: GET_TOPIC_MESSAGES_QUERY_TOOL2,\n  GET_TOPIC_INFO_QUERY_TOOL\n};\n\n// src/plugins/core-evm-query-plugin/tools/queries/get-contract-info-query.ts\nvar getContractInfoQueryPrompt = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\n\nThis tool will return the information for a given Hedera contract.\n\nParameters:\n- contractId (str): The contract ID to query for.\n${usageInstructions}\n`;\n};\nvar postProcess33 = (contract) => {\n  const formatKey = (key) => {\n    if (!key) return \"Not Set\";\n    return key._type ? key.key || \"Present\" : \"Present\";\n  };\n  const formatTimestamp = (ts) => {\n    if (!ts) return \"N/A\";\n    const [seconds, nanos] = ts.split(\".\");\n    const date = new Date(Number(seconds) * 1e3);\n    return date.toISOString() + (nanos ? `.${nanos}` : \"\");\n  };\n  return `Here are the details for contract **${contract.contract_id || \"N/A\"}**:\n\n- **Memo**: ${contract.memo || \"N/A\"}\n- **Deleted**: ${contract.deleted ? \"Yes\" : \"No\"}\n- **Permanent Removal**: ${contract.permanent_removal ? \"Yes\" : \"No\"}\n- **Nonce**: ${contract.nonce ?? \"N/A\"}\n\n**Timestamps**:\n- Created: ${formatTimestamp(contract.created_timestamp)}\n- Expiration: ${formatTimestamp(contract.expiration_timestamp)}\n- Valid From: ${contract.timestamp?.from || \"N/A\"}\n- Valid To: ${contract.timestamp?.to || \"N/A\"}\n\n**Entity IDs**:\n- Auto Renew Account: ${contract.auto_renew_account || \"N/A\"}\n- File ID: ${contract.file_id || \"N/A\"}\n- Obtainer ID: ${contract.obtainer_id || \"N/A\"}\n- Proxy Account ID: ${contract.proxy_account_id || \"N/A\"}\n\n**Keys**:\n- Admin Key: ${formatKey(contract.admin_key)}\n\n**EVM**:\n- Address: ${contract.evm_address || \"N/A\"}\n`;\n};\nvar getContractInfoQuery = async (client, context, params) => {\n  try {\n    const mirrornodeService = getMirrornodeService(context.mirrornodeService, client.ledgerId);\n    const contractInfo = await mirrornodeService.getContractInfo(params.contractId);\n    return {\n      raw: { contractId: params.contractId, contractInfo },\n      humanMessage: postProcess33(contractInfo)\n    };\n  } catch (error) {\n    const desc = \"Failed to get contract info\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[get_contract_info_query_tool]\", message);\n    return { raw: { error: message }, humanMessage: message };\n  }\n};\nvar GET_CONTRACT_INFO_QUERY_TOOL = \"get_contract_info_query_tool\";\nvar tool38 = (context) => ({\n  method: GET_CONTRACT_INFO_QUERY_TOOL,\n  name: \"Get Contract Info\",\n  description: getContractInfoQueryPrompt(context),\n  parameters: contractInfoQueryParameters(context),\n  execute: getContractInfoQuery\n});\nvar get_contract_info_query_default = tool38;\n\n// src/plugins/core-evm-query-plugin/index.ts\nvar coreEVMQueryPlugin = {\n  name: \"core-evm-query-plugin\",\n  version: \"1.0.0\",\n  description: \"A plugin for Hedera EVM Service queries\",\n  tools: (context) => {\n    return [get_contract_info_query_default(context)];\n  }\n};\nvar coreEVMQueryPluginToolNames = {\n  GET_CONTRACT_INFO_QUERY_TOOL\n};\n\n// src/plugins/core-transactions-query-plugin/tools/queries/get-transaction-record-query.ts\nvar getTransactionRecordQueryPrompt = (context = {}) => {\n  const contextSnippet = PromptGenerator.getContextSnippet(context);\n  const usageInstructions = PromptGenerator.getParameterUsageInstructions();\n  return `\n${contextSnippet}\n\nThis tool will return the transaction record for a given Hedera transaction ID.\n\nParameters:\n- transactionId (str, required): The transaction ID to fetch record for. Should be in format \\\\\"shard.realm.num-sss-nnn\\\\\" format where sss are seconds and nnn are nanoseconds\n- nonce (number, optional): Optional nonce value for the transaction\n${usageInstructions}\n\nAdditional information:\nIf user provides transaction ID in format 0.0.4177806@1755169980.051721264, parse it to 0.0.4177806-1755169980-051721264 and use it as transaction ID. Do not remove the staring zeros.\n`;\n};\nvar postProcess34 = (transactionRecord, transactionId) => {\n  if (!transactionRecord.transactions || transactionRecord.transactions.length === 0) {\n    return `No transaction details found for transaction ID: ${transactionId}`;\n  }\n  const results = transactionRecord.transactions.map((tx, index) => {\n    let transfersInfo = \"\";\n    if (tx.transfers && tx.transfers.length > 0) {\n      transfersInfo = \"\\nTransfers:\\n\" + tx.transfers.map(\n        (transfer) => `  Account: ${transfer.account}, Amount: ${toDisplayUnit(transfer.amount, 8)}\\u210F`\n      ).join(\"\\n\");\n    }\n    const transactionHeader = transactionRecord.transactions.length > 1 ? `Transaction ${index + 1} Details for ${transactionId}` : `Transaction Details for ${transactionId}`;\n    return `${transactionHeader}\nStatus: ${tx.result}\nConsensus Timestamp: ${tx.consensus_timestamp}\nTransaction Hash: ${tx.transaction_hash}\nTransaction Fee: ${tx.charged_tx_fee}\nType: ${tx.name}\nEntity ID: ${tx.entity_id}${transfersInfo}`;\n  });\n  return results.join(\"\\n\\n\" + \"=\".repeat(50) + \"\\n\\n\");\n};\nvar getTransactionRecordQuery = async (client, context, params) => {\n  try {\n    const mirrornodeService = getMirrornodeService(context.mirrornodeService, client.ledgerId);\n    const normalisedParams = HederaParameterNormaliser.normaliseGetTransactionRecordParams(\n      params,\n      context\n    );\n    const transactionRecord = await mirrornodeService.getTransactionRecord(\n      normalisedParams.transactionId,\n      normalisedParams.nonce\n    );\n    return {\n      raw: { transactionId: params.transactionId, transactionRecord },\n      humanMessage: postProcess34(transactionRecord, params.transactionId)\n    };\n  } catch (error) {\n    const desc = \"Failed to get transaction record\";\n    const message = desc + (error instanceof Error ? `: ${error.message}` : \"\");\n    console.error(\"[get_transaction_record_query_tool]\", message);\n    return { raw: { error: message }, humanMessage: message };\n  }\n};\nvar GET_TRANSACTION_RECORD_QUERY_TOOL = \"get_transaction_record_query_tool\";\nvar tool39 = (context) => ({\n  method: GET_TRANSACTION_RECORD_QUERY_TOOL,\n  name: \"Get Transaction Record Query\",\n  description: getTransactionRecordQueryPrompt(context),\n  parameters: transactionRecordQueryParameters(context),\n  execute: getTransactionRecordQuery\n});\nvar get_transaction_record_query_default = tool39;\n\n// src/plugins/core-transactions-query-plugin/index.ts\nvar coreTransactionQueryPlugin = {\n  name: \"core-transaction-query-plugin\",\n  version: \"1.0.0\",\n  description: \"A plugin for Hedera Transactions queries\",\n  tools: (context) => {\n    return [get_transaction_record_query_default(context)];\n  }\n};\nvar coreTransactionQueryPluginToolNames = {\n  GET_TRANSACTION_RECORD_QUERY_TOOL\n};\n\n// src/plugins/index.ts\nvar coreHTSPlugin = coreTokenPlugin;\nvar coreHTSPluginToolNames = coreTokenPluginToolNames;\nvar coreSCSPlugin = coreEVMPlugin;\nvar coreSCSPluginToolNames = coreEVMPluginToolNames;\n\n// src/shared/plugin.ts\nvar CORE_PLUGINS = [\n  coreAccountPlugin,\n  coreTokenPlugin,\n  coreConsensusPlugin,\n  coreEVMPlugin,\n  coreAccountQueryPlugin,\n  coreTokenQueryPlugin,\n  coreConsensusQueryPlugin\n];\nvar PluginRegistry = class {\n  plugins = /* @__PURE__ */ new Map();\n  register(plugin) {\n    if (this.plugins.has(plugin.name)) {\n      console.warn(`Plugin \"${plugin.name}\" is already registered. Overwriting.`);\n    }\n    this.plugins.set(plugin.name, plugin);\n  }\n  getPlugins() {\n    return Array.from(this.plugins.values());\n  }\n  loadCorePlugins(context) {\n    const pluginTools = [];\n    for (const plugin of CORE_PLUGINS) {\n      try {\n        const tools = plugin.tools(context);\n        pluginTools.push(...tools);\n      } catch (error) {\n        console.error(`Error loading tools from plugin \"${plugin.name}\":`, error);\n      }\n    }\n    return pluginTools;\n  }\n  loadPlugins(context) {\n    const pluginTools = [];\n    for (const plugin of this.plugins.values()) {\n      try {\n        const tools = plugin.tools(context);\n        pluginTools.push(...tools);\n      } catch (error) {\n        console.error(`Error loading tools from plugin \"${plugin.name}\":`, error);\n      }\n    }\n    return pluginTools;\n  }\n  getTools(context) {\n    if (this.plugins.size === 0) {\n      return this.loadCorePlugins(context);\n    } else {\n      return this.loadPlugins(context);\n    }\n  }\n  clear() {\n    this.plugins.clear();\n  }\n};\n\n// src/langchain/tool.ts\n\nvar HederaAgentKitTool = class extends _langchain_core_tools__WEBPACK_IMPORTED_MODULE_7__.StructuredTool {\n  hederaAPI;\n  method;\n  name;\n  description;\n  schema;\n  constructor(HederaAgentKitAPI, method, description, schema) {\n    super();\n    this.hederaAPI = HederaAgentKitAPI;\n    this.method = method;\n    this.name = method;\n    this.description = description;\n    this.schema = schema;\n  }\n  _call(arg, _runManager, _parentConfig) {\n    return this.hederaAPI.run(this.method, arg);\n  }\n};\nvar tool_default = HederaAgentKitTool;\n\n// src/shared/tool-discovery.ts\nvar ToolDiscovery = class _ToolDiscovery {\n  pluginRegistry = new PluginRegistry();\n  constructor(plugins = []) {\n    plugins.forEach((plugin) => this.pluginRegistry.register(plugin));\n  }\n  getAllTools(context, configuration) {\n    const pluginTools = this.pluginRegistry.getTools(context);\n    const allTools = [];\n    const allToolNames = /* @__PURE__ */ new Set();\n    pluginTools.forEach((pluginTool) => {\n      if (!allToolNames.has(pluginTool.method)) {\n        allTools.push(pluginTool);\n        allToolNames.add(pluginTool.method);\n      } else {\n        console.warn(\n          `Plugin tool \"${pluginTool.method}\" conflicts with core tool. Using core tool.`\n        );\n      }\n    });\n    if (configuration?.tools && configuration.tools.length > 0) {\n      return allTools.filter((tool41) => configuration.tools.includes(tool41.method));\n    }\n    return allTools;\n  }\n  static createFromConfiguration(configuration) {\n    return new _ToolDiscovery(configuration.plugins || []);\n  }\n};\n\n// src/langchain/toolkit.ts\nvar HederaLangchainToolkit = class {\n  _hederaAgentKit;\n  tools;\n  constructor({ client, configuration }) {\n    const context = configuration.context || {};\n    const toolDiscovery = ToolDiscovery.createFromConfiguration(configuration);\n    const allTools = toolDiscovery.getAllTools(context, configuration);\n    this._hederaAgentKit = new api_default(client, configuration.context, allTools);\n    this.tools = allTools.map(\n      (tool41) => new tool_default(\n        this._hederaAgentKit,\n        tool41.method,\n        tool41.description,\n        tool41.parameters\n      )\n    );\n  }\n  getTools() {\n    return this.tools;\n  }\n  getHederaAgentKitAPI() {\n    return this._hederaAgentKit;\n  }\n};\nvar toolkit_default = HederaLangchainToolkit;\n\n// src/modelcontextprotocol/toolkit.ts\n\nvar HederaMCPToolkit = class extends _modelcontextprotocol_sdk_server_mcp_js__WEBPACK_IMPORTED_MODULE_8__.McpServer {\n  _hederaAgentKit;\n  constructor({ client, configuration }) {\n    super({\n      name: \"Hedera Agent Kit\",\n      version: \"0.1.0\",\n      configuration: {\n        ...configuration,\n        context: {\n          ...configuration.context,\n          mode: \"modelcontextprotocol\"\n        }\n      }\n    });\n    const context = configuration.context || {};\n    const toolDiscovery = ToolDiscovery.createFromConfiguration(configuration);\n    const allTools = toolDiscovery.getAllTools(context, configuration);\n    this._hederaAgentKit = new api_default(client, configuration.context, allTools);\n    allTools.map((tool41) => {\n      this.tool(\n        tool41.method,\n        tool41.description,\n        tool41.parameters.shape,\n        async (arg, _extra) => {\n          const result = await this._hederaAgentKit.run(tool41.method, arg);\n          return {\n            content: [\n              {\n                type: \"text\",\n                text: String(result)\n              }\n            ]\n          };\n        }\n      );\n    });\n  }\n};\nvar toolkit_default2 = HederaMCPToolkit;\n\n// src/ai-sdk/tool.ts\n\nfunction HederaAgentKitTool2(hederaAPI, method, description, schema) {\n  return (0,ai__WEBPACK_IMPORTED_MODULE_9__.tool)({\n    description,\n    parameters: schema,\n    execute: (arg) => {\n      return hederaAPI.run(method, arg);\n    }\n  });\n}\n\n// src/ai-sdk/toolkit.ts\nvar HederaAIToolkit = class {\n  _hedera;\n  tools;\n  constructor({ client, configuration }) {\n    const context = configuration.context || {};\n    const toolDiscovery = ToolDiscovery.createFromConfiguration(configuration);\n    const allTools = toolDiscovery.getAllTools(context, configuration);\n    this._hedera = new api_default(client, configuration.context, allTools);\n    this.tools = {};\n    allTools.forEach((tool41) => {\n      this.tools[tool41.method] = HederaAgentKitTool2(\n        this._hedera,\n        tool41.method,\n        tool41.description,\n        tool41.parameters\n      );\n    });\n  }\n  middleware() {\n    return {\n      wrapGenerate: async ({ doGenerate }) => {\n        return doGenerate();\n      },\n      wrapStream: async ({ doStream }) => {\n        return doStream();\n      }\n    };\n  }\n  getTools() {\n    return this.tools;\n  }\n};\nvar toolkit_default3 = HederaAIToolkit;\n\n// src/elizaos/tool.ts\n\n\n// src/elizaos/utils/extraction.ts\n\nfunction generateExtractionTemplate(tool41) {\n  const zodSchema = tool41.parameters;\n  const description = tool41.description;\n  const actionName = tool41.name;\n  const toolParamsJSONSchema = (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_11__.zodToJsonSchema)(zodSchema, actionName);\n  return `Given the recent messages and Hedera wallet information below:\n{{recentMessages}}\n{{hederaAccountDetails}}\n\nExtract the following parameters based on the tool/action description and json schema below:\n\n### Tool/action description:\n${description}\n\n\\u26A0\\uFE0F Do **not** assume values or apply defaults. Do **not** set a field unless it is clearly specified in the latest user input.\n\\u26A0\\uFE0F **IMPORTANT**: Always ensure numeric values are provided as NUMBERS WITHOUT QUOTES in the JSON response.\n\\u26A0\\uFE0F **IMPORTANT**: Always ensure string values are provided as QUOTED STRINGS in the JSON response.\n\\u26A0\\uFE0F **CRITICAL**: Enum values must be provided as QUOTED STRINGS (e.g., \"finite\", not finite).\n\\u26A0\\uFE0F **CRITICAL**: The returned JSON must be a valid JSON object in markdown format. Don not include comments inside it. If no params is passed return an empty JSON object.\n\n---\n\n### Response format:\nRespond with a JSON markdown block including the fields that were explicitly mentioned in the most recent user message.\n\nResponse JSON schema:\n${JSON.stringify(toolParamsJSONSchema, null, 2)}\n\n---\n\nNumeric values should be numbers without quotes. Enum values must be quoted strings.`;\n}\n\n// src/elizaos/utils/parser.ts\nvar jsonBlockPattern = /```(?:json)?\\s*([\\s\\S]*?)```/;\nfunction customParseJSONObjectFromText(text) {\n  if (!text) return null;\n  let jsonData = null;\n  const jsonBlockMatch = text.match(jsonBlockPattern);\n  try {\n    if (jsonBlockMatch) {\n      const jsonContent = jsonBlockMatch[1].trim().replace(/[\\u0000-\\u001F\\u007F-\\u009F]/g, \"\");\n      jsonData = JSON.parse(jsonContent);\n    } else {\n      try {\n        jsonData = JSON.parse(text.trim());\n      } catch {\n        jsonData = JSON.parse(customNormalizeJsonString(text.trim()));\n      }\n    }\n  } catch (error) {\n    console.warn(\"Could not parse text as JSON:\", error);\n    return null;\n  }\n  if (jsonData && typeof jsonData === \"object\") {\n    return jsonData;\n  }\n  console.warn(\"Parsed result is not a valid object or array\");\n  return null;\n}\nfunction customNormalizeJsonString(str) {\n  if (!str) return str;\n  str = str.replace(/\\{\\s+/, \"{\").replace(/\\s+\\}/, \"}\").trim();\n  str = str.replace(/(\\s*)(\\w+)(\\s*):(\\s*)/g, '$1\"$2\"$3:$4');\n  str = str.replace(/\"([^\"]+)\"\\s*:\\s*'([^']*)'/g, (_, key, value) => `\"${key}\": \"${value}\"`);\n  str = str.replace(/\"([^\"]+)\"\\s*:\\s*([^\",\\{\\[\\]\\}0-9][^\",\\{\\[\\]\\}\\s]*)/g, (match, key, value) => {\n    if (value === \"true\" || value === \"false\" || value === \"null\") {\n      return `\"${key}\": ${value}`;\n    }\n    if (!isNaN(Number(value))) {\n      return `\"${key}\": ${value}`;\n    }\n    return `\"${key}\": \"${value}\"`;\n  });\n  return str;\n}\n\n// src/elizaos/tool.ts\nvar HederaAgentKitTool3 = class {\n  description;\n  handler;\n  similes;\n  examples;\n  name;\n  validate;\n  constructor(client, context, tool41) {\n    const parameterSchema = tool41.parameters;\n    this.description = tool41.description;\n    this.name = tool41.method.toUpperCase();\n    this.similes = [tool41.method.toUpperCase()];\n    this.validate = async (_runtime, _message) => true;\n    this.handler = async (runtime, _message, state, _options, callback) => {\n      _elizaos_core__WEBPACK_IMPORTED_MODULE_10__.logger.log(`Running ${tool41.method} handler...`);\n      if (!state) {\n        throw new Error(\"State is undefined\");\n      }\n      const prompt = (0,_elizaos_core__WEBPACK_IMPORTED_MODULE_10__.composePromptFromState)({\n        state,\n        template: generateExtractionTemplate(tool41)\n      });\n      _elizaos_core__WEBPACK_IMPORTED_MODULE_10__.logger.debug(`prompt: ${prompt}`);\n      const modelOutput = await runtime.useModel(_elizaos_core__WEBPACK_IMPORTED_MODULE_10__.ModelType.TEXT_LARGE, { prompt });\n      _elizaos_core__WEBPACK_IMPORTED_MODULE_10__.logger.debug(`Model extraction output: ${modelOutput}`);\n      const parsedParams = customParseJSONObjectFromText(modelOutput);\n      _elizaos_core__WEBPACK_IMPORTED_MODULE_10__.logger.debug(\"Parsed params object\", parsedParams);\n      const validation = parameterSchema.safeParse(parsedParams);\n      _elizaos_core__WEBPACK_IMPORTED_MODULE_10__.logger.debug(\"Validated params:\" + JSON.stringify(validation, null, 2));\n      if (!validation.success) {\n        const promptText = `given the recent messages {{recent_messages}}, \n        tool description: ${tool41.description}\n        and the error message: ${validation.error.format()}\n        generate a comprehensive message to the user about missing params\n        `;\n        const modelOutput2 = await runtime.useModel(_elizaos_core__WEBPACK_IMPORTED_MODULE_10__.ModelType.TEXT_LARGE, { promptText });\n        if (callback) {\n          await callback({\n            text: modelOutput2,\n            content: { error: validation.error.format() }\n          });\n        }\n        return {\n          success: false,\n          text: modelOutput2,\n          error: validation.error.toString()\n        };\n      }\n      try {\n        const result = await tool41.execute(client, context, validation.data);\n        const responseText = result.humanMessage;\n        if (callback) {\n          await callback({\n            text: responseText,\n            content: result\n          });\n        }\n        return { success: true, text: responseText };\n      } catch (err) {\n        const message = err instanceof Error ? err.message : \"Unknown error\";\n        _elizaos_core__WEBPACK_IMPORTED_MODULE_10__.logger.error(`Error running tool ${tool41.method}:`, err);\n        if (callback) {\n          await callback({\n            text: `Execution failed: ${message}`,\n            content: { error: message }\n          });\n        }\n        return { success: false, text: `Execution failed: ${message}`, error: message };\n      }\n    };\n  }\n};\nvar tool_default2 = HederaAgentKitTool3;\n\n// src/elizaos/toolkit.ts\nvar HederaElizaOSToolkit = class {\n  tools;\n  client;\n  context;\n  constructor({ client, configuration }) {\n    this.client = client;\n    this.context = configuration.context || {};\n    const toolDiscovery = ToolDiscovery.createFromConfiguration(configuration);\n    const allTools = toolDiscovery.getAllTools(this.context, configuration);\n    this.tools = allTools.map((tool41) => new tool_default2(this.client, this.context, tool41));\n  }\n  /**\n   * Maps hedera-agent-kit tools and returns ElizaOS compatible actions\n   */\n  getTools() {\n    return this.tools;\n  }\n};\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/hedera-agent-kit/dist/esm/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/hedera-agent-kit/node_modules/bignumber.js/bignumber.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/hedera-agent-kit/node_modules/bignumber.js/bignumber.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BigNumber: () => (/* binding */ BigNumber),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*\r\n *      bignumber.js v9.3.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2025 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\nvar\r\n  isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n  mathceil = Math.ceil,\r\n  mathfloor = Math.floor,\r\n\r\n  bignumberError = '[BigNumber Error] ',\r\n  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n  BASE = 1e14,\r\n  LOG_BASE = 14,\r\n  MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n  SQRT_BASE = 1e7,\r\n\r\n  // EDITABLE\r\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n  MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n/*\r\n * Create and return a BigNumber constructor.\r\n */\r\nfunction clone(configObject) {\r\n  var div, convertBase, parseNumeric,\r\n    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n    ONE = new BigNumber(1),\r\n\r\n\r\n    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n    // The default values below must be integers within the inclusive ranges stated.\r\n    // The values can also be changed at run-time using BigNumber.set.\r\n\r\n    // The maximum number of decimal places for operations involving division.\r\n    DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n    // The rounding mode used when rounding to the above decimal places, and when using\r\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n    // UP         0 Away from zero.\r\n    // DOWN       1 Towards zero.\r\n    // CEIL       2 Towards +Infinity.\r\n    // FLOOR      3 Towards -Infinity.\r\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n    // The exponent value at and beneath which toString returns exponential notation.\r\n    // Number type: -7\r\n    TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n    // The exponent value at and above which toString returns exponential notation.\r\n    // Number type: 21\r\n    TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n    // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // Number type: -324  (5e-324)\r\n    MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // Number type:  308  (1.7976931348623157e+308)\r\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n    MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    CRYPTO = false,                          // true or false\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN      1 The remainder has the same sign as the dividend.\r\n    //             This modulo mode is commonly known as 'truncated division' and is\r\n    //             equivalent to (a % n) in JavaScript.\r\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n    //             The remainder is always positive.\r\n    //\r\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n    // modes are commonly used for the modulus operation.\r\n    // Although the other rounding modes can also be used, they may not give useful results.\r\n    MODULO_MODE = 1,                         // 0 to 9\r\n\r\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n    POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n    // The format specification used by the BigNumber.prototype.toFormat method.\r\n    FORMAT = {\r\n      prefix: '',\r\n      groupSize: 3,\r\n      secondaryGroupSize: 0,\r\n      groupSeparator: ',',\r\n      decimalSeparator: '.',\r\n      fractionGroupSize: 0,\r\n      fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n      suffix: ''\r\n    },\r\n\r\n    // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n    // '-', '.', whitespace, or repeated character.\r\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n    alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n  //------------------------------------------------------------------------------------------\r\n\r\n\r\n  // CONSTRUCTOR\r\n\r\n\r\n  /*\r\n   * The BigNumber constructor and exported function.\r\n   * Create and return a new instance of a BigNumber object.\r\n   *\r\n   * v {number|string|BigNumber} A numeric value.\r\n   * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n   */\r\n  function BigNumber(v, b) {\r\n    var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n      x = this;\r\n\r\n    // Enable constructor call without `new`.\r\n    if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n    if (b == null) {\r\n\r\n      if (v && v._isBigNumber === true) {\r\n        x.s = v.s;\r\n\r\n        if (!v.c || v.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n        } else if (v.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.c = v.c.slice();\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n        // Use `1 / n` to handle minus zero also.\r\n        x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n        // Fast path for integers, where n < 2147483648 (2**31).\r\n        if (v === ~~v) {\r\n          for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n          if (e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else {\r\n            x.e = e;\r\n            x.c = [v];\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        str = String(v);\r\n      } else {\r\n\r\n        if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n      // Exponential form?\r\n      if ((i = str.search(/e/i)) > 0) {\r\n\r\n        // Determine exponent.\r\n        if (e < 0) e = i;\r\n        e += +str.slice(i + 1);\r\n        str = str.substring(0, i);\r\n      } else if (e < 0) {\r\n\r\n        // Integer.\r\n        e = str.length;\r\n      }\r\n\r\n    } else {\r\n\r\n      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n      intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n      // Allow exponential notation to be used with base 10 argument, while\r\n      // also rounding to DECIMAL_PLACES as with other bases.\r\n      if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n        x = new BigNumber(v);\r\n        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n      }\r\n\r\n      str = String(v);\r\n\r\n      if (isNum = typeof v == 'number') {\r\n\r\n        // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n        if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n        x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n          throw Error\r\n           (tooManyDigits + v);\r\n        }\r\n      } else {\r\n        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      alphabet = ALPHABET.slice(0, b);\r\n      e = i = 0;\r\n\r\n      // Check that str is a valid base b number.\r\n      // Don't use RegExp, so alphabet can contain special characters.\r\n      for (len = str.length; i < len; i++) {\r\n        if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n          if (c == '.') {\r\n\r\n            // If '.' is not the first character and it has not be found before.\r\n            if (i > e) {\r\n              e = len;\r\n              continue;\r\n            }\r\n          } else if (!caseChanged) {\r\n\r\n            // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n            if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n              caseChanged = true;\r\n              i = -1;\r\n              e = 0;\r\n              continue;\r\n            }\r\n          }\r\n\r\n          return parseNumeric(x, String(v), isNum, b);\r\n        }\r\n      }\r\n\r\n      // Prevent later check for length on converted number.\r\n      isNum = false;\r\n      str = convertBase(str, b, 10, x.s);\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n      else e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n    if (str = str.slice(i, ++len)) {\r\n      len -= i;\r\n\r\n      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n      if (isNum && BigNumber.DEBUG &&\r\n        len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n          throw Error\r\n           (tooManyDigits + (x.s * v));\r\n      }\r\n\r\n       // Overflow?\r\n      if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        x.c = x.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      } else {\r\n        x.e = e;\r\n        x.c = [];\r\n\r\n        // Transform base\r\n\r\n        // e is the base 10 exponent.\r\n        // i is where to slice str to get the first element of the coefficient array.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n        if (i < len) {\r\n          if (i) x.c.push(+str.slice(0, i));\r\n\r\n          for (len -= LOG_BASE; i < len;) {\r\n            x.c.push(+str.slice(i, i += LOG_BASE));\r\n          }\r\n\r\n          i = LOG_BASE - (str = str.slice(i)).length;\r\n        } else {\r\n          i -= len;\r\n        }\r\n\r\n        for (; i--; str += '0');\r\n        x.c.push(+str);\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    }\r\n  }\r\n\r\n\r\n  // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n  BigNumber.clone = clone;\r\n\r\n  BigNumber.ROUND_UP = 0;\r\n  BigNumber.ROUND_DOWN = 1;\r\n  BigNumber.ROUND_CEIL = 2;\r\n  BigNumber.ROUND_FLOOR = 3;\r\n  BigNumber.ROUND_HALF_UP = 4;\r\n  BigNumber.ROUND_HALF_DOWN = 5;\r\n  BigNumber.ROUND_HALF_EVEN = 6;\r\n  BigNumber.ROUND_HALF_CEIL = 7;\r\n  BigNumber.ROUND_HALF_FLOOR = 8;\r\n  BigNumber.EUCLID = 9;\r\n\r\n\r\n  /*\r\n   * Configure infrequently-changing library-wide settings.\r\n   *\r\n   * Accept an object with the following optional properties (if the value of a property is\r\n   * a number, it must be an integer within the inclusive range stated):\r\n   *\r\n   *   DECIMAL_PLACES   {number}           0 to MAX\r\n   *   ROUNDING_MODE    {number}           0 to 8\r\n   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n   *   CRYPTO           {boolean}          true or false\r\n   *   MODULO_MODE      {number}           0 to 9\r\n   *   POW_PRECISION       {number}           0 to MAX\r\n   *   ALPHABET         {string}           A string of two or more unique characters which does\r\n   *                                       not contain '.'.\r\n   *   FORMAT           {object}           An object with some of the following properties:\r\n   *     prefix                 {string}\r\n   *     groupSize              {number}\r\n   *     secondaryGroupSize     {number}\r\n   *     groupSeparator         {string}\r\n   *     decimalSeparator       {string}\r\n   *     fractionGroupSize      {number}\r\n   *     fractionGroupSeparator {string}\r\n   *     suffix                 {string}\r\n   *\r\n   * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n   *\r\n   * E.g.\r\n   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n   *\r\n   * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n   *\r\n   * Return an object with the properties current values.\r\n   */\r\n  BigNumber.config = BigNumber.set = function (obj) {\r\n    var p, v;\r\n\r\n    if (obj != null) {\r\n\r\n      if (typeof obj == 'object') {\r\n\r\n        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          DECIMAL_PLACES = v;\r\n        }\r\n\r\n        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 8, p);\r\n          ROUNDING_MODE = v;\r\n        }\r\n\r\n        // EXPONENTIAL_AT {number|number[]}\r\n        // Integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, 0, p);\r\n            intCheck(v[1], 0, MAX, p);\r\n            TO_EXP_NEG = v[0];\r\n            TO_EXP_POS = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n          }\r\n        }\r\n\r\n        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n        if (obj.hasOwnProperty(p = 'RANGE')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, -1, p);\r\n            intCheck(v[1], 1, MAX, p);\r\n            MIN_EXP = v[0];\r\n            MAX_EXP = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            if (v) {\r\n              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' cannot be zero: ' + v);\r\n            }\r\n          }\r\n        }\r\n\r\n        // CRYPTO {boolean} true or false.\r\n        // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n        // '[BigNumber Error] crypto unavailable'\r\n        if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n          v = obj[p];\r\n          if (v === !!v) {\r\n            if (v) {\r\n              if (typeof crypto != 'undefined' && crypto &&\r\n               (crypto.getRandomValues || crypto.randomBytes)) {\r\n                CRYPTO = v;\r\n              } else {\r\n                CRYPTO = !v;\r\n                throw Error\r\n                 (bignumberError + 'crypto unavailable');\r\n              }\r\n            } else {\r\n              CRYPTO = v;\r\n            }\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' not true or false: ' + v);\r\n          }\r\n        }\r\n\r\n        // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 9, p);\r\n          MODULO_MODE = v;\r\n        }\r\n\r\n        // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          POW_PRECISION = v;\r\n        }\r\n\r\n        // FORMAT {object}\r\n        // '[BigNumber Error] FORMAT not an object: {v}'\r\n        if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n          v = obj[p];\r\n          if (typeof v == 'object') FORMAT = v;\r\n          else throw Error\r\n           (bignumberError + p + ' not an object: ' + v);\r\n        }\r\n\r\n        // ALPHABET {string}\r\n        // '[BigNumber Error] ALPHABET invalid: {v}'\r\n        if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n          v = obj[p];\r\n\r\n          // Disallow if less than two characters,\r\n          // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n          if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n            alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n            ALPHABET = v;\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' invalid: ' + v);\r\n          }\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Object expected: {v}'\r\n        throw Error\r\n         (bignumberError + 'Object expected: ' + obj);\r\n      }\r\n    }\r\n\r\n    return {\r\n      DECIMAL_PLACES: DECIMAL_PLACES,\r\n      ROUNDING_MODE: ROUNDING_MODE,\r\n      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n      RANGE: [MIN_EXP, MAX_EXP],\r\n      CRYPTO: CRYPTO,\r\n      MODULO_MODE: MODULO_MODE,\r\n      POW_PRECISION: POW_PRECISION,\r\n      FORMAT: FORMAT,\r\n      ALPHABET: ALPHABET\r\n    };\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if v is a BigNumber instance, otherwise return false.\r\n   *\r\n   * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n   *\r\n   * v {any}\r\n   *\r\n   * '[BigNumber Error] Invalid BigNumber: {v}'\r\n   */\r\n  BigNumber.isBigNumber = function (v) {\r\n    if (!v || v._isBigNumber !== true) return false;\r\n    if (!BigNumber.DEBUG) return true;\r\n\r\n    var i, n,\r\n      c = v.c,\r\n      e = v.e,\r\n      s = v.s;\r\n\r\n    out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n      if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n        // If the first element is zero, the BigNumber value must be zero.\r\n        if (c[0] === 0) {\r\n          if (e === 0 && c.length === 1) return true;\r\n          break out;\r\n        }\r\n\r\n        // Calculate number of digits that c[0] should have, based on the exponent.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (i < 1) i += LOG_BASE;\r\n\r\n        // Calculate number of digits of c[0].\r\n        //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n        if (String(c[0]).length == i) {\r\n\r\n          for (i = 0; i < c.length; i++) {\r\n            n = c[i];\r\n            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n          }\r\n\r\n          // Last element cannot be zero, unless it is the only element.\r\n          if (n !== 0) return true;\r\n        }\r\n      }\r\n\r\n    // Infinity/NaN\r\n    } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n      return true;\r\n    }\r\n\r\n    throw Error\r\n      (bignumberError + 'Invalid BigNumber: ' + v);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.maximum = BigNumber.max = function () {\r\n    return maxOrMin(arguments, -1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.minimum = BigNumber.min = function () {\r\n    return maxOrMin(arguments, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n   * zeros are produced).\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n   * '[BigNumber Error] crypto unavailable'\r\n   */\r\n  BigNumber.random = (function () {\r\n    var pow2_53 = 0x20000000000000;\r\n\r\n    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n    // Check if Math.random() produces more than 32 bits of randomness.\r\n    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n     ? function () { return mathfloor(Math.random() * pow2_53); }\r\n     : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n       (Math.random() * 0x800000 | 0); };\r\n\r\n    return function (dp) {\r\n      var a, b, e, k, v,\r\n        i = 0,\r\n        c = [],\r\n        rand = new BigNumber(ONE);\r\n\r\n      if (dp == null) dp = DECIMAL_PLACES;\r\n      else intCheck(dp, 0, MAX);\r\n\r\n      k = mathceil(dp / LOG_BASE);\r\n\r\n      if (CRYPTO) {\r\n\r\n        // Browsers supporting crypto.getRandomValues.\r\n        if (crypto.getRandomValues) {\r\n\r\n          a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n          for (; i < k;) {\r\n\r\n            // 53 bits:\r\n            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n            //                                     11111 11111111 11111111\r\n            // 0x20000 is 2^21.\r\n            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n            // Rejection sampling:\r\n            // 0 <= v < 9007199254740992\r\n            // Probability that v >= 9e15, is\r\n            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n            if (v >= 9e15) {\r\n              b = crypto.getRandomValues(new Uint32Array(2));\r\n              a[i] = b[0];\r\n              a[i + 1] = b[1];\r\n            } else {\r\n\r\n              // 0 <= v <= 8999999999999999\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 2;\r\n            }\r\n          }\r\n          i = k / 2;\r\n\r\n        // Node.js supporting crypto.randomBytes.\r\n        } else if (crypto.randomBytes) {\r\n\r\n          // buffer\r\n          a = crypto.randomBytes(k *= 7);\r\n\r\n          for (; i < k;) {\r\n\r\n            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n            // 0 <= v < 9007199254740992\r\n            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n               (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n               (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n            if (v >= 9e15) {\r\n              crypto.randomBytes(7).copy(a, i);\r\n            } else {\r\n\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 7;\r\n            }\r\n          }\r\n          i = k / 7;\r\n        } else {\r\n          CRYPTO = false;\r\n          throw Error\r\n           (bignumberError + 'crypto unavailable');\r\n        }\r\n      }\r\n\r\n      // Use Math.random.\r\n      if (!CRYPTO) {\r\n\r\n        for (; i < k;) {\r\n          v = random53bitInt();\r\n          if (v < 9e15) c[i++] = v % 1e14;\r\n        }\r\n      }\r\n\r\n      k = c[--i];\r\n      dp %= LOG_BASE;\r\n\r\n      // Convert trailing digits to zeros according to dp.\r\n      if (k && dp) {\r\n        v = POWS_TEN[LOG_BASE - dp];\r\n        c[i] = mathfloor(k / v) * v;\r\n      }\r\n\r\n      // Remove trailing elements which are zero.\r\n      for (; c[i] === 0; c.pop(), i--);\r\n\r\n      // Zero?\r\n      if (i < 0) {\r\n        c = [e = 0];\r\n      } else {\r\n\r\n        // Remove leading elements which are zero and adjust exponent accordingly.\r\n        for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n        // Count the digits of the first element of c to determine leading zeros, and...\r\n        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n        // adjust the exponent accordingly.\r\n        if (i < LOG_BASE) e -= LOG_BASE - i;\r\n      }\r\n\r\n      rand.e = e;\r\n      rand.c = c;\r\n      return rand;\r\n    };\r\n  })();\r\n\r\n\r\n   /*\r\n   * Return a BigNumber whose value is the sum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.sum = function () {\r\n    var i = 1,\r\n      args = arguments,\r\n      sum = new BigNumber(args[0]);\r\n    for (; i < args.length;) sum = sum.plus(args[i++]);\r\n    return sum;\r\n  };\r\n\r\n\r\n  // PRIVATE FUNCTIONS\r\n\r\n\r\n  // Called by BigNumber and BigNumber.prototype.toString.\r\n  convertBase = (function () {\r\n    var decimal = '0123456789';\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n      var j,\r\n        arr = [0],\r\n        arrL,\r\n        i = 0,\r\n        len = str.length;\r\n\r\n      for (; i < len;) {\r\n        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n        arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n        for (j = 0; j < arr.length; j++) {\r\n\r\n          if (arr[j] > baseOut - 1) {\r\n            if (arr[j + 1] == null) arr[j + 1] = 0;\r\n            arr[j + 1] += arr[j] / baseOut | 0;\r\n            arr[j] %= baseOut;\r\n          }\r\n        }\r\n      }\r\n\r\n      return arr.reverse();\r\n    }\r\n\r\n    // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n    // If the caller is toString, we are converting from base 10 to baseOut.\r\n    // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n    return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n      var alphabet, d, e, k, r, x, xc, y,\r\n        i = str.indexOf('.'),\r\n        dp = DECIMAL_PLACES,\r\n        rm = ROUNDING_MODE;\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        k = POW_PRECISION;\r\n\r\n        // Unlimited precision.\r\n        POW_PRECISION = 0;\r\n        str = str.replace('.', '');\r\n        y = new BigNumber(baseIn);\r\n        x = y.pow(str.length - i);\r\n        POW_PRECISION = k;\r\n\r\n        // Convert str as if an integer, then restore the fraction part by dividing the\r\n        // result by its base raised to a power.\r\n\r\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n         10, baseOut, decimal);\r\n        y.e = y.c.length;\r\n      }\r\n\r\n      // Convert the number as integer.\r\n\r\n      xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n       ? (alphabet = ALPHABET, decimal)\r\n       : (alphabet = decimal, ALPHABET));\r\n\r\n      // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n      e = k = xc.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xc[--k] == 0; xc.pop());\r\n\r\n      // Zero?\r\n      if (!xc[0]) return alphabet.charAt(0);\r\n\r\n      // Does str represent an integer? If so, no need for the division.\r\n      if (i < 0) {\r\n        --e;\r\n      } else {\r\n        x.c = xc;\r\n        x.e = e;\r\n\r\n        // The sign is needed for correct rounding.\r\n        x.s = sign;\r\n        x = div(x, y, dp, rm, baseOut);\r\n        xc = x.c;\r\n        r = x.r;\r\n        e = x.e;\r\n      }\r\n\r\n      // xc now represents str converted to baseOut.\r\n\r\n      // The index of the rounding digit.\r\n      d = e + dp + 1;\r\n\r\n      // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n      i = xc[d];\r\n\r\n      // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n      k = baseOut / 2;\r\n      r = r || d < 0 || xc[d + 1] != null;\r\n\r\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n      // If the index of the rounding digit is not greater than zero, or xc represents\r\n      // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n      // such as 0.00001.\r\n      if (d < 1 || !xc[0]) {\r\n\r\n        // 1^-dp or 0\r\n        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n      } else {\r\n\r\n        // Truncate xc to the required number of decimal places.\r\n        xc.length = d;\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (--baseOut; ++xc[--d] > baseOut;) {\r\n            xc[d] = 0;\r\n\r\n            if (!d) {\r\n              ++e;\r\n              xc = [1].concat(xc);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (k = xc.length; !xc[--k];);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n        // Add leading zeros, decimal point and trailing zeros as required.\r\n        str = toFixedPoint(str, e, alphabet.charAt(0));\r\n      }\r\n\r\n      // The caller will add the sign.\r\n      return str;\r\n    };\r\n  })();\r\n\r\n\r\n  // Perform division in the specified base. Called by div and convertBase.\r\n  div = (function () {\r\n\r\n    // Assume non-zero x and k.\r\n    function multiply(x, k, base) {\r\n      var m, temp, xlo, xhi,\r\n        carry = 0,\r\n        i = x.length,\r\n        klo = k % SQRT_BASE,\r\n        khi = k / SQRT_BASE | 0;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        xlo = x[i] % SQRT_BASE;\r\n        xhi = x[i] / SQRT_BASE | 0;\r\n        m = khi * xlo + xhi * klo;\r\n        temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n        x[i] = temp % base;\r\n      }\r\n\r\n      if (carry) x = [carry].concat(x);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, cmp;\r\n\r\n      if (aL != bL) {\r\n        cmp = aL > bL ? 1 : -1;\r\n      } else {\r\n\r\n        for (i = cmp = 0; i < aL; i++) {\r\n\r\n          if (a[i] != b[i]) {\r\n            cmp = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return cmp;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n    }\r\n\r\n    // x: dividend, y: divisor.\r\n    return function (x, y, dp, rm, base) {\r\n      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n        yL, yz,\r\n        s = x.s == y.s ? 1 : -1,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n        return new BigNumber(\r\n\r\n         // Return NaN if either NaN, or both Infinity or 0.\r\n         !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n       );\r\n      }\r\n\r\n      q = new BigNumber(s);\r\n      qc = q.c = [];\r\n      e = x.e - y.e;\r\n      s = dp + e + 1;\r\n\r\n      if (!base) {\r\n        base = BASE;\r\n        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n        s = s / LOG_BASE | 0;\r\n      }\r\n\r\n      // Result exponent may be one less then the current value of e.\r\n      // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n      for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n      if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n      if (s < 0) {\r\n        qc.push(1);\r\n        more = true;\r\n      } else {\r\n        xL = xc.length;\r\n        yL = yc.length;\r\n        i = 0;\r\n        s += 2;\r\n\r\n        // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n        n = mathfloor(base / (yc[0] + 1));\r\n\r\n        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n        if (n > 1) {\r\n          yc = multiply(yc, n, base);\r\n          xc = multiply(xc, n, base);\r\n          yL = yc.length;\r\n          xL = xc.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xc.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL; rem[remL++] = 0);\r\n        yz = yc.slice();\r\n        yz = [0].concat(yz);\r\n        yc0 = yc[0];\r\n        if (yc[1] >= base / 2) yc0++;\r\n        // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n        do {\r\n          n = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yc, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, n.\r\n\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // n is how many times the divisor goes into the current remainder.\r\n            n = mathfloor(rem0 / yc0);\r\n\r\n            //  Algorithm:\r\n            //  product = divisor multiplied by trial digit (n).\r\n            //  Compare product and remainder.\r\n            //  If product is greater than remainder:\r\n            //    Subtract divisor from product, decrement trial digit.\r\n            //  Subtract product from remainder.\r\n            //  If product was less than remainder at the last compare:\r\n            //    Compare new remainder and divisor.\r\n            //    If remainder is greater than divisor:\r\n            //      Subtract divisor from remainder, increment trial digit.\r\n\r\n            if (n > 1) {\r\n\r\n              // n may be > base only when base is 3.\r\n              if (n >= base) n = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiply(yc, n, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              // If product > remainder then trial digit n too high.\r\n              // n is 1 too high about 5% of the time, and is not known to have\r\n              // ever been more than 1 too high.\r\n              while (compare(prod, rem, prodL, remL) == 1) {\r\n                n--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                prodL = prod.length;\r\n                cmp = 1;\r\n              }\r\n            } else {\r\n\r\n              // n is 0 or 1, cmp is -1.\r\n              // If n is 0, there is no need to compare yc and rem again below,\r\n              // so change cmp to 1 to avoid it.\r\n              // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n              if (n == 0) {\r\n\r\n                // divisor < remainder, so n must be at least 1.\r\n                cmp = n = 1;\r\n              }\r\n\r\n              // product = divisor\r\n              prod = yc.slice();\r\n              prodL = prod.length;\r\n            }\r\n\r\n            if (prodL < remL) prod = [0].concat(prod);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n            remL = rem.length;\r\n\r\n             // If product was < remainder.\r\n            if (cmp == -1) {\r\n\r\n              // Compare divisor and new remainder.\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              // Trial digit n too low.\r\n              // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n              while (compare(yc, rem, yL, remL) < 1) {\r\n                n++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                remL = rem.length;\r\n              }\r\n            }\r\n          } else if (cmp === 0) {\r\n            n++;\r\n            rem = [0];\r\n          } // else cmp === 1 and n will be 0\r\n\r\n          // Add the next digit, n, to the result array.\r\n          qc[i++] = n;\r\n\r\n          // Update the remainder.\r\n          if (rem[0]) {\r\n            rem[remL++] = xc[xi] || 0;\r\n          } else {\r\n            rem = [xc[xi]];\r\n            remL = 1;\r\n          }\r\n        } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n        more = rem[0] != null;\r\n\r\n        // Leading zero?\r\n        if (!qc[0]) qc.splice(0, 1);\r\n      }\r\n\r\n      if (base == BASE) {\r\n\r\n        // To calculate q.e, first get the number of digits of qc[0].\r\n        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n      // Caller is convertBase.\r\n      } else {\r\n        q.e = e;\r\n        q.r = +more;\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n   * notation rounded to the specified decimal places or significant digits.\r\n   *\r\n   * n: a BigNumber.\r\n   * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n   * rm: the rounding mode.\r\n   * id: 1 (toExponential) or 2 (toPrecision).\r\n   */\r\n  function format(n, i, rm, id) {\r\n    var c0, e, ne, len, str;\r\n\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n\r\n    if (!n.c) return n.toString();\r\n\r\n    c0 = n.c[0];\r\n    ne = n.e;\r\n\r\n    if (i == null) {\r\n      str = coeffToString(n.c);\r\n      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n       ? toExponential(str, ne)\r\n       : toFixedPoint(str, ne, '0');\r\n    } else {\r\n      n = round(new BigNumber(n), i, rm);\r\n\r\n      // n.e may have changed if the value was rounded up.\r\n      e = n.e;\r\n\r\n      str = coeffToString(n.c);\r\n      len = str.length;\r\n\r\n      // toPrecision returns exponential notation if the number of significant digits\r\n      // specified is less than the number of digits necessary to represent the integer\r\n      // part of the value in fixed-point notation.\r\n\r\n      // Exponential notation.\r\n      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n        // Append zeros?\r\n        for (; len < i; str += '0', len++);\r\n        str = toExponential(str, e);\r\n\r\n      // Fixed-point notation.\r\n      } else {\r\n        i -= ne + (id === 2 && e > ne);\r\n        str = toFixedPoint(str, e, '0');\r\n\r\n        // Append zeros?\r\n        if (e + 1 > len) {\r\n          if (--i > 0) for (str += '.'; i--; str += '0');\r\n        } else {\r\n          i += e - len;\r\n          if (i > 0) {\r\n            if (e + 1 == len) str += '.';\r\n            for (; i--; str += '0');\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return n.s < 0 && c0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Handle BigNumber.max and BigNumber.min.\r\n  // If any number is NaN, return NaN.\r\n  function maxOrMin(args, n) {\r\n    var k, y,\r\n      i = 1,\r\n      x = new BigNumber(args[0]);\r\n\r\n    for (; i < args.length; i++) {\r\n      y = new BigNumber(args[i]);\r\n      if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {\r\n        x = y;\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n   * Called by minus, plus and times.\r\n   */\r\n  function normalise(n, c, e) {\r\n    var i = 1,\r\n      j = c.length;\r\n\r\n     // Remove trailing zeros.\r\n    for (; !c[--j]; c.pop());\r\n\r\n    // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n    for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n    // Overflow?\r\n    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n      // Infinity.\r\n      n.c = n.e = null;\r\n\r\n    // Underflow?\r\n    } else if (e < MIN_EXP) {\r\n\r\n      // Zero.\r\n      n.c = [n.e = 0];\r\n    } else {\r\n      n.e = e;\r\n      n.c = c;\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n\r\n  // Handle values that fail the validity test in BigNumber.\r\n  parseNumeric = (function () {\r\n    var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n      dotAfter = /^([^.]+)\\.$/,\r\n      dotBefore = /^\\.([^.]+)$/,\r\n      isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n      whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n    return function (x, str, isNum, b) {\r\n      var base,\r\n        s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n      // No exception on ±Infinity or NaN.\r\n      if (isInfinityOrNaN.test(s)) {\r\n        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n      } else {\r\n        if (!isNum) {\r\n\r\n          // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n          s = s.replace(basePrefix, function (m, p1, p2) {\r\n            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n            return !b || b == base ? p1 : m;\r\n          });\r\n\r\n          if (b) {\r\n            base = b;\r\n\r\n            // E.g. '1.' to '1', '.1' to '0.1'\r\n            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n          }\r\n\r\n          if (str != s) return new BigNumber(s, base);\r\n        }\r\n\r\n        // '[BigNumber Error] Not a number: {n}'\r\n        // '[BigNumber Error] Not a base {b} number: {n}'\r\n        if (BigNumber.DEBUG) {\r\n          throw Error\r\n            (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n        }\r\n\r\n        // NaN\r\n        x.s = null;\r\n      }\r\n\r\n      x.c = x.e = null;\r\n    }\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n   * If r is truthy, it is known that there are more digits after the rounding digit.\r\n   */\r\n  function round(x, sd, rm, r) {\r\n    var d, i, j, k, n, ni, rd,\r\n      xc = x.c,\r\n      pows10 = POWS_TEN;\r\n\r\n    // if x is not Infinity or NaN...\r\n    if (xc) {\r\n\r\n      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n      // ni is the index of n within x.c.\r\n      // d is the number of digits of n.\r\n      // i is the index of rd within n including leading zeros.\r\n      // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n      out: {\r\n\r\n        // Get the number of digits of the first element of xc.\r\n        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n        i = sd - d;\r\n\r\n        // If the rounding digit is in the first element of xc...\r\n        if (i < 0) {\r\n          i += LOG_BASE;\r\n          j = sd;\r\n          n = xc[ni = 0];\r\n\r\n          // Get the rounding digit at index j of n.\r\n          rd = mathfloor(n / pows10[d - j - 1] % 10);\r\n        } else {\r\n          ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n          if (ni >= xc.length) {\r\n\r\n            if (r) {\r\n\r\n              // Needed by sqrt.\r\n              for (; xc.length <= ni; xc.push(0));\r\n              n = rd = 0;\r\n              d = 1;\r\n              i %= LOG_BASE;\r\n              j = i - LOG_BASE + 1;\r\n            } else {\r\n              break out;\r\n            }\r\n          } else {\r\n            n = k = xc[ni];\r\n\r\n            // Get the number of digits of n.\r\n            for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n            // Get the index of rd within n.\r\n            i %= LOG_BASE;\r\n\r\n            // Get the index of rd within n, adjusted for leading zeros.\r\n            // The number of leading zeros of n is given by LOG_BASE - d.\r\n            j = i - LOG_BASE + d;\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);\r\n          }\r\n        }\r\n\r\n        r = r || sd < 0 ||\r\n\r\n        // Are there any non-zero digits after the rounding digit?\r\n        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n         xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n        r = rm < 4\r\n         ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n         : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n           rm == (x.s < 0 ? 8 : 7));\r\n\r\n        if (sd < 1 || !xc[0]) {\r\n          xc.length = 0;\r\n\r\n          if (r) {\r\n\r\n            // Convert sd to decimal places.\r\n            sd -= x.e + 1;\r\n\r\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n            x.e = -sd || 0;\r\n          } else {\r\n\r\n            // Zero.\r\n            xc[0] = x.e = 0;\r\n          }\r\n\r\n          return x;\r\n        }\r\n\r\n        // Remove excess digits.\r\n        if (i == 0) {\r\n          xc.length = ni;\r\n          k = 1;\r\n          ni--;\r\n        } else {\r\n          xc.length = ni + 1;\r\n          k = pows10[LOG_BASE - i];\r\n\r\n          // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n          // j > 0 means i > number of leading zeros of n.\r\n          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n        }\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          for (; ;) {\r\n\r\n            // If the digit to be rounded up is in the first element of xc...\r\n            if (ni == 0) {\r\n\r\n              // i will be the length of xc[0] before k is added.\r\n              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n              j = xc[0] += k;\r\n              for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n              // if i != k the length has increased.\r\n              if (i != k) {\r\n                x.e++;\r\n                if (xc[0] == BASE) xc[0] = 1;\r\n              }\r\n\r\n              break;\r\n            } else {\r\n              xc[ni] += k;\r\n              if (xc[ni] != BASE) break;\r\n              xc[ni--] = 0;\r\n              k = 1;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; xc[--i] === 0; xc.pop());\r\n      }\r\n\r\n      // Overflow? Infinity.\r\n      if (x.e > MAX_EXP) {\r\n        x.c = x.e = null;\r\n\r\n      // Underflow? Zero.\r\n      } else if (x.e < MIN_EXP) {\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function valueOf(n) {\r\n    var str,\r\n      e = n.e;\r\n\r\n    if (e === null) return n.toString();\r\n\r\n    str = coeffToString(n.c);\r\n\r\n    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n      ? toExponential(str, e)\r\n      : toFixedPoint(str, e, '0');\r\n\r\n    return n.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new BigNumber(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   *   0 if they have the same value,\r\n   *   or null if the value of either is NaN.\r\n   */\r\n  P.comparedTo = function (y, b) {\r\n    return compare(this, new BigNumber(y, b));\r\n  };\r\n\r\n\r\n  /*\r\n   * If dp is undefined or null or true or false, return the number of decimal places of the\r\n   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   *\r\n   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.decimalPlaces = P.dp = function (dp, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), dp + x.e + 1, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last number.\r\n    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n    if (n < 0) n = 0;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.dividedBy = P.div = function (y, b) {\r\n    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n   * BigNumber by the value of BigNumber(y, b).\r\n   */\r\n  P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n    return div(this, new BigNumber(y, b), 0, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n   *\r\n   * If m is present, return the result modulo m.\r\n   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n   *\r\n   * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n   *\r\n   * n {number|string|BigNumber} The exponent. An integer.\r\n   * [m] {number|string|BigNumber} The modulus.\r\n   *\r\n   * '[BigNumber Error] Exponent not an integer: {n}'\r\n   */\r\n  P.exponentiatedBy = P.pow = function (n, m) {\r\n    var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n      x = this;\r\n\r\n    n = new BigNumber(n);\r\n\r\n    // Allow NaN and ±Infinity, but not other non-integers.\r\n    if (n.c && !n.isInteger()) {\r\n      throw Error\r\n        (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n    }\r\n\r\n    if (m != null) m = new BigNumber(m);\r\n\r\n    // Exponent of MAX_SAFE_INTEGER is 15.\r\n    nIsBig = n.e > 14;\r\n\r\n    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n      // The sign of the result of pow when x is negative depends on the evenness of n.\r\n      // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n      y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\r\n      return m ? y.mod(m) : y;\r\n    }\r\n\r\n    nIsNeg = n.s < 0;\r\n\r\n    if (m) {\r\n\r\n      // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n      isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n      if (isModExp) x = x.mod(m);\r\n\r\n    // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n    // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n      // [1, 240000000]\r\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n      // [80000000000000]  [99999750000000]\r\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n      // If x is negative and n is odd, k = -0, else k = 0.\r\n      k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n      // If x >= 1, k = ±Infinity.\r\n      if (x.e > -1) k = 1 / k;\r\n\r\n      // If n is negative return ±0, else return ±Infinity.\r\n      return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n    } else if (POW_PRECISION) {\r\n\r\n      // Truncating each coefficient array to a length of k after each multiplication\r\n      // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n      // i.e. there will be a minimum of 28 guard digits retained.\r\n      k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n    }\r\n\r\n    if (nIsBig) {\r\n      half = new BigNumber(0.5);\r\n      if (nIsNeg) n.s = 1;\r\n      nIsOdd = isOdd(n);\r\n    } else {\r\n      i = Math.abs(+valueOf(n));\r\n      nIsOdd = i % 2;\r\n    }\r\n\r\n    y = new BigNumber(ONE);\r\n\r\n    // Performs 54 loop iterations for n of 9007199254740991.\r\n    for (; ;) {\r\n\r\n      if (nIsOdd) {\r\n        y = y.times(x);\r\n        if (!y.c) break;\r\n\r\n        if (k) {\r\n          if (y.c.length > k) y.c.length = k;\r\n        } else if (isModExp) {\r\n          y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (i) {\r\n        i = mathfloor(i / 2);\r\n        if (i === 0) break;\r\n        nIsOdd = i % 2;\r\n      } else {\r\n        n = n.times(half);\r\n        round(n, n.e + 1, 1);\r\n\r\n        if (n.e > 14) {\r\n          nIsOdd = isOdd(n);\r\n        } else {\r\n          i = +valueOf(n);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        }\r\n      }\r\n\r\n      x = x.times(x);\r\n\r\n      if (k) {\r\n        if (x.c && x.c.length > k) x.c.length = k;\r\n      } else if (isModExp) {\r\n        x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n      }\r\n    }\r\n\r\n    if (isModExp) return y;\r\n    if (nIsNeg) y = ONE.div(y);\r\n\r\n    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n   */\r\n  P.integerValue = function (rm) {\r\n    var n = new BigNumber(this);\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n    return round(n, n.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isEqualTo = P.eq = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.c;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isGreaterThan = P.gt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n   */\r\n  P.isInteger = function () {\r\n    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isLessThan = P.lt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is negative, otherwise return false.\r\n   */\r\n  P.isNegative = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is positive, otherwise return false.\r\n   */\r\n  P.isPositive = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.c && this.c[0] == 0;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.minus = function (y, b) {\r\n    var i, j, t, xLTy,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Either Infinity?\r\n      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n      // Either zero?\r\n      if (!xc[0] || !yc[0]) {\r\n\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n         // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n         ROUNDING_MODE == 3 ? -0 : 0);\r\n      }\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Determine which is the bigger number.\r\n    if (a = xe - ye) {\r\n\r\n      if (xLTy = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      for (b = a; b--; t.push(0));\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n\r\n        if (xc[b] != yc[b]) {\r\n          xLTy = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xLTy) {\r\n      t = xc;\r\n      xc = yc;\r\n      yc = t;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    b = (j = yc.length) - (i = xc.length);\r\n\r\n    // Append zeros to xc if shorter.\r\n    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n    if (b > 0) for (; b--; xc[i++] = 0);\r\n    b = BASE - 1;\r\n\r\n    // Subtract yc from xc.\r\n    for (; j > a;) {\r\n\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i]; xc[i] = b);\r\n        --xc[i];\r\n        xc[j] += BASE;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n    // Zero?\r\n    if (!xc[0]) {\r\n\r\n      // Following IEEE 754 (2008) 6.3,\r\n      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n      y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n    // for finite x and y.\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n   * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n   */\r\n  P.modulo = P.mod = function (y, b) {\r\n    var q, s,\r\n      x = this;\r\n\r\n    y = new BigNumber(y, b);\r\n\r\n    // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n    if (!x.c || !y.s || y.c && !y.c[0]) {\r\n      return new BigNumber(NaN);\r\n\r\n    // Return x if y is Infinity or x is zero.\r\n    } else if (!y.c || x.c && !x.c[0]) {\r\n      return new BigNumber(x);\r\n    }\r\n\r\n    if (MODULO_MODE == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // r = x - qy    where  0 <= r < abs(y)\r\n      s = y.s;\r\n      y.s = 1;\r\n      q = div(x, y, 0, 3);\r\n      y.s = s;\r\n      q.s *= s;\r\n    } else {\r\n      q = div(x, y, 0, MODULO_MODE);\r\n    }\r\n\r\n    y = x.minus(q.times(y));\r\n\r\n    // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n   * of BigNumber(y, b).\r\n   */\r\n  P.multipliedBy = P.times = function (y, b) {\r\n    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n      base, sqrtBase,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new BigNumber(y, b)).c;\r\n\r\n    // Either NaN, ±Infinity or ±0?\r\n    if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n      // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n        y.c = y.e = y.s = null;\r\n      } else {\r\n        y.s *= x.s;\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        if (!xc || !yc) {\r\n          y.c = y.e = null;\r\n\r\n        // Return ±0 if either is ±0.\r\n        } else {\r\n          y.c = [0];\r\n          y.e = 0;\r\n        }\r\n      }\r\n\r\n      return y;\r\n    }\r\n\r\n    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n    y.s *= x.s;\r\n    xcL = xc.length;\r\n    ycL = yc.length;\r\n\r\n    // Ensure xc points to longer array and xcL to its length.\r\n    if (xcL < ycL) {\r\n      zc = xc;\r\n      xc = yc;\r\n      yc = zc;\r\n      i = xcL;\r\n      xcL = ycL;\r\n      ycL = i;\r\n    }\r\n\r\n    // Initialise the result array with zeros.\r\n    for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n    base = BASE;\r\n    sqrtBase = SQRT_BASE;\r\n\r\n    for (i = ycL; --i >= 0;) {\r\n      c = 0;\r\n      ylo = yc[i] % sqrtBase;\r\n      yhi = yc[i] / sqrtBase | 0;\r\n\r\n      for (k = xcL, j = i + k; j > i;) {\r\n        xlo = xc[--k] % sqrtBase;\r\n        xhi = xc[k] / sqrtBase | 0;\r\n        m = yhi * xlo + xhi * ylo;\r\n        xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n        zc[j--] = xlo % base;\r\n      }\r\n\r\n      zc[j] = c;\r\n    }\r\n\r\n    if (c) {\r\n      ++e;\r\n    } else {\r\n      zc.splice(0, 1);\r\n    }\r\n\r\n    return normalise(y, zc, e);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n   * i.e. multiplied by -1.\r\n   */\r\n  P.negated = function () {\r\n    var x = new BigNumber(this);\r\n    x.s = -x.s || null;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.plus = function (y, b) {\r\n    var t,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n     if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Return ±Infinity if either ±Infinity.\r\n      if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n      // Either zero?\r\n      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--; t.push(0));\r\n      t.reverse();\r\n    }\r\n\r\n    a = xc.length;\r\n    b = yc.length;\r\n\r\n    // Point xc to the longer array, and b to the shorter length.\r\n    if (a - b < 0) {\r\n      t = yc;\r\n      yc = xc;\r\n      xc = t;\r\n      b = a;\r\n    }\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n    for (a = 0; b;) {\r\n      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n    }\r\n\r\n    if (a) {\r\n      xc = [a].concat(xc);\r\n      ++ye;\r\n    }\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    // ye = MAX_EXP + 1 possible\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   * If sd is undefined or null or true or false, return the number of significant digits of\r\n   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   * If sd is true include integer-part trailing zeros in the count.\r\n   *\r\n   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n   *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.precision = P.sd = function (sd, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (sd != null && sd !== !!sd) {\r\n      intCheck(sd, 1, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), sd, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    v = c.length - 1;\r\n    n = v * LOG_BASE + 1;\r\n\r\n    if (v = c[v]) {\r\n\r\n      // Subtract the number of trailing zeros of the last element.\r\n      for (; v % 10 == 0; v /= 10, n--);\r\n\r\n      // Add the number of digits of the first element.\r\n      for (v = c[0]; v >= 10; v /= 10, n++);\r\n    }\r\n\r\n    if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n   *\r\n   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n   */\r\n  P.shiftedBy = function (k) {\r\n    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n    return this.times('1e' + k);\r\n  };\r\n\r\n\r\n  /*\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N) =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I) =  I\r\n   *  sqrt(0) =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, r, rep, t,\r\n      x = this,\r\n      c = x.c,\r\n      s = x.s,\r\n      e = x.e,\r\n      dp = DECIMAL_PLACES + 4,\r\n      half = new BigNumber('0.5');\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !c || !c[0]) {\r\n      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n    }\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+valueOf(x));\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = coeffToString(c);\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(+n);\r\n      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new BigNumber(n);\r\n    } else {\r\n      r = new BigNumber(s + '');\r\n    }\r\n\r\n    // Check for zero.\r\n    // r could be zero if MIN_EXP is changed after the this value was created.\r\n    // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n    // coeffToString to throw.\r\n    if (r.c[0]) {\r\n      e = r.e;\r\n      s = e + dp;\r\n      if (s < 3) s = 0;\r\n\r\n      // Newton-Raphson iteration.\r\n      for (; ;) {\r\n        t = r;\r\n        r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n          // The exponent of r may here be one less than the final result exponent,\r\n          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n          // are indexed correctly.\r\n          if (r.e < e) --s;\r\n          n = n.slice(s - 3, s + 1);\r\n\r\n          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n          // iteration.\r\n          if (n == '9999' || !rep && n == '4999') {\r\n\r\n            // On the first iteration only, check to see if rounding up gives the\r\n            // exact result as the nines may infinitely repeat.\r\n            if (!rep) {\r\n              round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n              if (t.times(t).eq(x)) {\r\n                r = t;\r\n                break;\r\n              }\r\n            }\r\n\r\n            dp += 4;\r\n            s += 4;\r\n            rep = 1;\r\n          } else {\r\n\r\n            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n            // result. If not, then there are further digits and m will be truthy.\r\n            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n              // Truncate to the first rounding digit.\r\n              round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n              m = !r.times(r).eq(x);\r\n            }\r\n\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in exponential notation and\r\n   * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp++;\r\n    }\r\n    return format(this, dp, rm, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n   * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp = dp + this.e + 1;\r\n    }\r\n    return format(this, dp, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n   * of the format or FORMAT object (see BigNumber.set).\r\n   *\r\n   * The formatting object may contain some or all of the properties shown below.\r\n   *\r\n   * FORMAT = {\r\n   *   prefix: '',\r\n   *   groupSize: 3,\r\n   *   secondaryGroupSize: 0,\r\n   *   groupSeparator: ',',\r\n   *   decimalSeparator: '.',\r\n   *   fractionGroupSize: 0,\r\n   *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n   *   suffix: ''\r\n   * };\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   * [format] {object} Formatting options. See FORMAT pbject above.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   * '[BigNumber Error] Argument not an object: {format}'\r\n   */\r\n  P.toFormat = function (dp, rm, format) {\r\n    var str,\r\n      x = this;\r\n\r\n    if (format == null) {\r\n      if (dp != null && rm && typeof rm == 'object') {\r\n        format = rm;\r\n        rm = null;\r\n      } else if (dp && typeof dp == 'object') {\r\n        format = dp;\r\n        dp = rm = null;\r\n      } else {\r\n        format = FORMAT;\r\n      }\r\n    } else if (typeof format != 'object') {\r\n      throw Error\r\n        (bignumberError + 'Argument not an object: ' + format);\r\n    }\r\n\r\n    str = x.toFixed(dp, rm);\r\n\r\n    if (x.c) {\r\n      var i,\r\n        arr = str.split('.'),\r\n        g1 = +format.groupSize,\r\n        g2 = +format.secondaryGroupSize,\r\n        groupSeparator = format.groupSeparator || '',\r\n        intPart = arr[0],\r\n        fractionPart = arr[1],\r\n        isNeg = x.s < 0,\r\n        intDigits = isNeg ? intPart.slice(1) : intPart,\r\n        len = intDigits.length;\r\n\r\n      if (g2) {\r\n        i = g1;\r\n        g1 = g2;\r\n        g2 = i;\r\n        len -= i;\r\n      }\r\n\r\n      if (g1 > 0 && len > 0) {\r\n        i = len % g1 || g1;\r\n        intPart = intDigits.substr(0, i);\r\n        for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n        if (isNeg) intPart = '-' + intPart;\r\n      }\r\n\r\n      str = fractionPart\r\n       ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n        ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n         '$&' + (format.fractionGroupSeparator || ''))\r\n        : fractionPart)\r\n       : intPart;\r\n    }\r\n\r\n    return (format.prefix || '') + str + (format.suffix || '');\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n   * fraction with an integer numerator and an integer denominator.\r\n   * The denominator will be a positive non-zero value less than or equal to the specified\r\n   * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n   * the lowest value necessary to represent the number exactly.\r\n   *\r\n   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n   *\r\n   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n   */\r\n  P.toFraction = function (md) {\r\n    var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n      x = this,\r\n      xc = x.c;\r\n\r\n    if (md != null) {\r\n      n = new BigNumber(md);\r\n\r\n      // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n        throw Error\r\n          (bignumberError + 'Argument ' +\r\n            (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n      }\r\n    }\r\n\r\n    if (!xc) return new BigNumber(x);\r\n\r\n    d = new BigNumber(ONE);\r\n    n1 = d0 = new BigNumber(ONE);\r\n    d1 = n0 = new BigNumber(ONE);\r\n    s = coeffToString(xc);\r\n\r\n    // Determine initial denominator.\r\n    // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n    e = d.e = s.length - x.e - 1;\r\n    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n    exp = MAX_EXP;\r\n    MAX_EXP = 1 / 0;\r\n    n = new BigNumber(s);\r\n\r\n    // n0 = d1 = 0\r\n    n0.c[0] = 0;\r\n\r\n    for (; ;)  {\r\n      q = div(n, d, 0, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.comparedTo(md) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      n1 = n0.plus(q.times(d2 = n1));\r\n      n0 = d2;\r\n      d = n.minus(q.times(d2 = d));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = div(md.minus(d0), d1, 0, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n    e = e * 2;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n    r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n    MAX_EXP = exp;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this BigNumber converted to a number primitive.\r\n   */\r\n  P.toNumber = function () {\r\n    return +valueOf(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n   * necessary to represent the integer part of the value in fixed-point notation, then use\r\n   * exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    if (sd != null) intCheck(sd, 1, MAX);\r\n    return format(this, sd, rm, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n   * TO_EXP_NEG, return exponential notation.\r\n   *\r\n   * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n   *\r\n   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n   */\r\n  P.toString = function (b) {\r\n    var str,\r\n      n = this,\r\n      s = n.s,\r\n      e = n.e;\r\n\r\n    // Infinity or NaN?\r\n    if (e === null) {\r\n      if (s) {\r\n        str = 'Infinity';\r\n        if (s < 0) str = '-' + str;\r\n      } else {\r\n        str = 'NaN';\r\n      }\r\n    } else {\r\n      if (b == null) {\r\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n         ? toExponential(coeffToString(n.c), e)\r\n         : toFixedPoint(coeffToString(n.c), e, '0');\r\n      } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n        n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n        str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n      } else {\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n      }\r\n\r\n      if (s < 0 && n.c[0]) str = '-' + str;\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return as toString, but do not accept a base argument, and include the minus sign for\r\n   * negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    return valueOf(this);\r\n  };\r\n\r\n\r\n  P._isBigNumber = true;\r\n\r\n  P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n  // Node.js v10.12.0+\r\n  P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n\r\n  if (configObject != null) BigNumber.set(configObject);\r\n\r\n  return BigNumber;\r\n}\r\n\r\n\r\n// PRIVATE HELPER FUNCTIONS\r\n\r\n// These functions don't need access to variables,\r\n// e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\nfunction bitFloor(n) {\r\n  var i = n | 0;\r\n  return n > 0 || n === i ? i : i - 1;\r\n}\r\n\r\n\r\n// Return a coefficient array as a string of base 10 digits.\r\nfunction coeffToString(a) {\r\n  var s, z,\r\n    i = 1,\r\n    j = a.length,\r\n    r = a[0] + '';\r\n\r\n  for (; i < j;) {\r\n    s = a[i++] + '';\r\n    z = LOG_BASE - s.length;\r\n    for (; z--; s = '0' + s);\r\n    r += s;\r\n  }\r\n\r\n  // Determine trailing zeros.\r\n  for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n  return r.slice(0, j + 1 || 1);\r\n}\r\n\r\n\r\n// Compare the value of BigNumbers x and y.\r\nfunction compare(x, y) {\r\n  var a, b,\r\n    xc = x.c,\r\n    yc = y.c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either NaN?\r\n  if (!i || !j) return null;\r\n\r\n  a = xc && !xc[0];\r\n  b = yc && !yc[0];\r\n\r\n  // Either zero?\r\n  if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  a = i < 0;\r\n  b = k == l;\r\n\r\n  // Either Infinity?\r\n  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n  // Compare exponents.\r\n  if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n}\r\n\r\n\r\n/*\r\n * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n */\r\nfunction intCheck(n, min, max, name) {\r\n  if (n < min || n > max || n !== mathfloor(n)) {\r\n    throw Error\r\n     (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n       ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n       : ' not a primitive number: ') + String(n));\r\n  }\r\n}\r\n\r\n\r\n// Assumes finite n.\r\nfunction isOdd(n) {\r\n  var k = n.c.length - 1;\r\n  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n}\r\n\r\n\r\nfunction toExponential(str, e) {\r\n  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n   (e < 0 ? 'e' : 'e+') + e;\r\n}\r\n\r\n\r\nfunction toFixedPoint(str, e, z) {\r\n  var len, zs;\r\n\r\n  // Negative exponent?\r\n  if (e < 0) {\r\n\r\n    // Prepend zeros.\r\n    for (zs = z + '.'; ++e; zs += z);\r\n    str = zs + str;\r\n\r\n  // Positive exponent\r\n  } else {\r\n    len = str.length;\r\n\r\n    // Append zeros.\r\n    if (++e > len) {\r\n      for (zs = z, e -= len; --e; zs += z);\r\n      str += zs;\r\n    } else if (e < len) {\r\n      str = str.slice(0, e) + '.' + str.slice(e);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// EXPORT\r\n\r\n\r\nvar BigNumber = clone();\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BigNumber);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/hedera-agent-kit/node_modules/bignumber.js/bignumber.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/hedera-agent-kit/node_modules/long/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/hedera-agent-kit/node_modules/long/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * @license\n * Copyright 2009 The Closure Library Authors\n * Copyright 2020 Daniel Wirtz / The long.js Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// WebAssembly optimizations to do native i64 multiplication and divide\nvar wasm = null;\ntry {\n  wasm = new WebAssembly.Instance(\n    new WebAssembly.Module(\n      new Uint8Array([\n        // \\0asm\n        0, 97, 115, 109,\n        // version 1\n        1, 0, 0, 0,\n\n        // section \"type\"\n        1, 13, 2,\n        // 0, () => i32\n        96, 0, 1, 127,\n        // 1, (i32, i32, i32, i32) => i32\n        96, 4, 127, 127, 127, 127, 1, 127,\n\n        // section \"function\"\n        3, 7, 6,\n        // 0, type 0\n        0,\n        // 1, type 1\n        1,\n        // 2, type 1\n        1,\n        // 3, type 1\n        1,\n        // 4, type 1\n        1,\n        // 5, type 1\n        1,\n\n        // section \"global\"\n        6, 6, 1,\n        // 0, \"high\", mutable i32\n        127, 1, 65, 0, 11,\n\n        // section \"export\"\n        7, 50, 6,\n        // 0, \"mul\"\n        3, 109, 117, 108, 0, 1,\n        // 1, \"div_s\"\n        5, 100, 105, 118, 95, 115, 0, 2,\n        // 2, \"div_u\"\n        5, 100, 105, 118, 95, 117, 0, 3,\n        // 3, \"rem_s\"\n        5, 114, 101, 109, 95, 115, 0, 4,\n        // 4, \"rem_u\"\n        5, 114, 101, 109, 95, 117, 0, 5,\n        // 5, \"get_high\"\n        8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0,\n\n        // section \"code\"\n        10, 191, 1, 6,\n        // 0, \"get_high\"\n        4, 0, 35, 0, 11,\n        // 1, \"mul\"\n        36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32,\n        3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4,\n        167, 11,\n        // 2, \"div_s\"\n        36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32,\n        3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4,\n        167, 11,\n        // 3, \"div_u\"\n        36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32,\n        3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4,\n        167, 11,\n        // 4, \"rem_s\"\n        36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32,\n        3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4,\n        167, 11,\n        // 5, \"rem_u\"\n        36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32,\n        3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4,\n        167, 11,\n      ]),\n    ),\n    {},\n  ).exports;\n} catch {\n  // no wasm support :(\n}\n\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n *  See the from* functions below for more convenient ways of constructing Longs.\n * @exports Long\n * @class A Long class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @constructor\n */\nfunction Long(low, high, unsigned) {\n  /**\n   * The low 32 bits as a signed value.\n   * @type {number}\n   */\n  this.low = low | 0;\n\n  /**\n   * The high 32 bits as a signed value.\n   * @type {number}\n   */\n  this.high = high | 0;\n\n  /**\n   * Whether unsigned or not.\n   * @type {boolean}\n   */\n  this.unsigned = !!unsigned;\n}\n\n// The internal representation of a long is the two given signed, 32-bit values.\n// We use 32-bit pieces because these are the size of integers on which\n// Javascript performs bit-operations.  For operations like addition and\n// multiplication, we split each number into 16 bit pieces, which can easily be\n// multiplied within Javascript's floating-point representation without overflow\n// or change in sign.\n//\n// In the algorithms below, we frequently reduce the negative case to the\n// positive case by negating the input(s) and then post-processing the result.\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n// a positive number, it overflows back into a negative).  Not handling this\n// case would often result in infinite recursion.\n//\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n// methods on which they depend.\n\n/**\n * An indicator used to reliably determine if an object is a Long or not.\n * @type {boolean}\n * @const\n * @private\n */\nLong.prototype.__isLong__;\n\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\n\n/**\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n * @inner\n */\nfunction isLong(obj) {\n  return (obj && obj[\"__isLong__\"]) === true;\n}\n\n/**\n * @function\n * @param {*} value number\n * @returns {number}\n * @inner\n */\nfunction ctz32(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n}\n\n/**\n * Tests if the specified object is a Long.\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n */\nLong.isLong = isLong;\n\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @inner\n */\nvar INT_CACHE = {};\n\n/**\n * A cache of the Long representations of small unsigned integer values.\n * @type {!Object}\n * @inner\n */\nvar UINT_CACHE = {};\n\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromInt(value, unsigned) {\n  var obj, cachedObj, cache;\n  if (unsigned) {\n    value >>>= 0;\n    if ((cache = 0 <= value && value < 256)) {\n      cachedObj = UINT_CACHE[value];\n      if (cachedObj) return cachedObj;\n    }\n    obj = fromBits(value, 0, true);\n    if (cache) UINT_CACHE[value] = obj;\n    return obj;\n  } else {\n    value |= 0;\n    if ((cache = -128 <= value && value < 128)) {\n      cachedObj = INT_CACHE[value];\n      if (cachedObj) return cachedObj;\n    }\n    obj = fromBits(value, value < 0 ? -1 : 0, false);\n    if (cache) INT_CACHE[value] = obj;\n    return obj;\n  }\n}\n\n/**\n * Returns a Long representing the given 32 bit integer value.\n * @function\n * @param {number} value The 32 bit integer in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromInt = fromInt;\n\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromNumber(value, unsigned) {\n  if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  if (unsigned) {\n    if (value < 0) return UZERO;\n    if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n  } else {\n    if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n    if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n  }\n  if (value < 0) return fromNumber(-value, unsigned).neg();\n  return fromBits(\n    value % TWO_PWR_32_DBL | 0,\n    (value / TWO_PWR_32_DBL) | 0,\n    unsigned,\n  );\n}\n\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n * @function\n * @param {number} value The number in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromNumber = fromNumber;\n\n/**\n * @param {number} lowBits\n * @param {number} highBits\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromBits(lowBits, highBits, unsigned) {\n  return new Long(lowBits, highBits, unsigned);\n}\n\n/**\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n *  assumed to use 32 bits.\n * @function\n * @param {number} lowBits The low 32 bits\n * @param {number} highBits The high 32 bits\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromBits = fromBits;\n\n/**\n * @function\n * @param {number} base\n * @param {number} exponent\n * @returns {number}\n * @inner\n */\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n\n/**\n * @param {string} str\n * @param {(boolean|number)=} unsigned\n * @param {number=} radix\n * @returns {!Long}\n * @inner\n */\nfunction fromString(str, unsigned, radix) {\n  if (str.length === 0) throw Error(\"empty string\");\n  if (typeof unsigned === \"number\") {\n    // For goog.math.long compatibility\n    radix = unsigned;\n    unsigned = false;\n  } else {\n    unsigned = !!unsigned;\n  }\n  if (\n    str === \"NaN\" ||\n    str === \"Infinity\" ||\n    str === \"+Infinity\" ||\n    str === \"-Infinity\"\n  )\n    return unsigned ? UZERO : ZERO;\n  radix = radix || 10;\n  if (radix < 2 || 36 < radix) throw RangeError(\"radix\");\n\n  var p;\n  if ((p = str.indexOf(\"-\")) > 0) throw Error(\"interior hyphen\");\n  else if (p === 0) {\n    return fromString(str.substring(1), unsigned, radix).neg();\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = fromNumber(pow_dbl(radix, 8));\n\n  var result = ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i),\n      value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = fromNumber(pow_dbl(radix, size));\n      result = result.mul(power).add(fromNumber(value));\n    } else {\n      result = result.mul(radixToPower);\n      result = result.add(fromNumber(value));\n    }\n  }\n  result.unsigned = unsigned;\n  return result;\n}\n\n/**\n * Returns a Long representation of the given string, written using the specified radix.\n * @function\n * @param {string} str The textual representation of the Long\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n * @returns {!Long} The corresponding Long value\n */\nLong.fromString = fromString;\n\n/**\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromValue(val, unsigned) {\n  if (typeof val === \"number\") return fromNumber(val, unsigned);\n  if (typeof val === \"string\") return fromString(val, unsigned);\n  // Throws for non-objects, converts non-instanceof Long:\n  return fromBits(\n    val.low,\n    val.high,\n    typeof unsigned === \"boolean\" ? unsigned : val.unsigned,\n  );\n}\n\n/**\n * Converts the specified value to a Long using the appropriate from* function for its type.\n * @function\n * @param {!Long|number|bigint|string|!{low: number, high: number, unsigned: boolean}} val Value\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long}\n */\nLong.fromValue = fromValue;\n\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n// no runtime penalty for these.\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n\n/**\n * @type {!Long}\n * @const\n * @inner\n */\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n\n/**\n * @type {!Long}\n * @inner\n */\nvar ZERO = fromInt(0);\n\n/**\n * Signed zero.\n * @type {!Long}\n */\nLong.ZERO = ZERO;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar UZERO = fromInt(0, true);\n\n/**\n * Unsigned zero.\n * @type {!Long}\n */\nLong.UZERO = UZERO;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar ONE = fromInt(1);\n\n/**\n * Signed one.\n * @type {!Long}\n */\nLong.ONE = ONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar UONE = fromInt(1, true);\n\n/**\n * Unsigned one.\n * @type {!Long}\n */\nLong.UONE = UONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar NEG_ONE = fromInt(-1);\n\n/**\n * Signed negative one.\n * @type {!Long}\n */\nLong.NEG_ONE = NEG_ONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MAX_VALUE = fromBits(0xffffffff | 0, 0x7fffffff | 0, false);\n\n/**\n * Maximum signed value.\n * @type {!Long}\n */\nLong.MAX_VALUE = MAX_VALUE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MAX_UNSIGNED_VALUE = fromBits(0xffffffff | 0, 0xffffffff | 0, true);\n\n/**\n * Maximum unsigned value.\n * @type {!Long}\n */\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n\n/**\n * Minimum signed value.\n * @type {!Long}\n */\nLong.MIN_VALUE = MIN_VALUE;\n\n/**\n * @alias Long.prototype\n * @inner\n */\nvar LongPrototype = Long.prototype;\n\n/**\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.toInt = function toInt() {\n  return this.unsigned ? this.low >>> 0 : this.low;\n};\n\n/**\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.toNumber = function toNumber() {\n  if (this.unsigned)\n    return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n  return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n};\n\n/**\n * Converts the Long to a string written in the specified radix.\n * @this {!Long}\n * @param {number=} radix Radix (2-36), defaults to 10\n * @returns {string}\n * @override\n * @throws {RangeError} If `radix` is out of range\n */\nLongPrototype.toString = function toString(radix) {\n  radix = radix || 10;\n  if (radix < 2 || 36 < radix) throw RangeError(\"radix\");\n  if (this.isZero()) return \"0\";\n  if (this.isNegative()) {\n    // Unsigned Longs are never negative\n    if (this.eq(MIN_VALUE)) {\n      // We need to change the Long value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixLong = fromNumber(radix),\n        div = this.div(radixLong),\n        rem1 = div.mul(radixLong).sub(this);\n      return div.toString(radix) + rem1.toInt().toString(radix);\n    } else return \"-\" + this.neg().toString(radix);\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n    rem = this;\n  var result = \"\";\n  while (true) {\n    var remDiv = rem.div(radixToPower),\n      intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n      digits = intval.toString(radix);\n    rem = remDiv;\n    if (rem.isZero()) return digits + result;\n    else {\n      while (digits.length < 6) digits = \"0\" + digits;\n      result = \"\" + digits + result;\n    }\n  }\n};\n\n/**\n * Gets the high 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed high bits\n */\nLongPrototype.getHighBits = function getHighBits() {\n  return this.high;\n};\n\n/**\n * Gets the high 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned high bits\n */\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n  return this.high >>> 0;\n};\n\n/**\n * Gets the low 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed low bits\n */\nLongPrototype.getLowBits = function getLowBits() {\n  return this.low;\n};\n\n/**\n * Gets the low 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned low bits\n */\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n  return this.low >>> 0;\n};\n\n/**\n * Gets the number of bits needed to represent the absolute value of this Long.\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n  if (this.isNegative())\n    // Unsigned Longs are never negative\n    return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n  var val = this.high != 0 ? this.high : this.low;\n  for (var bit = 31; bit > 0; bit--) if ((val & (1 << bit)) != 0) break;\n  return this.high != 0 ? bit + 33 : bit + 1;\n};\n\n/**\n * Tests if this Long can be safely represented as a JavaScript number.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isSafeInteger = function isSafeInteger() {\n  // 2^53-1 is the maximum safe value\n  var top11Bits = this.high >> 21;\n  // [0, 2^53-1]\n  if (!top11Bits) return true;\n  // > 2^53-1\n  if (this.unsigned) return false;\n  // [-2^53, -1] except -2^53\n  return top11Bits === -1 && !(this.low === 0 && this.high === -0x200000);\n};\n\n/**\n * Tests if this Long's value equals zero.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isZero = function isZero() {\n  return this.high === 0 && this.low === 0;\n};\n\n/**\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n * @returns {boolean}\n */\nLongPrototype.eqz = LongPrototype.isZero;\n\n/**\n * Tests if this Long's value is negative.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isNegative = function isNegative() {\n  return !this.unsigned && this.high < 0;\n};\n\n/**\n * Tests if this Long's value is positive or zero.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isPositive = function isPositive() {\n  return this.unsigned || this.high >= 0;\n};\n\n/**\n * Tests if this Long's value is odd.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isOdd = function isOdd() {\n  return (this.low & 1) === 1;\n};\n\n/**\n * Tests if this Long's value is even.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isEven = function isEven() {\n  return (this.low & 1) === 0;\n};\n\n/**\n * Tests if this Long's value equals the specified's.\n * @this {!Long}\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.equals = function equals(other) {\n  if (!isLong(other)) other = fromValue(other);\n  if (\n    this.unsigned !== other.unsigned &&\n    this.high >>> 31 === 1 &&\n    other.high >>> 31 === 1\n  )\n    return false;\n  return this.high === other.high && this.low === other.low;\n};\n\n/**\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n * @function\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.eq = LongPrototype.equals;\n\n/**\n * Tests if this Long's value differs from the specified's.\n * @this {!Long}\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.notEquals = function notEquals(other) {\n  return !this.eq(/* validates */ other);\n};\n\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.neq = LongPrototype.notEquals;\n\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.ne = LongPrototype.notEquals;\n\n/**\n * Tests if this Long's value is less than the specified's.\n * @this {!Long}\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lessThan = function lessThan(other) {\n  return this.comp(/* validates */ other) < 0;\n};\n\n/**\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n * @function\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lt = LongPrototype.lessThan;\n\n/**\n * Tests if this Long's value is less than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n  return this.comp(/* validates */ other) <= 0;\n};\n\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\n\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.le = LongPrototype.lessThanOrEqual;\n\n/**\n * Tests if this Long's value is greater than the specified's.\n * @this {!Long}\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.greaterThan = function greaterThan(other) {\n  return this.comp(/* validates */ other) > 0;\n};\n\n/**\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n * @function\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.gt = LongPrototype.greaterThan;\n\n/**\n * Tests if this Long's value is greater than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n  return this.comp(/* validates */ other) >= 0;\n};\n\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\n\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\n\n/**\n * Compares this Long's value with the specified's.\n * @this {!Long}\n * @param {!Long|number|bigint|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nLongPrototype.compare = function compare(other) {\n  if (!isLong(other)) other = fromValue(other);\n  if (this.eq(other)) return 0;\n  var thisNeg = this.isNegative(),\n    otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg) return -1;\n  if (!thisNeg && otherNeg) return 1;\n  // At this point the sign bits are the same\n  if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1;\n  // Both are positive if at least one is unsigned\n  return other.high >>> 0 > this.high >>> 0 ||\n    (other.high === this.high && other.low >>> 0 > this.low >>> 0)\n    ? -1\n    : 1;\n};\n\n/**\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n * @function\n * @param {!Long|number|bigint|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nLongPrototype.comp = LongPrototype.compare;\n\n/**\n * Negates this Long's value.\n * @this {!Long}\n * @returns {!Long} Negated Long\n */\nLongPrototype.negate = function negate() {\n  if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n  return this.not().add(ONE);\n};\n\n/**\n * Negates this Long's value. This is an alias of {@link Long#negate}.\n * @function\n * @returns {!Long} Negated Long\n */\nLongPrototype.neg = LongPrototype.negate;\n\n/**\n * Returns the sum of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|bigint|string} addend Addend\n * @returns {!Long} Sum\n */\nLongPrototype.add = function add(addend) {\n  if (!isLong(addend)) addend = fromValue(addend);\n\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high >>> 16;\n  var a32 = this.high & 0xffff;\n  var a16 = this.low >>> 16;\n  var a00 = this.low & 0xffff;\n\n  var b48 = addend.high >>> 16;\n  var b32 = addend.high & 0xffff;\n  var b16 = addend.low >>> 16;\n  var b00 = addend.low & 0xffff;\n\n  var c48 = 0,\n    c32 = 0,\n    c16 = 0,\n    c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xffff;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c48 += a48 + b48;\n  c48 &= 0xffff;\n  return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n};\n\n/**\n * Returns the difference of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|bigint|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nLongPrototype.subtract = function subtract(subtrahend) {\n  if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n  return this.add(subtrahend.neg());\n};\n\n/**\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n * @function\n * @param {!Long|number|bigint|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nLongPrototype.sub = LongPrototype.subtract;\n\n/**\n * Returns the product of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|bigint|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nLongPrototype.multiply = function multiply(multiplier) {\n  if (this.isZero()) return this;\n  if (!isLong(multiplier)) multiplier = fromValue(multiplier);\n\n  // use wasm support if present\n  if (wasm) {\n    var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n  if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n  if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n\n  if (this.isNegative()) {\n    if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());\n    else return this.neg().mul(multiplier).neg();\n  } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg();\n\n  // If both longs are small, use float multiplication\n  if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\n    return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\n\n  // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high >>> 16;\n  var a32 = this.high & 0xffff;\n  var a16 = this.low >>> 16;\n  var a00 = this.low & 0xffff;\n\n  var b48 = multiplier.high >>> 16;\n  var b32 = multiplier.high & 0xffff;\n  var b16 = multiplier.low >>> 16;\n  var b00 = multiplier.low & 0xffff;\n\n  var c48 = 0,\n    c32 = 0,\n    c16 = 0,\n    c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xffff;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xffff;\n  return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n};\n\n/**\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n * @function\n * @param {!Long|number|bigint|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nLongPrototype.mul = LongPrototype.multiply;\n\n/**\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\n *  unsigned if this Long is unsigned.\n * @this {!Long}\n * @param {!Long|number|bigint|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nLongPrototype.divide = function divide(divisor) {\n  if (!isLong(divisor)) divisor = fromValue(divisor);\n  if (divisor.isZero()) throw Error(\"division by zero\");\n\n  // use wasm support if present\n  if (wasm) {\n    // guard against signed division overflow: the largest\n    // negative number / -1 would be 1 larger than the largest\n    // positive number, due to two's complement.\n    if (\n      !this.unsigned &&\n      this.high === -0x80000000 &&\n      divisor.low === -1 &&\n      divisor.high === -1\n    ) {\n      // be consistent with non-wasm code path\n      return this;\n    }\n    var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(\n      this.low,\n      this.high,\n      divisor.low,\n      divisor.high,\n    );\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n  var approx, rem, res;\n  if (!this.unsigned) {\n    // This section is only relevant for signed longs and is derived from the\n    // closure library as a whole.\n    if (this.eq(MIN_VALUE)) {\n      if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\n        return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n      else if (divisor.eq(MIN_VALUE)) return ONE;\n      else {\n        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n        var halfThis = this.shr(1);\n        approx = halfThis.div(divisor).shl(1);\n        if (approx.eq(ZERO)) {\n          return divisor.isNegative() ? ONE : NEG_ONE;\n        } else {\n          rem = this.sub(divisor.mul(approx));\n          res = approx.add(rem.div(divisor));\n          return res;\n        }\n      }\n    } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n    if (this.isNegative()) {\n      if (divisor.isNegative()) return this.neg().div(divisor.neg());\n      return this.neg().div(divisor).neg();\n    } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n    res = ZERO;\n  } else {\n    // The algorithm below has not been made for unsigned longs. It's therefore\n    // required to take special care of the MSB prior to running it.\n    if (!divisor.unsigned) divisor = divisor.toUnsigned();\n    if (divisor.gt(this)) return UZERO;\n    if (divisor.gt(this.shru(1)))\n      // 15 >>> 1 = 7 ; with divisor = 8 ; true\n      return UONE;\n    res = UZERO;\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  rem = this;\n  while (rem.gte(divisor)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n      delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n      // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n      approxRem = approxRes.mul(divisor);\n    while (approxRem.isNegative() || approxRem.gt(rem)) {\n      approx -= delta;\n      approxRes = fromNumber(approx, this.unsigned);\n      approxRem = approxRes.mul(divisor);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero()) approxRes = ONE;\n\n    res = res.add(approxRes);\n    rem = rem.sub(approxRem);\n  }\n  return res;\n};\n\n/**\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n * @function\n * @param {!Long|number|bigint|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nLongPrototype.div = LongPrototype.divide;\n\n/**\n * Returns this Long modulo the specified.\n * @this {!Long}\n * @param {!Long|number|bigint|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.modulo = function modulo(divisor) {\n  if (!isLong(divisor)) divisor = fromValue(divisor);\n\n  // use wasm support if present\n  if (wasm) {\n    var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(\n      this.low,\n      this.high,\n      divisor.low,\n      divisor.high,\n    );\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  return this.sub(this.div(divisor).mul(divisor));\n};\n\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|bigint|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.mod = LongPrototype.modulo;\n\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|bigint|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.rem = LongPrototype.modulo;\n\n/**\n * Returns the bitwise NOT of this Long.\n * @this {!Long}\n * @returns {!Long}\n */\nLongPrototype.not = function not() {\n  return fromBits(~this.low, ~this.high, this.unsigned);\n};\n\n/**\n * Returns count leading zeros of this Long.\n * @this {!Long}\n * @returns {!number}\n */\nLongPrototype.countLeadingZeros = function countLeadingZeros() {\n  return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n};\n\n/**\n * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n * @function\n * @param {!Long}\n * @returns {!number}\n */\nLongPrototype.clz = LongPrototype.countLeadingZeros;\n\n/**\n * Returns count trailing zeros of this Long.\n * @this {!Long}\n * @returns {!number}\n */\nLongPrototype.countTrailingZeros = function countTrailingZeros() {\n  return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n};\n\n/**\n * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n * @function\n * @param {!Long}\n * @returns {!number}\n */\nLongPrototype.ctz = LongPrototype.countTrailingZeros;\n\n/**\n * Returns the bitwise AND of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|bigint|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.and = function and(other) {\n  if (!isLong(other)) other = fromValue(other);\n  return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n};\n\n/**\n * Returns the bitwise OR of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|bigint|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.or = function or(other) {\n  if (!isLong(other)) other = fromValue(other);\n  return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n};\n\n/**\n * Returns the bitwise XOR of this Long and the given one.\n * @this {!Long}\n * @param {!Long|number|bigint|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.xor = function xor(other) {\n  if (!isLong(other)) other = fromValue(other);\n  return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n};\n\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  else if (numBits < 32)\n    return fromBits(\n      this.low << numBits,\n      (this.high << numBits) | (this.low >>> (32 - numBits)),\n      this.unsigned,\n    );\n  else return fromBits(0, this.low << (numBits - 32), this.unsigned);\n};\n\n/**\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shl = LongPrototype.shiftLeft;\n\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftRight = function shiftRight(numBits) {\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  else if (numBits < 32)\n    return fromBits(\n      (this.low >>> numBits) | (this.high << (32 - numBits)),\n      this.high >> numBits,\n      this.unsigned,\n    );\n  else\n    return fromBits(\n      this.high >> (numBits - 32),\n      this.high >= 0 ? 0 : -1,\n      this.unsigned,\n    );\n};\n\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shr = LongPrototype.shiftRight;\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits < 32)\n    return fromBits(\n      (this.low >>> numBits) | (this.high << (32 - numBits)),\n      this.high >>> numBits,\n      this.unsigned,\n    );\n  if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n  return fromBits(this.high >>> (numBits - 32), 0, this.unsigned);\n};\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n\n/**\n * Returns this Long with bits rotated to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotateLeft = function rotateLeft(numBits) {\n  var b;\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  if (numBits < 32) {\n    b = 32 - numBits;\n    return fromBits(\n      (this.low << numBits) | (this.high >>> b),\n      (this.high << numBits) | (this.low >>> b),\n      this.unsigned,\n    );\n  }\n  numBits -= 32;\n  b = 32 - numBits;\n  return fromBits(\n    (this.high << numBits) | (this.low >>> b),\n    (this.low << numBits) | (this.high >>> b),\n    this.unsigned,\n  );\n};\n/**\n * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotl = LongPrototype.rotateLeft;\n\n/**\n * Returns this Long with bits rotated to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotateRight = function rotateRight(numBits) {\n  var b;\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  if (numBits < 32) {\n    b = 32 - numBits;\n    return fromBits(\n      (this.high << b) | (this.low >>> numBits),\n      (this.low << b) | (this.high >>> numBits),\n      this.unsigned,\n    );\n  }\n  numBits -= 32;\n  b = 32 - numBits;\n  return fromBits(\n    (this.low << b) | (this.high >>> numBits),\n    (this.high << b) | (this.low >>> numBits),\n    this.unsigned,\n  );\n};\n/**\n * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotr = LongPrototype.rotateRight;\n\n/**\n * Converts this Long to signed.\n * @this {!Long}\n * @returns {!Long} Signed long\n */\nLongPrototype.toSigned = function toSigned() {\n  if (!this.unsigned) return this;\n  return fromBits(this.low, this.high, false);\n};\n\n/**\n * Converts this Long to unsigned.\n * @this {!Long}\n * @returns {!Long} Unsigned long\n */\nLongPrototype.toUnsigned = function toUnsigned() {\n  if (this.unsigned) return this;\n  return fromBits(this.low, this.high, true);\n};\n\n/**\n * Converts this Long to its byte representation.\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @this {!Long}\n * @returns {!Array.<number>} Byte representation\n */\nLongPrototype.toBytes = function toBytes(le) {\n  return le ? this.toBytesLE() : this.toBytesBE();\n};\n\n/**\n * Converts this Long to its little endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Little endian byte representation\n */\nLongPrototype.toBytesLE = function toBytesLE() {\n  var hi = this.high,\n    lo = this.low;\n  return [\n    lo & 0xff,\n    (lo >>> 8) & 0xff,\n    (lo >>> 16) & 0xff,\n    lo >>> 24,\n    hi & 0xff,\n    (hi >>> 8) & 0xff,\n    (hi >>> 16) & 0xff,\n    hi >>> 24,\n  ];\n};\n\n/**\n * Converts this Long to its big endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Big endian byte representation\n */\nLongPrototype.toBytesBE = function toBytesBE() {\n  var hi = this.high,\n    lo = this.low;\n  return [\n    hi >>> 24,\n    (hi >>> 16) & 0xff,\n    (hi >>> 8) & 0xff,\n    hi & 0xff,\n    lo >>> 24,\n    (lo >>> 16) & 0xff,\n    (lo >>> 8) & 0xff,\n    lo & 0xff,\n  ];\n};\n\n/**\n * Creates a Long from its byte representation.\n * @param {!Array.<number>} bytes Byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\n  return le\n    ? Long.fromBytesLE(bytes, unsigned)\n    : Long.fromBytesBE(bytes, unsigned);\n};\n\n/**\n * Creates a Long from its little endian byte representation.\n * @param {!Array.<number>} bytes Little endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n  return new Long(\n    bytes[0] | (bytes[1] << 8) | (bytes[2] << 16) | (bytes[3] << 24),\n    bytes[4] | (bytes[5] << 8) | (bytes[6] << 16) | (bytes[7] << 24),\n    unsigned,\n  );\n};\n\n/**\n * Creates a Long from its big endian byte representation.\n * @param {!Array.<number>} bytes Big endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n  return new Long(\n    (bytes[4] << 24) | (bytes[5] << 16) | (bytes[6] << 8) | bytes[7],\n    (bytes[0] << 24) | (bytes[1] << 16) | (bytes[2] << 8) | bytes[3],\n    unsigned,\n  );\n};\n\n// Support conversion to/from BigInt where available\nif (typeof BigInt === \"function\") {\n  /**\n   * Returns a Long representing the given big integer.\n   * @function\n   * @param {number} value The big integer value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  Long.fromBigInt = function fromBigInt(value, unsigned) {\n    var lowBits = Number(BigInt.asIntN(32, value));\n    var highBits = Number(BigInt.asIntN(32, value >> BigInt(32)));\n    return fromBits(lowBits, highBits, unsigned);\n  };\n\n  // Override\n  Long.fromValue = function fromValueWithBigInt(value, unsigned) {\n    if (typeof value === \"bigint\") return Long.fromBigInt(value, unsigned);\n    return fromValue(value, unsigned);\n  };\n\n  /**\n   * Converts the Long to its big integer representation.\n   * @this {!Long}\n   * @returns {bigint}\n   */\n  LongPrototype.toBigInt = function toBigInt() {\n    var lowBigInt = BigInt(this.low >>> 0);\n    var highBigInt = BigInt(this.unsigned ? this.high >>> 0 : this.high);\n    return (highBigInt << BigInt(32)) | lowBigInt;\n  };\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Long);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/hedera-agent-kit/node_modules/long/index.js\n");

/***/ })

};
;