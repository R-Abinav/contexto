"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@modelcontextprotocol";
exports.ids = ["vendor-chunks/@modelcontextprotocol"];
exports.modules = {

/***/ "(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/server/completable.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@modelcontextprotocol/sdk/dist/esm/server/completable.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Completable: () => (/* binding */ Completable),\n/* harmony export */   McpZodTypeKind: () => (/* binding */ McpZodTypeKind),\n/* harmony export */   completable: () => (/* binding */ completable)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n\nvar McpZodTypeKind;\n(function (McpZodTypeKind) {\n    McpZodTypeKind[\"Completable\"] = \"McpCompletable\";\n})(McpZodTypeKind || (McpZodTypeKind = {}));\nclass Completable extends zod__WEBPACK_IMPORTED_MODULE_0__.ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nCompletable.create = (type, params) => {\n    return new Completable({\n        type,\n        typeName: McpZodTypeKind.Completable,\n        complete: params.complete,\n        ...processCreateParams(params),\n    });\n};\n/**\n * Wraps a Zod type to provide autocompletion capabilities. Useful for, e.g., prompt arguments in MCP.\n */\nfunction completable(schema, complete) {\n    return Completable.create(schema, { ...schema._def, complete });\n}\n// Not sure why this isn't exported from Zod:\n// https://github.com/colinhacks/zod/blob/f7ad26147ba291cb3fb257545972a8e00e767470/src/types.ts#L130\nfunction processCreateParams(params) {\n    if (!params)\n        return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap)\n        return { errorMap: errorMap, description };\n    const customMap = (iss, ctx) => {\n        var _a, _b;\n        const { message } = params;\n        if (iss.code === \"invalid_enum_value\") {\n            return { message: message !== null && message !== void 0 ? message : ctx.defaultError };\n        }\n        if (typeof ctx.data === \"undefined\") {\n            return { message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError };\n        }\n        if (iss.code !== \"invalid_type\")\n            return { message: ctx.defaultError };\n        return { message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\n//# sourceMappingURL=completable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1vZGVsY29udGV4dHByb3RvY29sL3Nkay9kaXN0L2VzbS9zZXJ2ZXIvY29tcGxldGFibGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUErQjtBQUN4QjtBQUNQO0FBQ0E7QUFDQSxDQUFDLHdDQUF3QztBQUNsQywwQkFBMEIsd0NBQU87QUFDeEM7QUFDQSxnQkFBZ0IsTUFBTTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLHdDQUF3QywwQkFBMEI7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSw0REFBNEQ7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGdCQUFnQixVQUFVO0FBQzFCO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2phc2h3YW50aHBlZGRpc2V0dHkvRG9jdW1lbnRzL2V0aGdsb2JhbC9jb250ZXh0by9ub2RlX21vZHVsZXMvQG1vZGVsY29udGV4dHByb3RvY29sL3Nkay9kaXN0L2VzbS9zZXJ2ZXIvY29tcGxldGFibGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgWm9kVHlwZSwgfSBmcm9tIFwiem9kXCI7XG5leHBvcnQgdmFyIE1jcFpvZFR5cGVLaW5kO1xuKGZ1bmN0aW9uIChNY3Bab2RUeXBlS2luZCkge1xuICAgIE1jcFpvZFR5cGVLaW5kW1wiQ29tcGxldGFibGVcIl0gPSBcIk1jcENvbXBsZXRhYmxlXCI7XG59KShNY3Bab2RUeXBlS2luZCB8fCAoTWNwWm9kVHlwZUtpbmQgPSB7fSkpO1xuZXhwb3J0IGNsYXNzIENvbXBsZXRhYmxlIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBjb25zdCBkYXRhID0gY3R4LmRhdGE7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYudHlwZS5fcGFyc2Uoe1xuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgcGFyZW50OiBjdHgsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB1bndyYXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYudHlwZTtcbiAgICB9XG59XG5Db21wbGV0YWJsZS5jcmVhdGUgPSAodHlwZSwgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBDb21wbGV0YWJsZSh7XG4gICAgICAgIHR5cGUsXG4gICAgICAgIHR5cGVOYW1lOiBNY3Bab2RUeXBlS2luZC5Db21wbGV0YWJsZSxcbiAgICAgICAgY29tcGxldGU6IHBhcmFtcy5jb21wbGV0ZSxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbi8qKlxuICogV3JhcHMgYSBab2QgdHlwZSB0byBwcm92aWRlIGF1dG9jb21wbGV0aW9uIGNhcGFiaWxpdGllcy4gVXNlZnVsIGZvciwgZS5nLiwgcHJvbXB0IGFyZ3VtZW50cyBpbiBNQ1AuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21wbGV0YWJsZShzY2hlbWEsIGNvbXBsZXRlKSB7XG4gICAgcmV0dXJuIENvbXBsZXRhYmxlLmNyZWF0ZShzY2hlbWEsIHsgLi4uc2NoZW1hLl9kZWYsIGNvbXBsZXRlIH0pO1xufVxuLy8gTm90IHN1cmUgd2h5IHRoaXMgaXNuJ3QgZXhwb3J0ZWQgZnJvbSBab2Q6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vY29saW5oYWNrcy96b2QvYmxvYi9mN2FkMjYxNDdiYTI5MWNiM2ZiMjU3NTQ1OTcyYThlMDBlNzY3NDcwL3NyYy90eXBlcy50cyNMMTMwXG5mdW5jdGlvbiBwcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcykge1xuICAgIGlmICghcGFyYW1zKVxuICAgICAgICByZXR1cm4ge307XG4gICAgY29uc3QgeyBlcnJvck1hcCwgaW52YWxpZF90eXBlX2Vycm9yLCByZXF1aXJlZF9lcnJvciwgZGVzY3JpcHRpb24gfSA9IHBhcmFtcztcbiAgICBpZiAoZXJyb3JNYXAgJiYgKGludmFsaWRfdHlwZV9lcnJvciB8fCByZXF1aXJlZF9lcnJvcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW4ndCB1c2UgXCJpbnZhbGlkX3R5cGVfZXJyb3JcIiBvciBcInJlcXVpcmVkX2Vycm9yXCIgaW4gY29uanVuY3Rpb24gd2l0aCBjdXN0b20gZXJyb3IgbWFwLmApO1xuICAgIH1cbiAgICBpZiAoZXJyb3JNYXApXG4gICAgICAgIHJldHVybiB7IGVycm9yTWFwOiBlcnJvck1hcCwgZGVzY3JpcHRpb24gfTtcbiAgICBjb25zdCBjdXN0b21NYXAgPSAoaXNzLCBjdHgpID0+IHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgY29uc3QgeyBtZXNzYWdlIH0gPSBwYXJhbXM7XG4gICAgICAgIGlmIChpc3MuY29kZSA9PT0gXCJpbnZhbGlkX2VudW1fdmFsdWVcIikge1xuICAgICAgICAgICAgcmV0dXJuIHsgbWVzc2FnZTogbWVzc2FnZSAhPT0gbnVsbCAmJiBtZXNzYWdlICE9PSB2b2lkIDAgPyBtZXNzYWdlIDogY3R4LmRlZmF1bHRFcnJvciB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgY3R4LmRhdGEgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB7IG1lc3NhZ2U6IChfYSA9IG1lc3NhZ2UgIT09IG51bGwgJiYgbWVzc2FnZSAhPT0gdm9pZCAwID8gbWVzc2FnZSA6IHJlcXVpcmVkX2Vycm9yKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBjdHguZGVmYXVsdEVycm9yIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzcy5jb2RlICE9PSBcImludmFsaWRfdHlwZVwiKVxuICAgICAgICAgICAgcmV0dXJuIHsgbWVzc2FnZTogY3R4LmRlZmF1bHRFcnJvciB9O1xuICAgICAgICByZXR1cm4geyBtZXNzYWdlOiAoX2IgPSBtZXNzYWdlICE9PSBudWxsICYmIG1lc3NhZ2UgIT09IHZvaWQgMCA/IG1lc3NhZ2UgOiBpbnZhbGlkX3R5cGVfZXJyb3IpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IGN0eC5kZWZhdWx0RXJyb3IgfTtcbiAgICB9O1xuICAgIHJldHVybiB7IGVycm9yTWFwOiBjdXN0b21NYXAsIGRlc2NyaXB0aW9uIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wbGV0YWJsZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/server/completable.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/server/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@modelcontextprotocol/sdk/dist/esm/server/index.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Server: () => (/* binding */ Server)\n/* harmony export */ });\n/* harmony import */ var _shared_protocol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/protocol.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/protocol.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/types.js\");\n/* harmony import */ var ajv__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ajv */ \"(rsc)/./node_modules/ajv/lib/ajv.js\");\n\n\n\n/**\n * An MCP server on top of a pluggable transport.\n *\n * This server will automatically respond to the initialization flow as initiated from the client.\n *\n * To use with custom types, extend the base Request/Notification/Result types and pass them as type parameters:\n *\n * ```typescript\n * // Custom schemas\n * const CustomRequestSchema = RequestSchema.extend({...})\n * const CustomNotificationSchema = NotificationSchema.extend({...})\n * const CustomResultSchema = ResultSchema.extend({...})\n *\n * // Type aliases\n * type CustomRequest = z.infer<typeof CustomRequestSchema>\n * type CustomNotification = z.infer<typeof CustomNotificationSchema>\n * type CustomResult = z.infer<typeof CustomResultSchema>\n *\n * // Create typed server\n * const server = new Server<CustomRequest, CustomNotification, CustomResult>({\n *   name: \"CustomServer\",\n *   version: \"1.0.0\"\n * })\n * ```\n */\nclass Server extends _shared_protocol_js__WEBPACK_IMPORTED_MODULE_0__.Protocol {\n    /**\n     * Initializes this server with the given name and version information.\n     */\n    constructor(_serverInfo, options) {\n        var _a;\n        super(options);\n        this._serverInfo = _serverInfo;\n        // Map log levels by session id\n        this._loggingLevels = new Map();\n        // Map LogLevelSchema to severity index\n        this.LOG_LEVEL_SEVERITY = new Map(_types_js__WEBPACK_IMPORTED_MODULE_1__.LoggingLevelSchema.options.map((level, index) => [level, index]));\n        // Is a message with the given level ignored in the log level set for the given session id?\n        this.isMessageIgnored = (level, sessionId) => {\n            const currentLevel = this._loggingLevels.get(sessionId);\n            return (currentLevel)\n                ? this.LOG_LEVEL_SEVERITY.get(level) < this.LOG_LEVEL_SEVERITY.get(currentLevel)\n                : false;\n        };\n        this._capabilities = (_a = options === null || options === void 0 ? void 0 : options.capabilities) !== null && _a !== void 0 ? _a : {};\n        this._instructions = options === null || options === void 0 ? void 0 : options.instructions;\n        this.setRequestHandler(_types_js__WEBPACK_IMPORTED_MODULE_1__.InitializeRequestSchema, (request) => this._oninitialize(request));\n        this.setNotificationHandler(_types_js__WEBPACK_IMPORTED_MODULE_1__.InitializedNotificationSchema, () => { var _a; return (_a = this.oninitialized) === null || _a === void 0 ? void 0 : _a.call(this); });\n        if (this._capabilities.logging) {\n            this.setRequestHandler(_types_js__WEBPACK_IMPORTED_MODULE_1__.SetLevelRequestSchema, async (request, extra) => {\n                var _a;\n                const transportSessionId = extra.sessionId || ((_a = extra.requestInfo) === null || _a === void 0 ? void 0 : _a.headers['mcp-session-id']) || undefined;\n                const { level } = request.params;\n                const parseResult = _types_js__WEBPACK_IMPORTED_MODULE_1__.LoggingLevelSchema.safeParse(level);\n                if (parseResult.success) {\n                    this._loggingLevels.set(transportSessionId, parseResult.data);\n                }\n                return {};\n            });\n        }\n    }\n    /**\n     * Registers new capabilities. This can only be called before connecting to a transport.\n     *\n     * The new capabilities will be merged with any existing capabilities previously given (e.g., at initialization).\n     */\n    registerCapabilities(capabilities) {\n        if (this.transport) {\n            throw new Error(\"Cannot register capabilities after connecting to transport\");\n        }\n        this._capabilities = (0,_shared_protocol_js__WEBPACK_IMPORTED_MODULE_0__.mergeCapabilities)(this._capabilities, capabilities);\n    }\n    assertCapabilityForMethod(method) {\n        var _a, _b, _c;\n        switch (method) {\n            case \"sampling/createMessage\":\n                if (!((_a = this._clientCapabilities) === null || _a === void 0 ? void 0 : _a.sampling)) {\n                    throw new Error(`Client does not support sampling (required for ${method})`);\n                }\n                break;\n            case \"elicitation/create\":\n                if (!((_b = this._clientCapabilities) === null || _b === void 0 ? void 0 : _b.elicitation)) {\n                    throw new Error(`Client does not support elicitation (required for ${method})`);\n                }\n                break;\n            case \"roots/list\":\n                if (!((_c = this._clientCapabilities) === null || _c === void 0 ? void 0 : _c.roots)) {\n                    throw new Error(`Client does not support listing roots (required for ${method})`);\n                }\n                break;\n            case \"ping\":\n                // No specific capability required for ping\n                break;\n        }\n    }\n    assertNotificationCapability(method) {\n        switch (method) {\n            case \"notifications/message\":\n                if (!this._capabilities.logging) {\n                    throw new Error(`Server does not support logging (required for ${method})`);\n                }\n                break;\n            case \"notifications/resources/updated\":\n            case \"notifications/resources/list_changed\":\n                if (!this._capabilities.resources) {\n                    throw new Error(`Server does not support notifying about resources (required for ${method})`);\n                }\n                break;\n            case \"notifications/tools/list_changed\":\n                if (!this._capabilities.tools) {\n                    throw new Error(`Server does not support notifying of tool list changes (required for ${method})`);\n                }\n                break;\n            case \"notifications/prompts/list_changed\":\n                if (!this._capabilities.prompts) {\n                    throw new Error(`Server does not support notifying of prompt list changes (required for ${method})`);\n                }\n                break;\n            case \"notifications/cancelled\":\n                // Cancellation notifications are always allowed\n                break;\n            case \"notifications/progress\":\n                // Progress notifications are always allowed\n                break;\n        }\n    }\n    assertRequestHandlerCapability(method) {\n        switch (method) {\n            case \"sampling/createMessage\":\n                if (!this._capabilities.sampling) {\n                    throw new Error(`Server does not support sampling (required for ${method})`);\n                }\n                break;\n            case \"logging/setLevel\":\n                if (!this._capabilities.logging) {\n                    throw new Error(`Server does not support logging (required for ${method})`);\n                }\n                break;\n            case \"prompts/get\":\n            case \"prompts/list\":\n                if (!this._capabilities.prompts) {\n                    throw new Error(`Server does not support prompts (required for ${method})`);\n                }\n                break;\n            case \"resources/list\":\n            case \"resources/templates/list\":\n            case \"resources/read\":\n                if (!this._capabilities.resources) {\n                    throw new Error(`Server does not support resources (required for ${method})`);\n                }\n                break;\n            case \"tools/call\":\n            case \"tools/list\":\n                if (!this._capabilities.tools) {\n                    throw new Error(`Server does not support tools (required for ${method})`);\n                }\n                break;\n            case \"ping\":\n            case \"initialize\":\n                // No specific capability required for these methods\n                break;\n        }\n    }\n    async _oninitialize(request) {\n        const requestedVersion = request.params.protocolVersion;\n        this._clientCapabilities = request.params.capabilities;\n        this._clientVersion = request.params.clientInfo;\n        const protocolVersion = _types_js__WEBPACK_IMPORTED_MODULE_1__.SUPPORTED_PROTOCOL_VERSIONS.includes(requestedVersion)\n            ? requestedVersion\n            : _types_js__WEBPACK_IMPORTED_MODULE_1__.LATEST_PROTOCOL_VERSION;\n        return {\n            protocolVersion,\n            capabilities: this.getCapabilities(),\n            serverInfo: this._serverInfo,\n            ...(this._instructions && { instructions: this._instructions }),\n        };\n    }\n    /**\n     * After initialization has completed, this will be populated with the client's reported capabilities.\n     */\n    getClientCapabilities() {\n        return this._clientCapabilities;\n    }\n    /**\n     * After initialization has completed, this will be populated with information about the client's name and version.\n     */\n    getClientVersion() {\n        return this._clientVersion;\n    }\n    getCapabilities() {\n        return this._capabilities;\n    }\n    async ping() {\n        return this.request({ method: \"ping\" }, _types_js__WEBPACK_IMPORTED_MODULE_1__.EmptyResultSchema);\n    }\n    async createMessage(params, options) {\n        return this.request({ method: \"sampling/createMessage\", params }, _types_js__WEBPACK_IMPORTED_MODULE_1__.CreateMessageResultSchema, options);\n    }\n    async elicitInput(params, options) {\n        const result = await this.request({ method: \"elicitation/create\", params }, _types_js__WEBPACK_IMPORTED_MODULE_1__.ElicitResultSchema, options);\n        // Validate the response content against the requested schema if action is \"accept\"\n        if (result.action === \"accept\" && result.content) {\n            try {\n                const ajv = new ajv__WEBPACK_IMPORTED_MODULE_2__();\n                const validate = ajv.compile(params.requestedSchema);\n                const isValid = validate(result.content);\n                if (!isValid) {\n                    throw new _types_js__WEBPACK_IMPORTED_MODULE_1__.McpError(_types_js__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.InvalidParams, `Elicitation response content does not match requested schema: ${ajv.errorsText(validate.errors)}`);\n                }\n            }\n            catch (error) {\n                if (error instanceof _types_js__WEBPACK_IMPORTED_MODULE_1__.McpError) {\n                    throw error;\n                }\n                throw new _types_js__WEBPACK_IMPORTED_MODULE_1__.McpError(_types_js__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.InternalError, `Error validating elicitation response: ${error}`);\n            }\n        }\n        return result;\n    }\n    async listRoots(params, options) {\n        return this.request({ method: \"roots/list\", params }, _types_js__WEBPACK_IMPORTED_MODULE_1__.ListRootsResultSchema, options);\n    }\n    /**\n     * Sends a logging message to the client, if connected.\n     * Note: You only need to send the parameters object, not the entire JSON RPC message\n     * @see LoggingMessageNotification\n     * @param params\n     * @param sessionId optional for stateless and backward compatibility\n     */\n    async sendLoggingMessage(params, sessionId) {\n        if (this._capabilities.logging) {\n            if (!this.isMessageIgnored(params.level, sessionId)) {\n                return this.notification({ method: \"notifications/message\", params });\n            }\n        }\n    }\n    async sendResourceUpdated(params) {\n        return this.notification({\n            method: \"notifications/resources/updated\",\n            params,\n        });\n    }\n    async sendResourceListChanged() {\n        return this.notification({\n            method: \"notifications/resources/list_changed\",\n        });\n    }\n    async sendToolListChanged() {\n        return this.notification({ method: \"notifications/tools/list_changed\" });\n    }\n    async sendPromptListChanged() {\n        return this.notification({ method: \"notifications/prompts/list_changed\" });\n    }\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/server/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/server/mcp.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@modelcontextprotocol/sdk/dist/esm/server/mcp.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   McpServer: () => (/* binding */ McpServer),\n/* harmony export */   ResourceTemplate: () => (/* binding */ ResourceTemplate)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/server/index.js\");\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod-to-json-schema */ \"(rsc)/./node_modules/zod-to-json-schema/dist/esm/index.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/types.js\");\n/* harmony import */ var _completable_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./completable.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/server/completable.js\");\n/* harmony import */ var _shared_uriTemplate_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/uriTemplate.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/uriTemplate.js\");\n\n\n\n\n\n\n/**\n * High-level MCP server that provides a simpler API for working with resources, tools, and prompts.\n * For advanced usage (like sending notifications or setting custom request handlers), use the underlying\n * Server instance available via the `server` property.\n */\nclass McpServer {\n    constructor(serverInfo, options) {\n        this._registeredResources = {};\n        this._registeredResourceTemplates = {};\n        this._registeredTools = {};\n        this._registeredPrompts = {};\n        this._toolHandlersInitialized = false;\n        this._completionHandlerInitialized = false;\n        this._resourceHandlersInitialized = false;\n        this._promptHandlersInitialized = false;\n        this.server = new _index_js__WEBPACK_IMPORTED_MODULE_0__.Server(serverInfo, options);\n    }\n    /**\n     * Attaches to the given transport, starts it, and starts listening for messages.\n     *\n     * The `server` object assumes ownership of the Transport, replacing any callbacks that have already been set, and expects that it is the only user of the Transport instance going forward.\n     */\n    async connect(transport) {\n        return await this.server.connect(transport);\n    }\n    /**\n     * Closes the connection.\n     */\n    async close() {\n        await this.server.close();\n    }\n    setToolRequestHandlers() {\n        if (this._toolHandlersInitialized) {\n            return;\n        }\n        this.server.assertCanSetRequestHandler(_types_js__WEBPACK_IMPORTED_MODULE_2__.ListToolsRequestSchema.shape.method.value);\n        this.server.assertCanSetRequestHandler(_types_js__WEBPACK_IMPORTED_MODULE_2__.CallToolRequestSchema.shape.method.value);\n        this.server.registerCapabilities({\n            tools: {\n                listChanged: true\n            }\n        });\n        this.server.setRequestHandler(_types_js__WEBPACK_IMPORTED_MODULE_2__.ListToolsRequestSchema, () => ({\n            tools: Object.entries(this._registeredTools).filter(([, tool]) => tool.enabled).map(([name, tool]) => {\n                const toolDefinition = {\n                    name,\n                    title: tool.title,\n                    description: tool.description,\n                    inputSchema: tool.inputSchema\n                        ? (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_1__.zodToJsonSchema)(tool.inputSchema, {\n                            strictUnions: true,\n                        })\n                        : EMPTY_OBJECT_JSON_SCHEMA,\n                    annotations: tool.annotations,\n                    _meta: tool._meta,\n                };\n                if (tool.outputSchema) {\n                    toolDefinition.outputSchema = (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_1__.zodToJsonSchema)(tool.outputSchema, { strictUnions: true });\n                }\n                return toolDefinition;\n            }),\n        }));\n        this.server.setRequestHandler(_types_js__WEBPACK_IMPORTED_MODULE_2__.CallToolRequestSchema, async (request, extra) => {\n            const tool = this._registeredTools[request.params.name];\n            if (!tool) {\n                throw new _types_js__WEBPACK_IMPORTED_MODULE_2__.McpError(_types_js__WEBPACK_IMPORTED_MODULE_2__.ErrorCode.InvalidParams, `Tool ${request.params.name} not found`);\n            }\n            if (!tool.enabled) {\n                throw new _types_js__WEBPACK_IMPORTED_MODULE_2__.McpError(_types_js__WEBPACK_IMPORTED_MODULE_2__.ErrorCode.InvalidParams, `Tool ${request.params.name} disabled`);\n            }\n            let result;\n            if (tool.inputSchema) {\n                const parseResult = await tool.inputSchema.safeParseAsync(request.params.arguments);\n                if (!parseResult.success) {\n                    throw new _types_js__WEBPACK_IMPORTED_MODULE_2__.McpError(_types_js__WEBPACK_IMPORTED_MODULE_2__.ErrorCode.InvalidParams, `Invalid arguments for tool ${request.params.name}: ${parseResult.error.message}`);\n                }\n                const args = parseResult.data;\n                const cb = tool.callback;\n                try {\n                    result = await Promise.resolve(cb(args, extra));\n                }\n                catch (error) {\n                    result = {\n                        content: [\n                            {\n                                type: \"text\",\n                                text: error instanceof Error ? error.message : String(error),\n                            },\n                        ],\n                        isError: true,\n                    };\n                }\n            }\n            else {\n                const cb = tool.callback;\n                try {\n                    result = await Promise.resolve(cb(extra));\n                }\n                catch (error) {\n                    result = {\n                        content: [\n                            {\n                                type: \"text\",\n                                text: error instanceof Error ? error.message : String(error),\n                            },\n                        ],\n                        isError: true,\n                    };\n                }\n            }\n            if (tool.outputSchema && !result.isError) {\n                if (!result.structuredContent) {\n                    throw new _types_js__WEBPACK_IMPORTED_MODULE_2__.McpError(_types_js__WEBPACK_IMPORTED_MODULE_2__.ErrorCode.InvalidParams, `Tool ${request.params.name} has an output schema but no structured content was provided`);\n                }\n                // if the tool has an output schema, validate structured content\n                const parseResult = await tool.outputSchema.safeParseAsync(result.structuredContent);\n                if (!parseResult.success) {\n                    throw new _types_js__WEBPACK_IMPORTED_MODULE_2__.McpError(_types_js__WEBPACK_IMPORTED_MODULE_2__.ErrorCode.InvalidParams, `Invalid structured content for tool ${request.params.name}: ${parseResult.error.message}`);\n                }\n            }\n            return result;\n        });\n        this._toolHandlersInitialized = true;\n    }\n    setCompletionRequestHandler() {\n        if (this._completionHandlerInitialized) {\n            return;\n        }\n        this.server.assertCanSetRequestHandler(_types_js__WEBPACK_IMPORTED_MODULE_2__.CompleteRequestSchema.shape.method.value);\n        this.server.registerCapabilities({\n            completions: {},\n        });\n        this.server.setRequestHandler(_types_js__WEBPACK_IMPORTED_MODULE_2__.CompleteRequestSchema, async (request) => {\n            switch (request.params.ref.type) {\n                case \"ref/prompt\":\n                    return this.handlePromptCompletion(request, request.params.ref);\n                case \"ref/resource\":\n                    return this.handleResourceCompletion(request, request.params.ref);\n                default:\n                    throw new _types_js__WEBPACK_IMPORTED_MODULE_2__.McpError(_types_js__WEBPACK_IMPORTED_MODULE_2__.ErrorCode.InvalidParams, `Invalid completion reference: ${request.params.ref}`);\n            }\n        });\n        this._completionHandlerInitialized = true;\n    }\n    async handlePromptCompletion(request, ref) {\n        const prompt = this._registeredPrompts[ref.name];\n        if (!prompt) {\n            throw new _types_js__WEBPACK_IMPORTED_MODULE_2__.McpError(_types_js__WEBPACK_IMPORTED_MODULE_2__.ErrorCode.InvalidParams, `Prompt ${ref.name} not found`);\n        }\n        if (!prompt.enabled) {\n            throw new _types_js__WEBPACK_IMPORTED_MODULE_2__.McpError(_types_js__WEBPACK_IMPORTED_MODULE_2__.ErrorCode.InvalidParams, `Prompt ${ref.name} disabled`);\n        }\n        if (!prompt.argsSchema) {\n            return EMPTY_COMPLETION_RESULT;\n        }\n        const field = prompt.argsSchema.shape[request.params.argument.name];\n        if (!(field instanceof _completable_js__WEBPACK_IMPORTED_MODULE_3__.Completable)) {\n            return EMPTY_COMPLETION_RESULT;\n        }\n        const def = field._def;\n        const suggestions = await def.complete(request.params.argument.value, request.params.context);\n        return createCompletionResult(suggestions);\n    }\n    async handleResourceCompletion(request, ref) {\n        const template = Object.values(this._registeredResourceTemplates).find((t) => t.resourceTemplate.uriTemplate.toString() === ref.uri);\n        if (!template) {\n            if (this._registeredResources[ref.uri]) {\n                // Attempting to autocomplete a fixed resource URI is not an error in the spec (but probably should be).\n                return EMPTY_COMPLETION_RESULT;\n            }\n            throw new _types_js__WEBPACK_IMPORTED_MODULE_2__.McpError(_types_js__WEBPACK_IMPORTED_MODULE_2__.ErrorCode.InvalidParams, `Resource template ${request.params.ref.uri} not found`);\n        }\n        const completer = template.resourceTemplate.completeCallback(request.params.argument.name);\n        if (!completer) {\n            return EMPTY_COMPLETION_RESULT;\n        }\n        const suggestions = await completer(request.params.argument.value, request.params.context);\n        return createCompletionResult(suggestions);\n    }\n    setResourceRequestHandlers() {\n        if (this._resourceHandlersInitialized) {\n            return;\n        }\n        this.server.assertCanSetRequestHandler(_types_js__WEBPACK_IMPORTED_MODULE_2__.ListResourcesRequestSchema.shape.method.value);\n        this.server.assertCanSetRequestHandler(_types_js__WEBPACK_IMPORTED_MODULE_2__.ListResourceTemplatesRequestSchema.shape.method.value);\n        this.server.assertCanSetRequestHandler(_types_js__WEBPACK_IMPORTED_MODULE_2__.ReadResourceRequestSchema.shape.method.value);\n        this.server.registerCapabilities({\n            resources: {\n                listChanged: true\n            }\n        });\n        this.server.setRequestHandler(_types_js__WEBPACK_IMPORTED_MODULE_2__.ListResourcesRequestSchema, async (request, extra) => {\n            const resources = Object.entries(this._registeredResources).filter(([_, resource]) => resource.enabled).map(([uri, resource]) => ({\n                uri,\n                name: resource.name,\n                ...resource.metadata,\n            }));\n            const templateResources = [];\n            for (const template of Object.values(this._registeredResourceTemplates)) {\n                if (!template.resourceTemplate.listCallback) {\n                    continue;\n                }\n                const result = await template.resourceTemplate.listCallback(extra);\n                for (const resource of result.resources) {\n                    templateResources.push({\n                        ...template.metadata,\n                        // the defined resource metadata should override the template metadata if present\n                        ...resource,\n                    });\n                }\n            }\n            return { resources: [...resources, ...templateResources] };\n        });\n        this.server.setRequestHandler(_types_js__WEBPACK_IMPORTED_MODULE_2__.ListResourceTemplatesRequestSchema, async () => {\n            const resourceTemplates = Object.entries(this._registeredResourceTemplates).map(([name, template]) => ({\n                name,\n                uriTemplate: template.resourceTemplate.uriTemplate.toString(),\n                ...template.metadata,\n            }));\n            return { resourceTemplates };\n        });\n        this.server.setRequestHandler(_types_js__WEBPACK_IMPORTED_MODULE_2__.ReadResourceRequestSchema, async (request, extra) => {\n            const uri = new URL(request.params.uri);\n            // First check for exact resource match\n            const resource = this._registeredResources[uri.toString()];\n            if (resource) {\n                if (!resource.enabled) {\n                    throw new _types_js__WEBPACK_IMPORTED_MODULE_2__.McpError(_types_js__WEBPACK_IMPORTED_MODULE_2__.ErrorCode.InvalidParams, `Resource ${uri} disabled`);\n                }\n                return resource.readCallback(uri, extra);\n            }\n            // Then check templates\n            for (const template of Object.values(this._registeredResourceTemplates)) {\n                const variables = template.resourceTemplate.uriTemplate.match(uri.toString());\n                if (variables) {\n                    return template.readCallback(uri, variables, extra);\n                }\n            }\n            throw new _types_js__WEBPACK_IMPORTED_MODULE_2__.McpError(_types_js__WEBPACK_IMPORTED_MODULE_2__.ErrorCode.InvalidParams, `Resource ${uri} not found`);\n        });\n        this.setCompletionRequestHandler();\n        this._resourceHandlersInitialized = true;\n    }\n    setPromptRequestHandlers() {\n        if (this._promptHandlersInitialized) {\n            return;\n        }\n        this.server.assertCanSetRequestHandler(_types_js__WEBPACK_IMPORTED_MODULE_2__.ListPromptsRequestSchema.shape.method.value);\n        this.server.assertCanSetRequestHandler(_types_js__WEBPACK_IMPORTED_MODULE_2__.GetPromptRequestSchema.shape.method.value);\n        this.server.registerCapabilities({\n            prompts: {\n                listChanged: true\n            }\n        });\n        this.server.setRequestHandler(_types_js__WEBPACK_IMPORTED_MODULE_2__.ListPromptsRequestSchema, () => ({\n            prompts: Object.entries(this._registeredPrompts).filter(([, prompt]) => prompt.enabled).map(([name, prompt]) => {\n                return {\n                    name,\n                    title: prompt.title,\n                    description: prompt.description,\n                    arguments: prompt.argsSchema\n                        ? promptArgumentsFromSchema(prompt.argsSchema)\n                        : undefined,\n                };\n            }),\n        }));\n        this.server.setRequestHandler(_types_js__WEBPACK_IMPORTED_MODULE_2__.GetPromptRequestSchema, async (request, extra) => {\n            const prompt = this._registeredPrompts[request.params.name];\n            if (!prompt) {\n                throw new _types_js__WEBPACK_IMPORTED_MODULE_2__.McpError(_types_js__WEBPACK_IMPORTED_MODULE_2__.ErrorCode.InvalidParams, `Prompt ${request.params.name} not found`);\n            }\n            if (!prompt.enabled) {\n                throw new _types_js__WEBPACK_IMPORTED_MODULE_2__.McpError(_types_js__WEBPACK_IMPORTED_MODULE_2__.ErrorCode.InvalidParams, `Prompt ${request.params.name} disabled`);\n            }\n            if (prompt.argsSchema) {\n                const parseResult = await prompt.argsSchema.safeParseAsync(request.params.arguments);\n                if (!parseResult.success) {\n                    throw new _types_js__WEBPACK_IMPORTED_MODULE_2__.McpError(_types_js__WEBPACK_IMPORTED_MODULE_2__.ErrorCode.InvalidParams, `Invalid arguments for prompt ${request.params.name}: ${parseResult.error.message}`);\n                }\n                const args = parseResult.data;\n                const cb = prompt.callback;\n                return await Promise.resolve(cb(args, extra));\n            }\n            else {\n                const cb = prompt.callback;\n                return await Promise.resolve(cb(extra));\n            }\n        });\n        this.setCompletionRequestHandler();\n        this._promptHandlersInitialized = true;\n    }\n    resource(name, uriOrTemplate, ...rest) {\n        let metadata;\n        if (typeof rest[0] === \"object\") {\n            metadata = rest.shift();\n        }\n        const readCallback = rest[0];\n        if (typeof uriOrTemplate === \"string\") {\n            if (this._registeredResources[uriOrTemplate]) {\n                throw new Error(`Resource ${uriOrTemplate} is already registered`);\n            }\n            const registeredResource = this._createRegisteredResource(name, undefined, uriOrTemplate, metadata, readCallback);\n            this.setResourceRequestHandlers();\n            this.sendResourceListChanged();\n            return registeredResource;\n        }\n        else {\n            if (this._registeredResourceTemplates[name]) {\n                throw new Error(`Resource template ${name} is already registered`);\n            }\n            const registeredResourceTemplate = this._createRegisteredResourceTemplate(name, undefined, uriOrTemplate, metadata, readCallback);\n            this.setResourceRequestHandlers();\n            this.sendResourceListChanged();\n            return registeredResourceTemplate;\n        }\n    }\n    registerResource(name, uriOrTemplate, config, readCallback) {\n        if (typeof uriOrTemplate === \"string\") {\n            if (this._registeredResources[uriOrTemplate]) {\n                throw new Error(`Resource ${uriOrTemplate} is already registered`);\n            }\n            const registeredResource = this._createRegisteredResource(name, config.title, uriOrTemplate, config, readCallback);\n            this.setResourceRequestHandlers();\n            this.sendResourceListChanged();\n            return registeredResource;\n        }\n        else {\n            if (this._registeredResourceTemplates[name]) {\n                throw new Error(`Resource template ${name} is already registered`);\n            }\n            const registeredResourceTemplate = this._createRegisteredResourceTemplate(name, config.title, uriOrTemplate, config, readCallback);\n            this.setResourceRequestHandlers();\n            this.sendResourceListChanged();\n            return registeredResourceTemplate;\n        }\n    }\n    _createRegisteredResource(name, title, uri, metadata, readCallback) {\n        const registeredResource = {\n            name,\n            title,\n            metadata,\n            readCallback,\n            enabled: true,\n            disable: () => registeredResource.update({ enabled: false }),\n            enable: () => registeredResource.update({ enabled: true }),\n            remove: () => registeredResource.update({ uri: null }),\n            update: (updates) => {\n                if (typeof updates.uri !== \"undefined\" && updates.uri !== uri) {\n                    delete this._registeredResources[uri];\n                    if (updates.uri)\n                        this._registeredResources[updates.uri] = registeredResource;\n                }\n                if (typeof updates.name !== \"undefined\")\n                    registeredResource.name = updates.name;\n                if (typeof updates.title !== \"undefined\")\n                    registeredResource.title = updates.title;\n                if (typeof updates.metadata !== \"undefined\")\n                    registeredResource.metadata = updates.metadata;\n                if (typeof updates.callback !== \"undefined\")\n                    registeredResource.readCallback = updates.callback;\n                if (typeof updates.enabled !== \"undefined\")\n                    registeredResource.enabled = updates.enabled;\n                this.sendResourceListChanged();\n            },\n        };\n        this._registeredResources[uri] = registeredResource;\n        return registeredResource;\n    }\n    _createRegisteredResourceTemplate(name, title, template, metadata, readCallback) {\n        const registeredResourceTemplate = {\n            resourceTemplate: template,\n            title,\n            metadata,\n            readCallback,\n            enabled: true,\n            disable: () => registeredResourceTemplate.update({ enabled: false }),\n            enable: () => registeredResourceTemplate.update({ enabled: true }),\n            remove: () => registeredResourceTemplate.update({ name: null }),\n            update: (updates) => {\n                if (typeof updates.name !== \"undefined\" && updates.name !== name) {\n                    delete this._registeredResourceTemplates[name];\n                    if (updates.name)\n                        this._registeredResourceTemplates[updates.name] = registeredResourceTemplate;\n                }\n                if (typeof updates.title !== \"undefined\")\n                    registeredResourceTemplate.title = updates.title;\n                if (typeof updates.template !== \"undefined\")\n                    registeredResourceTemplate.resourceTemplate = updates.template;\n                if (typeof updates.metadata !== \"undefined\")\n                    registeredResourceTemplate.metadata = updates.metadata;\n                if (typeof updates.callback !== \"undefined\")\n                    registeredResourceTemplate.readCallback = updates.callback;\n                if (typeof updates.enabled !== \"undefined\")\n                    registeredResourceTemplate.enabled = updates.enabled;\n                this.sendResourceListChanged();\n            },\n        };\n        this._registeredResourceTemplates[name] = registeredResourceTemplate;\n        return registeredResourceTemplate;\n    }\n    _createRegisteredPrompt(name, title, description, argsSchema, callback) {\n        const registeredPrompt = {\n            title,\n            description,\n            argsSchema: argsSchema === undefined ? undefined : zod__WEBPACK_IMPORTED_MODULE_5__.object(argsSchema),\n            callback,\n            enabled: true,\n            disable: () => registeredPrompt.update({ enabled: false }),\n            enable: () => registeredPrompt.update({ enabled: true }),\n            remove: () => registeredPrompt.update({ name: null }),\n            update: (updates) => {\n                if (typeof updates.name !== \"undefined\" && updates.name !== name) {\n                    delete this._registeredPrompts[name];\n                    if (updates.name)\n                        this._registeredPrompts[updates.name] = registeredPrompt;\n                }\n                if (typeof updates.title !== \"undefined\")\n                    registeredPrompt.title = updates.title;\n                if (typeof updates.description !== \"undefined\")\n                    registeredPrompt.description = updates.description;\n                if (typeof updates.argsSchema !== \"undefined\")\n                    registeredPrompt.argsSchema = zod__WEBPACK_IMPORTED_MODULE_5__.object(updates.argsSchema);\n                if (typeof updates.callback !== \"undefined\")\n                    registeredPrompt.callback = updates.callback;\n                if (typeof updates.enabled !== \"undefined\")\n                    registeredPrompt.enabled = updates.enabled;\n                this.sendPromptListChanged();\n            },\n        };\n        this._registeredPrompts[name] = registeredPrompt;\n        return registeredPrompt;\n    }\n    _createRegisteredTool(name, title, description, inputSchema, outputSchema, annotations, _meta, callback) {\n        const registeredTool = {\n            title,\n            description,\n            inputSchema: inputSchema === undefined ? undefined : zod__WEBPACK_IMPORTED_MODULE_5__.object(inputSchema),\n            outputSchema: outputSchema === undefined ? undefined : zod__WEBPACK_IMPORTED_MODULE_5__.object(outputSchema),\n            annotations,\n            _meta,\n            callback,\n            enabled: true,\n            disable: () => registeredTool.update({ enabled: false }),\n            enable: () => registeredTool.update({ enabled: true }),\n            remove: () => registeredTool.update({ name: null }),\n            update: (updates) => {\n                if (typeof updates.name !== \"undefined\" && updates.name !== name) {\n                    delete this._registeredTools[name];\n                    if (updates.name)\n                        this._registeredTools[updates.name] = registeredTool;\n                }\n                if (typeof updates.title !== \"undefined\")\n                    registeredTool.title = updates.title;\n                if (typeof updates.description !== \"undefined\")\n                    registeredTool.description = updates.description;\n                if (typeof updates.paramsSchema !== \"undefined\")\n                    registeredTool.inputSchema = zod__WEBPACK_IMPORTED_MODULE_5__.object(updates.paramsSchema);\n                if (typeof updates.callback !== \"undefined\")\n                    registeredTool.callback = updates.callback;\n                if (typeof updates.annotations !== \"undefined\")\n                    registeredTool.annotations = updates.annotations;\n                if (typeof updates._meta !== \"undefined\")\n                    registeredTool._meta = updates._meta;\n                if (typeof updates.enabled !== \"undefined\")\n                    registeredTool.enabled = updates.enabled;\n                this.sendToolListChanged();\n            },\n        };\n        this._registeredTools[name] = registeredTool;\n        this.setToolRequestHandlers();\n        this.sendToolListChanged();\n        return registeredTool;\n    }\n    /**\n     * tool() implementation. Parses arguments passed to overrides defined above.\n     */\n    tool(name, ...rest) {\n        if (this._registeredTools[name]) {\n            throw new Error(`Tool ${name} is already registered`);\n        }\n        let description;\n        let inputSchema;\n        let outputSchema;\n        let annotations;\n        // Tool properties are passed as separate arguments, with omissions allowed.\n        // Support for this style is frozen as of protocol version 2025-03-26. Future additions\n        // to tool definition should *NOT* be added.\n        if (typeof rest[0] === \"string\") {\n            description = rest.shift();\n        }\n        // Handle the different overload combinations\n        if (rest.length > 1) {\n            // We have at least one more arg before the callback\n            const firstArg = rest[0];\n            if (isZodRawShape(firstArg)) {\n                // We have a params schema as the first arg\n                inputSchema = rest.shift();\n                // Check if the next arg is potentially annotations\n                if (rest.length > 1 && typeof rest[0] === \"object\" && rest[0] !== null && !(isZodRawShape(rest[0]))) {\n                    // Case: tool(name, paramsSchema, annotations, cb)\n                    // Or: tool(name, description, paramsSchema, annotations, cb)\n                    annotations = rest.shift();\n                }\n            }\n            else if (typeof firstArg === \"object\" && firstArg !== null) {\n                // Not a ZodRawShape, so must be annotations in this position\n                // Case: tool(name, annotations, cb)\n                // Or: tool(name, description, annotations, cb)\n                annotations = rest.shift();\n            }\n        }\n        const callback = rest[0];\n        return this._createRegisteredTool(name, undefined, description, inputSchema, outputSchema, annotations, undefined, callback);\n    }\n    /**\n     * Registers a tool with a config object and callback.\n     */\n    registerTool(name, config, cb) {\n        if (this._registeredTools[name]) {\n            throw new Error(`Tool ${name} is already registered`);\n        }\n        const { title, description, inputSchema, outputSchema, annotations, _meta } = config;\n        return this._createRegisteredTool(name, title, description, inputSchema, outputSchema, annotations, _meta, cb);\n    }\n    prompt(name, ...rest) {\n        if (this._registeredPrompts[name]) {\n            throw new Error(`Prompt ${name} is already registered`);\n        }\n        let description;\n        if (typeof rest[0] === \"string\") {\n            description = rest.shift();\n        }\n        let argsSchema;\n        if (rest.length > 1) {\n            argsSchema = rest.shift();\n        }\n        const cb = rest[0];\n        const registeredPrompt = this._createRegisteredPrompt(name, undefined, description, argsSchema, cb);\n        this.setPromptRequestHandlers();\n        this.sendPromptListChanged();\n        return registeredPrompt;\n    }\n    /**\n     * Registers a prompt with a config object and callback.\n     */\n    registerPrompt(name, config, cb) {\n        if (this._registeredPrompts[name]) {\n            throw new Error(`Prompt ${name} is already registered`);\n        }\n        const { title, description, argsSchema } = config;\n        const registeredPrompt = this._createRegisteredPrompt(name, title, description, argsSchema, cb);\n        this.setPromptRequestHandlers();\n        this.sendPromptListChanged();\n        return registeredPrompt;\n    }\n    /**\n     * Checks if the server is connected to a transport.\n     * @returns True if the server is connected\n     */\n    isConnected() {\n        return this.server.transport !== undefined;\n    }\n    /**\n     * Sends a logging message to the client, if connected.\n     * Note: You only need to send the parameters object, not the entire JSON RPC message\n     * @see LoggingMessageNotification\n     * @param params\n     * @param sessionId optional for stateless and backward compatibility\n     */\n    async sendLoggingMessage(params, sessionId) {\n        return this.server.sendLoggingMessage(params, sessionId);\n    }\n    /**\n     * Sends a resource list changed event to the client, if connected.\n     */\n    sendResourceListChanged() {\n        if (this.isConnected()) {\n            this.server.sendResourceListChanged();\n        }\n    }\n    /**\n     * Sends a tool list changed event to the client, if connected.\n     */\n    sendToolListChanged() {\n        if (this.isConnected()) {\n            this.server.sendToolListChanged();\n        }\n    }\n    /**\n     * Sends a prompt list changed event to the client, if connected.\n     */\n    sendPromptListChanged() {\n        if (this.isConnected()) {\n            this.server.sendPromptListChanged();\n        }\n    }\n}\n/**\n * A resource template combines a URI pattern with optional functionality to enumerate\n * all resources matching that pattern.\n */\nclass ResourceTemplate {\n    constructor(uriTemplate, _callbacks) {\n        this._callbacks = _callbacks;\n        this._uriTemplate =\n            typeof uriTemplate === \"string\"\n                ? new _shared_uriTemplate_js__WEBPACK_IMPORTED_MODULE_4__.UriTemplate(uriTemplate)\n                : uriTemplate;\n    }\n    /**\n     * Gets the URI template pattern.\n     */\n    get uriTemplate() {\n        return this._uriTemplate;\n    }\n    /**\n     * Gets the list callback, if one was provided.\n     */\n    get listCallback() {\n        return this._callbacks.list;\n    }\n    /**\n     * Gets the callback for completing a specific URI template variable, if one was provided.\n     */\n    completeCallback(variable) {\n        var _a;\n        return (_a = this._callbacks.complete) === null || _a === void 0 ? void 0 : _a[variable];\n    }\n}\nconst EMPTY_OBJECT_JSON_SCHEMA = {\n    type: \"object\",\n    properties: {},\n};\n// Helper to check if an object is a Zod schema (ZodRawShape)\nfunction isZodRawShape(obj) {\n    if (typeof obj !== \"object\" || obj === null)\n        return false;\n    const isEmptyObject = Object.keys(obj).length === 0;\n    // Check if object is empty or at least one property is a ZodType instance\n    // Note: use heuristic check to avoid instanceof failure across different Zod versions\n    return isEmptyObject || Object.values(obj).some(isZodTypeLike);\n}\nfunction isZodTypeLike(value) {\n    return value !== null &&\n        typeof value === 'object' &&\n        'parse' in value && typeof value.parse === 'function' &&\n        'safeParse' in value && typeof value.safeParse === 'function';\n}\nfunction promptArgumentsFromSchema(schema) {\n    return Object.entries(schema.shape).map(([name, field]) => ({\n        name,\n        description: field.description,\n        required: !field.isOptional(),\n    }));\n}\nfunction createCompletionResult(suggestions) {\n    return {\n        completion: {\n            values: suggestions.slice(0, 100),\n            total: suggestions.length,\n            hasMore: suggestions.length > 100,\n        },\n    };\n}\nconst EMPTY_COMPLETION_RESULT = {\n    completion: {\n        values: [],\n        hasMore: false,\n    },\n};\n//# sourceMappingURL=mcp.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/server/mcp.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/protocol.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/protocol.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_REQUEST_TIMEOUT_MSEC: () => (/* binding */ DEFAULT_REQUEST_TIMEOUT_MSEC),\n/* harmony export */   Protocol: () => (/* binding */ Protocol),\n/* harmony export */   mergeCapabilities: () => (/* binding */ mergeCapabilities)\n/* harmony export */ });\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/types.js\");\n\n/**\n * The default request timeout, in miliseconds.\n */\nconst DEFAULT_REQUEST_TIMEOUT_MSEC = 60000;\n/**\n * Implements MCP protocol framing on top of a pluggable transport, including\n * features like request/response linking, notifications, and progress.\n */\nclass Protocol {\n    constructor(_options) {\n        this._options = _options;\n        this._requestMessageId = 0;\n        this._requestHandlers = new Map();\n        this._requestHandlerAbortControllers = new Map();\n        this._notificationHandlers = new Map();\n        this._responseHandlers = new Map();\n        this._progressHandlers = new Map();\n        this._timeoutInfo = new Map();\n        this._pendingDebouncedNotifications = new Set();\n        this.setNotificationHandler(_types_js__WEBPACK_IMPORTED_MODULE_0__.CancelledNotificationSchema, (notification) => {\n            const controller = this._requestHandlerAbortControllers.get(notification.params.requestId);\n            controller === null || controller === void 0 ? void 0 : controller.abort(notification.params.reason);\n        });\n        this.setNotificationHandler(_types_js__WEBPACK_IMPORTED_MODULE_0__.ProgressNotificationSchema, (notification) => {\n            this._onprogress(notification);\n        });\n        this.setRequestHandler(_types_js__WEBPACK_IMPORTED_MODULE_0__.PingRequestSchema, \n        // Automatic pong by default.\n        (_request) => ({}));\n    }\n    _setupTimeout(messageId, timeout, maxTotalTimeout, onTimeout, resetTimeoutOnProgress = false) {\n        this._timeoutInfo.set(messageId, {\n            timeoutId: setTimeout(onTimeout, timeout),\n            startTime: Date.now(),\n            timeout,\n            maxTotalTimeout,\n            resetTimeoutOnProgress,\n            onTimeout\n        });\n    }\n    _resetTimeout(messageId) {\n        const info = this._timeoutInfo.get(messageId);\n        if (!info)\n            return false;\n        const totalElapsed = Date.now() - info.startTime;\n        if (info.maxTotalTimeout && totalElapsed >= info.maxTotalTimeout) {\n            this._timeoutInfo.delete(messageId);\n            throw new _types_js__WEBPACK_IMPORTED_MODULE_0__.McpError(_types_js__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.RequestTimeout, \"Maximum total timeout exceeded\", { maxTotalTimeout: info.maxTotalTimeout, totalElapsed });\n        }\n        clearTimeout(info.timeoutId);\n        info.timeoutId = setTimeout(info.onTimeout, info.timeout);\n        return true;\n    }\n    _cleanupTimeout(messageId) {\n        const info = this._timeoutInfo.get(messageId);\n        if (info) {\n            clearTimeout(info.timeoutId);\n            this._timeoutInfo.delete(messageId);\n        }\n    }\n    /**\n     * Attaches to the given transport, starts it, and starts listening for messages.\n     *\n     * The Protocol object assumes ownership of the Transport, replacing any callbacks that have already been set, and expects that it is the only user of the Transport instance going forward.\n     */\n    async connect(transport) {\n        var _a, _b, _c;\n        this._transport = transport;\n        const _onclose = (_a = this.transport) === null || _a === void 0 ? void 0 : _a.onclose;\n        this._transport.onclose = () => {\n            _onclose === null || _onclose === void 0 ? void 0 : _onclose();\n            this._onclose();\n        };\n        const _onerror = (_b = this.transport) === null || _b === void 0 ? void 0 : _b.onerror;\n        this._transport.onerror = (error) => {\n            _onerror === null || _onerror === void 0 ? void 0 : _onerror(error);\n            this._onerror(error);\n        };\n        const _onmessage = (_c = this._transport) === null || _c === void 0 ? void 0 : _c.onmessage;\n        this._transport.onmessage = (message, extra) => {\n            _onmessage === null || _onmessage === void 0 ? void 0 : _onmessage(message, extra);\n            if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isJSONRPCResponse)(message) || (0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isJSONRPCError)(message)) {\n                this._onresponse(message);\n            }\n            else if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isJSONRPCRequest)(message)) {\n                this._onrequest(message, extra);\n            }\n            else if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isJSONRPCNotification)(message)) {\n                this._onnotification(message);\n            }\n            else {\n                this._onerror(new Error(`Unknown message type: ${JSON.stringify(message)}`));\n            }\n        };\n        await this._transport.start();\n    }\n    _onclose() {\n        var _a;\n        const responseHandlers = this._responseHandlers;\n        this._responseHandlers = new Map();\n        this._progressHandlers.clear();\n        this._pendingDebouncedNotifications.clear();\n        this._transport = undefined;\n        (_a = this.onclose) === null || _a === void 0 ? void 0 : _a.call(this);\n        const error = new _types_js__WEBPACK_IMPORTED_MODULE_0__.McpError(_types_js__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ConnectionClosed, \"Connection closed\");\n        for (const handler of responseHandlers.values()) {\n            handler(error);\n        }\n    }\n    _onerror(error) {\n        var _a;\n        (_a = this.onerror) === null || _a === void 0 ? void 0 : _a.call(this, error);\n    }\n    _onnotification(notification) {\n        var _a;\n        const handler = (_a = this._notificationHandlers.get(notification.method)) !== null && _a !== void 0 ? _a : this.fallbackNotificationHandler;\n        // Ignore notifications not being subscribed to.\n        if (handler === undefined) {\n            return;\n        }\n        // Starting with Promise.resolve() puts any synchronous errors into the monad as well.\n        Promise.resolve()\n            .then(() => handler(notification))\n            .catch((error) => this._onerror(new Error(`Uncaught error in notification handler: ${error}`)));\n    }\n    _onrequest(request, extra) {\n        var _a, _b;\n        const handler = (_a = this._requestHandlers.get(request.method)) !== null && _a !== void 0 ? _a : this.fallbackRequestHandler;\n        // Capture the current transport at request time to ensure responses go to the correct client\n        const capturedTransport = this._transport;\n        if (handler === undefined) {\n            capturedTransport === null || capturedTransport === void 0 ? void 0 : capturedTransport.send({\n                jsonrpc: \"2.0\",\n                id: request.id,\n                error: {\n                    code: _types_js__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.MethodNotFound,\n                    message: \"Method not found\",\n                },\n            }).catch((error) => this._onerror(new Error(`Failed to send an error response: ${error}`)));\n            return;\n        }\n        const abortController = new AbortController();\n        this._requestHandlerAbortControllers.set(request.id, abortController);\n        const fullExtra = {\n            signal: abortController.signal,\n            sessionId: capturedTransport === null || capturedTransport === void 0 ? void 0 : capturedTransport.sessionId,\n            _meta: (_b = request.params) === null || _b === void 0 ? void 0 : _b._meta,\n            sendNotification: (notification) => this.notification(notification, { relatedRequestId: request.id }),\n            sendRequest: (r, resultSchema, options) => this.request(r, resultSchema, { ...options, relatedRequestId: request.id }),\n            authInfo: extra === null || extra === void 0 ? void 0 : extra.authInfo,\n            requestId: request.id,\n            requestInfo: extra === null || extra === void 0 ? void 0 : extra.requestInfo\n        };\n        // Starting with Promise.resolve() puts any synchronous errors into the monad as well.\n        Promise.resolve()\n            .then(() => handler(request, fullExtra))\n            .then((result) => {\n            if (abortController.signal.aborted) {\n                return;\n            }\n            return capturedTransport === null || capturedTransport === void 0 ? void 0 : capturedTransport.send({\n                result,\n                jsonrpc: \"2.0\",\n                id: request.id,\n            });\n        }, (error) => {\n            var _a;\n            if (abortController.signal.aborted) {\n                return;\n            }\n            return capturedTransport === null || capturedTransport === void 0 ? void 0 : capturedTransport.send({\n                jsonrpc: \"2.0\",\n                id: request.id,\n                error: {\n                    code: Number.isSafeInteger(error[\"code\"])\n                        ? error[\"code\"]\n                        : _types_js__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.InternalError,\n                    message: (_a = error.message) !== null && _a !== void 0 ? _a : \"Internal error\",\n                },\n            });\n        })\n            .catch((error) => this._onerror(new Error(`Failed to send response: ${error}`)))\n            .finally(() => {\n            this._requestHandlerAbortControllers.delete(request.id);\n        });\n    }\n    _onprogress(notification) {\n        const { progressToken, ...params } = notification.params;\n        const messageId = Number(progressToken);\n        const handler = this._progressHandlers.get(messageId);\n        if (!handler) {\n            this._onerror(new Error(`Received a progress notification for an unknown token: ${JSON.stringify(notification)}`));\n            return;\n        }\n        const responseHandler = this._responseHandlers.get(messageId);\n        const timeoutInfo = this._timeoutInfo.get(messageId);\n        if (timeoutInfo && responseHandler && timeoutInfo.resetTimeoutOnProgress) {\n            try {\n                this._resetTimeout(messageId);\n            }\n            catch (error) {\n                responseHandler(error);\n                return;\n            }\n        }\n        handler(params);\n    }\n    _onresponse(response) {\n        const messageId = Number(response.id);\n        const handler = this._responseHandlers.get(messageId);\n        if (handler === undefined) {\n            this._onerror(new Error(`Received a response for an unknown message ID: ${JSON.stringify(response)}`));\n            return;\n        }\n        this._responseHandlers.delete(messageId);\n        this._progressHandlers.delete(messageId);\n        this._cleanupTimeout(messageId);\n        if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isJSONRPCResponse)(response)) {\n            handler(response);\n        }\n        else {\n            const error = new _types_js__WEBPACK_IMPORTED_MODULE_0__.McpError(response.error.code, response.error.message, response.error.data);\n            handler(error);\n        }\n    }\n    get transport() {\n        return this._transport;\n    }\n    /**\n     * Closes the connection.\n     */\n    async close() {\n        var _a;\n        await ((_a = this._transport) === null || _a === void 0 ? void 0 : _a.close());\n    }\n    /**\n     * Sends a request and wait for a response.\n     *\n     * Do not use this method to emit notifications! Use notification() instead.\n     */\n    request(request, resultSchema, options) {\n        const { relatedRequestId, resumptionToken, onresumptiontoken } = options !== null && options !== void 0 ? options : {};\n        return new Promise((resolve, reject) => {\n            var _a, _b, _c, _d, _e, _f;\n            if (!this._transport) {\n                reject(new Error(\"Not connected\"));\n                return;\n            }\n            if (((_a = this._options) === null || _a === void 0 ? void 0 : _a.enforceStrictCapabilities) === true) {\n                this.assertCapabilityForMethod(request.method);\n            }\n            (_b = options === null || options === void 0 ? void 0 : options.signal) === null || _b === void 0 ? void 0 : _b.throwIfAborted();\n            const messageId = this._requestMessageId++;\n            const jsonrpcRequest = {\n                ...request,\n                jsonrpc: \"2.0\",\n                id: messageId,\n            };\n            if (options === null || options === void 0 ? void 0 : options.onprogress) {\n                this._progressHandlers.set(messageId, options.onprogress);\n                jsonrpcRequest.params = {\n                    ...request.params,\n                    _meta: {\n                        ...(((_c = request.params) === null || _c === void 0 ? void 0 : _c._meta) || {}),\n                        progressToken: messageId\n                    },\n                };\n            }\n            const cancel = (reason) => {\n                var _a;\n                this._responseHandlers.delete(messageId);\n                this._progressHandlers.delete(messageId);\n                this._cleanupTimeout(messageId);\n                (_a = this._transport) === null || _a === void 0 ? void 0 : _a.send({\n                    jsonrpc: \"2.0\",\n                    method: \"notifications/cancelled\",\n                    params: {\n                        requestId: messageId,\n                        reason: String(reason),\n                    },\n                }, { relatedRequestId, resumptionToken, onresumptiontoken }).catch((error) => this._onerror(new Error(`Failed to send cancellation: ${error}`)));\n                reject(reason);\n            };\n            this._responseHandlers.set(messageId, (response) => {\n                var _a;\n                if ((_a = options === null || options === void 0 ? void 0 : options.signal) === null || _a === void 0 ? void 0 : _a.aborted) {\n                    return;\n                }\n                if (response instanceof Error) {\n                    return reject(response);\n                }\n                try {\n                    const result = resultSchema.parse(response.result);\n                    resolve(result);\n                }\n                catch (error) {\n                    reject(error);\n                }\n            });\n            (_d = options === null || options === void 0 ? void 0 : options.signal) === null || _d === void 0 ? void 0 : _d.addEventListener(\"abort\", () => {\n                var _a;\n                cancel((_a = options === null || options === void 0 ? void 0 : options.signal) === null || _a === void 0 ? void 0 : _a.reason);\n            });\n            const timeout = (_e = options === null || options === void 0 ? void 0 : options.timeout) !== null && _e !== void 0 ? _e : DEFAULT_REQUEST_TIMEOUT_MSEC;\n            const timeoutHandler = () => cancel(new _types_js__WEBPACK_IMPORTED_MODULE_0__.McpError(_types_js__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.RequestTimeout, \"Request timed out\", { timeout }));\n            this._setupTimeout(messageId, timeout, options === null || options === void 0 ? void 0 : options.maxTotalTimeout, timeoutHandler, (_f = options === null || options === void 0 ? void 0 : options.resetTimeoutOnProgress) !== null && _f !== void 0 ? _f : false);\n            this._transport.send(jsonrpcRequest, { relatedRequestId, resumptionToken, onresumptiontoken }).catch((error) => {\n                this._cleanupTimeout(messageId);\n                reject(error);\n            });\n        });\n    }\n    /**\n     * Emits a notification, which is a one-way message that does not expect a response.\n     */\n    async notification(notification, options) {\n        var _a, _b;\n        if (!this._transport) {\n            throw new Error(\"Not connected\");\n        }\n        this.assertNotificationCapability(notification.method);\n        const debouncedMethods = (_b = (_a = this._options) === null || _a === void 0 ? void 0 : _a.debouncedNotificationMethods) !== null && _b !== void 0 ? _b : [];\n        // A notification can only be debounced if it's in the list AND it's \"simple\"\n        // (i.e., has no parameters and no related request ID that could be lost).\n        const canDebounce = debouncedMethods.includes(notification.method)\n            && !notification.params\n            && !(options === null || options === void 0 ? void 0 : options.relatedRequestId);\n        if (canDebounce) {\n            // If a notification of this type is already scheduled, do nothing.\n            if (this._pendingDebouncedNotifications.has(notification.method)) {\n                return;\n            }\n            // Mark this notification type as pending.\n            this._pendingDebouncedNotifications.add(notification.method);\n            // Schedule the actual send to happen in the next microtask.\n            // This allows all synchronous calls in the current event loop tick to be coalesced.\n            Promise.resolve().then(() => {\n                var _a;\n                // Un-mark the notification so the next one can be scheduled.\n                this._pendingDebouncedNotifications.delete(notification.method);\n                // SAFETY CHECK: If the connection was closed while this was pending, abort.\n                if (!this._transport) {\n                    return;\n                }\n                const jsonrpcNotification = {\n                    ...notification,\n                    jsonrpc: \"2.0\",\n                };\n                // Send the notification, but don't await it here to avoid blocking.\n                // Handle potential errors with a .catch().\n                (_a = this._transport) === null || _a === void 0 ? void 0 : _a.send(jsonrpcNotification, options).catch(error => this._onerror(error));\n            });\n            // Return immediately.\n            return;\n        }\n        const jsonrpcNotification = {\n            ...notification,\n            jsonrpc: \"2.0\",\n        };\n        await this._transport.send(jsonrpcNotification, options);\n    }\n    /**\n     * Registers a handler to invoke when this protocol object receives a request with the given method.\n     *\n     * Note that this will replace any previous request handler for the same method.\n     */\n    setRequestHandler(requestSchema, handler) {\n        const method = requestSchema.shape.method.value;\n        this.assertRequestHandlerCapability(method);\n        this._requestHandlers.set(method, (request, extra) => {\n            return Promise.resolve(handler(requestSchema.parse(request), extra));\n        });\n    }\n    /**\n     * Removes the request handler for the given method.\n     */\n    removeRequestHandler(method) {\n        this._requestHandlers.delete(method);\n    }\n    /**\n     * Asserts that a request handler has not already been set for the given method, in preparation for a new one being automatically installed.\n     */\n    assertCanSetRequestHandler(method) {\n        if (this._requestHandlers.has(method)) {\n            throw new Error(`A request handler for ${method} already exists, which would be overridden`);\n        }\n    }\n    /**\n     * Registers a handler to invoke when this protocol object receives a notification with the given method.\n     *\n     * Note that this will replace any previous notification handler for the same method.\n     */\n    setNotificationHandler(notificationSchema, handler) {\n        this._notificationHandlers.set(notificationSchema.shape.method.value, (notification) => Promise.resolve(handler(notificationSchema.parse(notification))));\n    }\n    /**\n     * Removes the notification handler for the given method.\n     */\n    removeNotificationHandler(method) {\n        this._notificationHandlers.delete(method);\n    }\n}\nfunction mergeCapabilities(base, additional) {\n    return Object.entries(additional).reduce((acc, [key, value]) => {\n        if (value && typeof value === \"object\") {\n            acc[key] = acc[key] ? { ...acc[key], ...value } : value;\n        }\n        else {\n            acc[key] = value;\n        }\n        return acc;\n    }, { ...base });\n}\n//# sourceMappingURL=protocol.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/protocol.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/uriTemplate.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/uriTemplate.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UriTemplate: () => (/* binding */ UriTemplate)\n/* harmony export */ });\n// Claude-authored implementation of RFC 6570 URI Templates\nconst MAX_TEMPLATE_LENGTH = 1000000; // 1MB\nconst MAX_VARIABLE_LENGTH = 1000000; // 1MB\nconst MAX_TEMPLATE_EXPRESSIONS = 10000;\nconst MAX_REGEX_LENGTH = 1000000; // 1MB\nclass UriTemplate {\n    /**\n     * Returns true if the given string contains any URI template expressions.\n     * A template expression is a sequence of characters enclosed in curly braces,\n     * like {foo} or {?bar}.\n     */\n    static isTemplate(str) {\n        // Look for any sequence of characters between curly braces\n        // that isn't just whitespace\n        return /\\{[^}\\s]+\\}/.test(str);\n    }\n    static validateLength(str, max, context) {\n        if (str.length > max) {\n            throw new Error(`${context} exceeds maximum length of ${max} characters (got ${str.length})`);\n        }\n    }\n    get variableNames() {\n        return this.parts.flatMap((part) => typeof part === 'string' ? [] : part.names);\n    }\n    constructor(template) {\n        UriTemplate.validateLength(template, MAX_TEMPLATE_LENGTH, \"Template\");\n        this.template = template;\n        this.parts = this.parse(template);\n    }\n    toString() {\n        return this.template;\n    }\n    parse(template) {\n        const parts = [];\n        let currentText = \"\";\n        let i = 0;\n        let expressionCount = 0;\n        while (i < template.length) {\n            if (template[i] === \"{\") {\n                if (currentText) {\n                    parts.push(currentText);\n                    currentText = \"\";\n                }\n                const end = template.indexOf(\"}\", i);\n                if (end === -1)\n                    throw new Error(\"Unclosed template expression\");\n                expressionCount++;\n                if (expressionCount > MAX_TEMPLATE_EXPRESSIONS) {\n                    throw new Error(`Template contains too many expressions (max ${MAX_TEMPLATE_EXPRESSIONS})`);\n                }\n                const expr = template.slice(i + 1, end);\n                const operator = this.getOperator(expr);\n                const exploded = expr.includes(\"*\");\n                const names = this.getNames(expr);\n                const name = names[0];\n                // Validate variable name length\n                for (const name of names) {\n                    UriTemplate.validateLength(name, MAX_VARIABLE_LENGTH, \"Variable name\");\n                }\n                parts.push({ name, operator, names, exploded });\n                i = end + 1;\n            }\n            else {\n                currentText += template[i];\n                i++;\n            }\n        }\n        if (currentText) {\n            parts.push(currentText);\n        }\n        return parts;\n    }\n    getOperator(expr) {\n        const operators = [\"+\", \"#\", \".\", \"/\", \"?\", \"&\"];\n        return operators.find((op) => expr.startsWith(op)) || \"\";\n    }\n    getNames(expr) {\n        const operator = this.getOperator(expr);\n        return expr\n            .slice(operator.length)\n            .split(\",\")\n            .map((name) => name.replace(\"*\", \"\").trim())\n            .filter((name) => name.length > 0);\n    }\n    encodeValue(value, operator) {\n        UriTemplate.validateLength(value, MAX_VARIABLE_LENGTH, \"Variable value\");\n        if (operator === \"+\" || operator === \"#\") {\n            return encodeURI(value);\n        }\n        return encodeURIComponent(value);\n    }\n    expandPart(part, variables) {\n        if (part.operator === \"?\" || part.operator === \"&\") {\n            const pairs = part.names\n                .map((name) => {\n                const value = variables[name];\n                if (value === undefined)\n                    return \"\";\n                const encoded = Array.isArray(value)\n                    ? value.map((v) => this.encodeValue(v, part.operator)).join(\",\")\n                    : this.encodeValue(value.toString(), part.operator);\n                return `${name}=${encoded}`;\n            })\n                .filter((pair) => pair.length > 0);\n            if (pairs.length === 0)\n                return \"\";\n            const separator = part.operator === \"?\" ? \"?\" : \"&\";\n            return separator + pairs.join(\"&\");\n        }\n        if (part.names.length > 1) {\n            const values = part.names\n                .map((name) => variables[name])\n                .filter((v) => v !== undefined);\n            if (values.length === 0)\n                return \"\";\n            return values.map((v) => (Array.isArray(v) ? v[0] : v)).join(\",\");\n        }\n        const value = variables[part.name];\n        if (value === undefined)\n            return \"\";\n        const values = Array.isArray(value) ? value : [value];\n        const encoded = values.map((v) => this.encodeValue(v, part.operator));\n        switch (part.operator) {\n            case \"\":\n                return encoded.join(\",\");\n            case \"+\":\n                return encoded.join(\",\");\n            case \"#\":\n                return \"#\" + encoded.join(\",\");\n            case \".\":\n                return \".\" + encoded.join(\".\");\n            case \"/\":\n                return \"/\" + encoded.join(\"/\");\n            default:\n                return encoded.join(\",\");\n        }\n    }\n    expand(variables) {\n        let result = \"\";\n        let hasQueryParam = false;\n        for (const part of this.parts) {\n            if (typeof part === \"string\") {\n                result += part;\n                continue;\n            }\n            const expanded = this.expandPart(part, variables);\n            if (!expanded)\n                continue;\n            // Convert ? to & if we already have a query parameter\n            if ((part.operator === \"?\" || part.operator === \"&\") && hasQueryParam) {\n                result += expanded.replace(\"?\", \"&\");\n            }\n            else {\n                result += expanded;\n            }\n            if (part.operator === \"?\" || part.operator === \"&\") {\n                hasQueryParam = true;\n            }\n        }\n        return result;\n    }\n    escapeRegExp(str) {\n        return str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n    }\n    partToRegExp(part) {\n        const patterns = [];\n        // Validate variable name length for matching\n        for (const name of part.names) {\n            UriTemplate.validateLength(name, MAX_VARIABLE_LENGTH, \"Variable name\");\n        }\n        if (part.operator === \"?\" || part.operator === \"&\") {\n            for (let i = 0; i < part.names.length; i++) {\n                const name = part.names[i];\n                const prefix = i === 0 ? \"\\\\\" + part.operator : \"&\";\n                patterns.push({\n                    pattern: prefix + this.escapeRegExp(name) + \"=([^&]+)\",\n                    name,\n                });\n            }\n            return patterns;\n        }\n        let pattern;\n        const name = part.name;\n        switch (part.operator) {\n            case \"\":\n                pattern = part.exploded ? \"([^/]+(?:,[^/]+)*)\" : \"([^/,]+)\";\n                break;\n            case \"+\":\n            case \"#\":\n                pattern = \"(.+)\";\n                break;\n            case \".\":\n                pattern = \"\\\\.([^/,]+)\";\n                break;\n            case \"/\":\n                pattern = \"/\" + (part.exploded ? \"([^/]+(?:,[^/]+)*)\" : \"([^/,]+)\");\n                break;\n            default:\n                pattern = \"([^/]+)\";\n        }\n        patterns.push({ pattern, name });\n        return patterns;\n    }\n    match(uri) {\n        UriTemplate.validateLength(uri, MAX_TEMPLATE_LENGTH, \"URI\");\n        let pattern = \"^\";\n        const names = [];\n        for (const part of this.parts) {\n            if (typeof part === \"string\") {\n                pattern += this.escapeRegExp(part);\n            }\n            else {\n                const patterns = this.partToRegExp(part);\n                for (const { pattern: partPattern, name } of patterns) {\n                    pattern += partPattern;\n                    names.push({ name, exploded: part.exploded });\n                }\n            }\n        }\n        pattern += \"$\";\n        UriTemplate.validateLength(pattern, MAX_REGEX_LENGTH, \"Generated regex pattern\");\n        const regex = new RegExp(pattern);\n        const match = uri.match(regex);\n        if (!match)\n            return null;\n        const result = {};\n        for (let i = 0; i < names.length; i++) {\n            const { name, exploded } = names[i];\n            const value = match[i + 1];\n            const cleanName = name.replace(\"*\", \"\");\n            if (exploded && value.includes(\",\")) {\n                result[cleanName] = value.split(\",\");\n            }\n            else {\n                result[cleanName] = value;\n            }\n        }\n        return result;\n    }\n}\n//# sourceMappingURL=uriTemplate.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/uriTemplate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/types.js":
/*!******************************************************************!*\
  !*** ./node_modules/@modelcontextprotocol/sdk/dist/esm/types.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AudioContentSchema: () => (/* binding */ AudioContentSchema),\n/* harmony export */   BaseMetadataSchema: () => (/* binding */ BaseMetadataSchema),\n/* harmony export */   BlobResourceContentsSchema: () => (/* binding */ BlobResourceContentsSchema),\n/* harmony export */   BooleanSchemaSchema: () => (/* binding */ BooleanSchemaSchema),\n/* harmony export */   CallToolRequestSchema: () => (/* binding */ CallToolRequestSchema),\n/* harmony export */   CallToolResultSchema: () => (/* binding */ CallToolResultSchema),\n/* harmony export */   CancelledNotificationSchema: () => (/* binding */ CancelledNotificationSchema),\n/* harmony export */   ClientCapabilitiesSchema: () => (/* binding */ ClientCapabilitiesSchema),\n/* harmony export */   ClientNotificationSchema: () => (/* binding */ ClientNotificationSchema),\n/* harmony export */   ClientRequestSchema: () => (/* binding */ ClientRequestSchema),\n/* harmony export */   ClientResultSchema: () => (/* binding */ ClientResultSchema),\n/* harmony export */   CompatibilityCallToolResultSchema: () => (/* binding */ CompatibilityCallToolResultSchema),\n/* harmony export */   CompleteRequestSchema: () => (/* binding */ CompleteRequestSchema),\n/* harmony export */   CompleteResultSchema: () => (/* binding */ CompleteResultSchema),\n/* harmony export */   ContentBlockSchema: () => (/* binding */ ContentBlockSchema),\n/* harmony export */   CreateMessageRequestSchema: () => (/* binding */ CreateMessageRequestSchema),\n/* harmony export */   CreateMessageResultSchema: () => (/* binding */ CreateMessageResultSchema),\n/* harmony export */   CursorSchema: () => (/* binding */ CursorSchema),\n/* harmony export */   DEFAULT_NEGOTIATED_PROTOCOL_VERSION: () => (/* binding */ DEFAULT_NEGOTIATED_PROTOCOL_VERSION),\n/* harmony export */   ElicitRequestSchema: () => (/* binding */ ElicitRequestSchema),\n/* harmony export */   ElicitResultSchema: () => (/* binding */ ElicitResultSchema),\n/* harmony export */   EmbeddedResourceSchema: () => (/* binding */ EmbeddedResourceSchema),\n/* harmony export */   EmptyResultSchema: () => (/* binding */ EmptyResultSchema),\n/* harmony export */   EnumSchemaSchema: () => (/* binding */ EnumSchemaSchema),\n/* harmony export */   ErrorCode: () => (/* binding */ ErrorCode),\n/* harmony export */   GetPromptRequestSchema: () => (/* binding */ GetPromptRequestSchema),\n/* harmony export */   GetPromptResultSchema: () => (/* binding */ GetPromptResultSchema),\n/* harmony export */   IconSchema: () => (/* binding */ IconSchema),\n/* harmony export */   ImageContentSchema: () => (/* binding */ ImageContentSchema),\n/* harmony export */   ImplementationSchema: () => (/* binding */ ImplementationSchema),\n/* harmony export */   InitializeRequestSchema: () => (/* binding */ InitializeRequestSchema),\n/* harmony export */   InitializeResultSchema: () => (/* binding */ InitializeResultSchema),\n/* harmony export */   InitializedNotificationSchema: () => (/* binding */ InitializedNotificationSchema),\n/* harmony export */   JSONRPCErrorSchema: () => (/* binding */ JSONRPCErrorSchema),\n/* harmony export */   JSONRPCMessageSchema: () => (/* binding */ JSONRPCMessageSchema),\n/* harmony export */   JSONRPCNotificationSchema: () => (/* binding */ JSONRPCNotificationSchema),\n/* harmony export */   JSONRPCRequestSchema: () => (/* binding */ JSONRPCRequestSchema),\n/* harmony export */   JSONRPCResponseSchema: () => (/* binding */ JSONRPCResponseSchema),\n/* harmony export */   JSONRPC_VERSION: () => (/* binding */ JSONRPC_VERSION),\n/* harmony export */   LATEST_PROTOCOL_VERSION: () => (/* binding */ LATEST_PROTOCOL_VERSION),\n/* harmony export */   ListPromptsRequestSchema: () => (/* binding */ ListPromptsRequestSchema),\n/* harmony export */   ListPromptsResultSchema: () => (/* binding */ ListPromptsResultSchema),\n/* harmony export */   ListResourceTemplatesRequestSchema: () => (/* binding */ ListResourceTemplatesRequestSchema),\n/* harmony export */   ListResourceTemplatesResultSchema: () => (/* binding */ ListResourceTemplatesResultSchema),\n/* harmony export */   ListResourcesRequestSchema: () => (/* binding */ ListResourcesRequestSchema),\n/* harmony export */   ListResourcesResultSchema: () => (/* binding */ ListResourcesResultSchema),\n/* harmony export */   ListRootsRequestSchema: () => (/* binding */ ListRootsRequestSchema),\n/* harmony export */   ListRootsResultSchema: () => (/* binding */ ListRootsResultSchema),\n/* harmony export */   ListToolsRequestSchema: () => (/* binding */ ListToolsRequestSchema),\n/* harmony export */   ListToolsResultSchema: () => (/* binding */ ListToolsResultSchema),\n/* harmony export */   LoggingLevelSchema: () => (/* binding */ LoggingLevelSchema),\n/* harmony export */   LoggingMessageNotificationSchema: () => (/* binding */ LoggingMessageNotificationSchema),\n/* harmony export */   McpError: () => (/* binding */ McpError),\n/* harmony export */   ModelHintSchema: () => (/* binding */ ModelHintSchema),\n/* harmony export */   ModelPreferencesSchema: () => (/* binding */ ModelPreferencesSchema),\n/* harmony export */   NotificationSchema: () => (/* binding */ NotificationSchema),\n/* harmony export */   NumberSchemaSchema: () => (/* binding */ NumberSchemaSchema),\n/* harmony export */   PaginatedRequestSchema: () => (/* binding */ PaginatedRequestSchema),\n/* harmony export */   PaginatedResultSchema: () => (/* binding */ PaginatedResultSchema),\n/* harmony export */   PingRequestSchema: () => (/* binding */ PingRequestSchema),\n/* harmony export */   PrimitiveSchemaDefinitionSchema: () => (/* binding */ PrimitiveSchemaDefinitionSchema),\n/* harmony export */   ProgressNotificationSchema: () => (/* binding */ ProgressNotificationSchema),\n/* harmony export */   ProgressSchema: () => (/* binding */ ProgressSchema),\n/* harmony export */   ProgressTokenSchema: () => (/* binding */ ProgressTokenSchema),\n/* harmony export */   PromptArgumentSchema: () => (/* binding */ PromptArgumentSchema),\n/* harmony export */   PromptListChangedNotificationSchema: () => (/* binding */ PromptListChangedNotificationSchema),\n/* harmony export */   PromptMessageSchema: () => (/* binding */ PromptMessageSchema),\n/* harmony export */   PromptReferenceSchema: () => (/* binding */ PromptReferenceSchema),\n/* harmony export */   PromptSchema: () => (/* binding */ PromptSchema),\n/* harmony export */   ReadResourceRequestSchema: () => (/* binding */ ReadResourceRequestSchema),\n/* harmony export */   ReadResourceResultSchema: () => (/* binding */ ReadResourceResultSchema),\n/* harmony export */   RequestIdSchema: () => (/* binding */ RequestIdSchema),\n/* harmony export */   RequestSchema: () => (/* binding */ RequestSchema),\n/* harmony export */   ResourceContentsSchema: () => (/* binding */ ResourceContentsSchema),\n/* harmony export */   ResourceLinkSchema: () => (/* binding */ ResourceLinkSchema),\n/* harmony export */   ResourceListChangedNotificationSchema: () => (/* binding */ ResourceListChangedNotificationSchema),\n/* harmony export */   ResourceReferenceSchema: () => (/* binding */ ResourceReferenceSchema),\n/* harmony export */   ResourceSchema: () => (/* binding */ ResourceSchema),\n/* harmony export */   ResourceTemplateReferenceSchema: () => (/* binding */ ResourceTemplateReferenceSchema),\n/* harmony export */   ResourceTemplateSchema: () => (/* binding */ ResourceTemplateSchema),\n/* harmony export */   ResourceUpdatedNotificationSchema: () => (/* binding */ ResourceUpdatedNotificationSchema),\n/* harmony export */   ResultSchema: () => (/* binding */ ResultSchema),\n/* harmony export */   RootSchema: () => (/* binding */ RootSchema),\n/* harmony export */   RootsListChangedNotificationSchema: () => (/* binding */ RootsListChangedNotificationSchema),\n/* harmony export */   SUPPORTED_PROTOCOL_VERSIONS: () => (/* binding */ SUPPORTED_PROTOCOL_VERSIONS),\n/* harmony export */   SamplingMessageSchema: () => (/* binding */ SamplingMessageSchema),\n/* harmony export */   ServerCapabilitiesSchema: () => (/* binding */ ServerCapabilitiesSchema),\n/* harmony export */   ServerNotificationSchema: () => (/* binding */ ServerNotificationSchema),\n/* harmony export */   ServerRequestSchema: () => (/* binding */ ServerRequestSchema),\n/* harmony export */   ServerResultSchema: () => (/* binding */ ServerResultSchema),\n/* harmony export */   SetLevelRequestSchema: () => (/* binding */ SetLevelRequestSchema),\n/* harmony export */   StringSchemaSchema: () => (/* binding */ StringSchemaSchema),\n/* harmony export */   SubscribeRequestSchema: () => (/* binding */ SubscribeRequestSchema),\n/* harmony export */   TextContentSchema: () => (/* binding */ TextContentSchema),\n/* harmony export */   TextResourceContentsSchema: () => (/* binding */ TextResourceContentsSchema),\n/* harmony export */   ToolAnnotationsSchema: () => (/* binding */ ToolAnnotationsSchema),\n/* harmony export */   ToolListChangedNotificationSchema: () => (/* binding */ ToolListChangedNotificationSchema),\n/* harmony export */   ToolSchema: () => (/* binding */ ToolSchema),\n/* harmony export */   UnsubscribeRequestSchema: () => (/* binding */ UnsubscribeRequestSchema),\n/* harmony export */   isInitializeRequest: () => (/* binding */ isInitializeRequest),\n/* harmony export */   isInitializedNotification: () => (/* binding */ isInitializedNotification),\n/* harmony export */   isJSONRPCError: () => (/* binding */ isJSONRPCError),\n/* harmony export */   isJSONRPCNotification: () => (/* binding */ isJSONRPCNotification),\n/* harmony export */   isJSONRPCRequest: () => (/* binding */ isJSONRPCRequest),\n/* harmony export */   isJSONRPCResponse: () => (/* binding */ isJSONRPCResponse)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n\nconst LATEST_PROTOCOL_VERSION = \"2025-06-18\";\nconst DEFAULT_NEGOTIATED_PROTOCOL_VERSION = \"2025-03-26\";\nconst SUPPORTED_PROTOCOL_VERSIONS = [\n    LATEST_PROTOCOL_VERSION,\n    \"2025-03-26\",\n    \"2024-11-05\",\n    \"2024-10-07\",\n];\n/* JSON-RPC types */\nconst JSONRPC_VERSION = \"2.0\";\n/**\n * A progress token, used to associate progress notifications with the original request.\n */\nconst ProgressTokenSchema = zod__WEBPACK_IMPORTED_MODULE_0__.union([zod__WEBPACK_IMPORTED_MODULE_0__.string(), zod__WEBPACK_IMPORTED_MODULE_0__.number().int()]);\n/**\n * An opaque token used to represent a cursor for pagination.\n */\nconst CursorSchema = zod__WEBPACK_IMPORTED_MODULE_0__.string();\nconst RequestMetaSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.\n     */\n    progressToken: zod__WEBPACK_IMPORTED_MODULE_0__.optional(ProgressTokenSchema),\n})\n    .passthrough();\nconst BaseRequestParamsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    _meta: zod__WEBPACK_IMPORTED_MODULE_0__.optional(RequestMetaSchema),\n})\n    .passthrough();\nconst RequestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    params: zod__WEBPACK_IMPORTED_MODULE_0__.optional(BaseRequestParamsSchema),\n});\nconst BaseNotificationParamsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n})\n    .passthrough();\nconst NotificationSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    params: zod__WEBPACK_IMPORTED_MODULE_0__.optional(BaseNotificationParamsSchema),\n});\nconst ResultSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n})\n    .passthrough();\n/**\n * A uniquely identifying ID for a request in JSON-RPC.\n */\nconst RequestIdSchema = zod__WEBPACK_IMPORTED_MODULE_0__.union([zod__WEBPACK_IMPORTED_MODULE_0__.string(), zod__WEBPACK_IMPORTED_MODULE_0__.number().int()]);\n/**\n * A request that expects a response.\n */\nconst JSONRPCRequestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    jsonrpc: zod__WEBPACK_IMPORTED_MODULE_0__.literal(JSONRPC_VERSION),\n    id: RequestIdSchema,\n})\n    .merge(RequestSchema)\n    .strict();\nconst isJSONRPCRequest = (value) => JSONRPCRequestSchema.safeParse(value).success;\n/**\n * A notification which does not expect a response.\n */\nconst JSONRPCNotificationSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    jsonrpc: zod__WEBPACK_IMPORTED_MODULE_0__.literal(JSONRPC_VERSION),\n})\n    .merge(NotificationSchema)\n    .strict();\nconst isJSONRPCNotification = (value) => JSONRPCNotificationSchema.safeParse(value).success;\n/**\n * A successful (non-error) response to a request.\n */\nconst JSONRPCResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    jsonrpc: zod__WEBPACK_IMPORTED_MODULE_0__.literal(JSONRPC_VERSION),\n    id: RequestIdSchema,\n    result: ResultSchema,\n})\n    .strict();\nconst isJSONRPCResponse = (value) => JSONRPCResponseSchema.safeParse(value).success;\n/**\n * Error codes defined by the JSON-RPC specification.\n */\nvar ErrorCode;\n(function (ErrorCode) {\n    // SDK error codes\n    ErrorCode[ErrorCode[\"ConnectionClosed\"] = -32000] = \"ConnectionClosed\";\n    ErrorCode[ErrorCode[\"RequestTimeout\"] = -32001] = \"RequestTimeout\";\n    // Standard JSON-RPC error codes\n    ErrorCode[ErrorCode[\"ParseError\"] = -32700] = \"ParseError\";\n    ErrorCode[ErrorCode[\"InvalidRequest\"] = -32600] = \"InvalidRequest\";\n    ErrorCode[ErrorCode[\"MethodNotFound\"] = -32601] = \"MethodNotFound\";\n    ErrorCode[ErrorCode[\"InvalidParams\"] = -32602] = \"InvalidParams\";\n    ErrorCode[ErrorCode[\"InternalError\"] = -32603] = \"InternalError\";\n})(ErrorCode || (ErrorCode = {}));\n/**\n * A response to a request that indicates an error occurred.\n */\nconst JSONRPCErrorSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    jsonrpc: zod__WEBPACK_IMPORTED_MODULE_0__.literal(JSONRPC_VERSION),\n    id: RequestIdSchema,\n    error: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        /**\n         * The error type that occurred.\n         */\n        code: zod__WEBPACK_IMPORTED_MODULE_0__.number().int(),\n        /**\n         * A short description of the error. The message SHOULD be limited to a concise single sentence.\n         */\n        message: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        /**\n         * Additional information about the error. The value of this member is defined by the sender (e.g. detailed error information, nested errors etc.).\n         */\n        data: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.unknown()),\n    }),\n})\n    .strict();\nconst isJSONRPCError = (value) => JSONRPCErrorSchema.safeParse(value).success;\nconst JSONRPCMessageSchema = zod__WEBPACK_IMPORTED_MODULE_0__.union([\n    JSONRPCRequestSchema,\n    JSONRPCNotificationSchema,\n    JSONRPCResponseSchema,\n    JSONRPCErrorSchema,\n]);\n/* Empty result */\n/**\n * A response that indicates success but carries no data.\n */\nconst EmptyResultSchema = ResultSchema.strict();\n/* Cancellation */\n/**\n * This notification can be sent by either side to indicate that it is cancelling a previously-issued request.\n *\n * The request SHOULD still be in-flight, but due to communication latency, it is always possible that this notification MAY arrive after the request has already finished.\n *\n * This notification indicates that the result will be unused, so any associated processing SHOULD cease.\n *\n * A client MUST NOT attempt to cancel its `initialize` request.\n */\nconst CancelledNotificationSchema = NotificationSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"notifications/cancelled\"),\n    params: BaseNotificationParamsSchema.extend({\n        /**\n         * The ID of the request to cancel.\n         *\n         * This MUST correspond to the ID of a request previously issued in the same direction.\n         */\n        requestId: RequestIdSchema,\n        /**\n         * An optional string describing the reason for the cancellation. This MAY be logged or presented to the user.\n         */\n        reason: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    }),\n});\n/* Base Metadata */\n/**\n * Icon schema for use in tools, prompts, resources, and implementations.\n */\nconst IconSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * URL or data URI for the icon.\n     */\n    src: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    /**\n     * Optional MIME type for the icon.\n     */\n    mimeType: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    /**\n     * Optional string specifying icon dimensions (e.g., \"48x48 96x96\").\n     */\n    sizes: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n})\n    .passthrough();\n/**\n * Base metadata interface for common properties across resources, tools, prompts, and implementations.\n */\nconst BaseMetadataSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /** Intended for programmatic or logical use, but used as a display name in past specs or fallback */\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    /**\n    * Intended for UI and end-user contexts — optimized to be human-readable and easily understood,\n    * even by those unfamiliar with domain-specific terminology.\n    *\n    * If not provided, the name should be used for display (except for Tool,\n    * where `annotations.title` should be given precedence over using `name`,\n    * if present).\n    */\n    title: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n})\n    .passthrough();\n/* Initialization */\n/**\n * Describes the name and version of an MCP implementation.\n */\nconst ImplementationSchema = BaseMetadataSchema.extend({\n    version: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    /**\n     * An optional URL of the website for this implementation.\n     */\n    websiteUrl: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    /**\n     * An optional list of icons for this implementation.\n     * This can be used by clients to display the implementation in a user interface.\n     * Each icon should have a `kind` property that specifies whether it is a data representation or a URL source, a `src` property that points to the icon file or data representation, and may also include a `mimeType` and `sizes` property.\n     * The `mimeType` property should be a valid MIME type for the icon file, such as \"image/png\" or \"image/svg+xml\".\n     * The `sizes` property should be a string that specifies one or more sizes at which the icon file can be used, such as \"48x48\" or \"any\" for scalable formats like SVG.\n     * The `sizes` property is optional, and if not provided, the client should assume that the icon can be used at any size.\n     */\n    icons: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.array(IconSchema)),\n});\n/**\n * Capabilities a client may support. Known capabilities are defined here, in this schema, but this is not a closed set: any client can define its own, additional capabilities.\n */\nconst ClientCapabilitiesSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * Experimental, non-standard capabilities that the client supports.\n     */\n    experimental: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n    /**\n     * Present if the client supports sampling from an LLM.\n     */\n    sampling: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n    /**\n     * Present if the client supports eliciting user input.\n     */\n    elicitation: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n    /**\n     * Present if the client supports listing roots.\n     */\n    roots: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        /**\n         * Whether the client supports issuing notifications for changes to the roots list.\n         */\n        listChanged: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.boolean()),\n    })\n        .passthrough()),\n})\n    .passthrough();\n/**\n * This request is sent from the client to the server when it first connects, asking it to begin initialization.\n */\nconst InitializeRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"initialize\"),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The latest version of the Model Context Protocol that the client supports. The client MAY decide to support older versions as well.\n         */\n        protocolVersion: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        capabilities: ClientCapabilitiesSchema,\n        clientInfo: ImplementationSchema,\n    }),\n});\nconst isInitializeRequest = (value) => InitializeRequestSchema.safeParse(value).success;\n/**\n * Capabilities that a server may support. Known capabilities are defined here, in this schema, but this is not a closed set: any server can define its own, additional capabilities.\n */\nconst ServerCapabilitiesSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * Experimental, non-standard capabilities that the server supports.\n     */\n    experimental: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n    /**\n     * Present if the server supports sending log messages to the client.\n     */\n    logging: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n    /**\n     * Present if the server supports sending completions to the client.\n     */\n    completions: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n    /**\n     * Present if the server offers any prompt templates.\n     */\n    prompts: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        /**\n         * Whether this server supports issuing notifications for changes to the prompt list.\n         */\n        listChanged: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.boolean()),\n    })\n        .passthrough()),\n    /**\n     * Present if the server offers any resources to read.\n     */\n    resources: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        /**\n         * Whether this server supports clients subscribing to resource updates.\n         */\n        subscribe: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.boolean()),\n        /**\n         * Whether this server supports issuing notifications for changes to the resource list.\n         */\n        listChanged: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.boolean()),\n    })\n        .passthrough()),\n    /**\n     * Present if the server offers any tools to call.\n     */\n    tools: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        /**\n         * Whether this server supports issuing notifications for changes to the tool list.\n         */\n        listChanged: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.boolean()),\n    })\n        .passthrough()),\n})\n    .passthrough();\n/**\n * After receiving an initialize request from the client, the server sends this response.\n */\nconst InitializeResultSchema = ResultSchema.extend({\n    /**\n     * The version of the Model Context Protocol that the server wants to use. This may not match the version that the client requested. If the client cannot support this version, it MUST disconnect.\n     */\n    protocolVersion: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    capabilities: ServerCapabilitiesSchema,\n    serverInfo: ImplementationSchema,\n    /**\n     * Instructions describing how to use the server and its features.\n     *\n     * This can be used by clients to improve the LLM's understanding of available tools, resources, etc. It can be thought of like a \"hint\" to the model. For example, this information MAY be added to the system prompt.\n     */\n    instructions: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n});\n/**\n * This notification is sent from the client to the server after initialization has finished.\n */\nconst InitializedNotificationSchema = NotificationSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"notifications/initialized\"),\n});\nconst isInitializedNotification = (value) => InitializedNotificationSchema.safeParse(value).success;\n/* Ping */\n/**\n * A ping, issued by either the server or the client, to check that the other party is still alive. The receiver must promptly respond, or else may be disconnected.\n */\nconst PingRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"ping\"),\n});\n/* Progress notifications */\nconst ProgressSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * The progress thus far. This should increase every time progress is made, even if the total is unknown.\n     */\n    progress: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n    /**\n     * Total number of items to process (or total progress required), if known.\n     */\n    total: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.number()),\n    /**\n     * An optional message describing the current progress.\n     */\n    message: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n})\n    .passthrough();\n/**\n * An out-of-band notification used to inform the receiver of a progress update for a long-running request.\n */\nconst ProgressNotificationSchema = NotificationSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"notifications/progress\"),\n    params: BaseNotificationParamsSchema.merge(ProgressSchema).extend({\n        /**\n         * The progress token which was given in the initial request, used to associate this notification with the request that is proceeding.\n         */\n        progressToken: ProgressTokenSchema,\n    }),\n});\n/* Pagination */\nconst PaginatedRequestSchema = RequestSchema.extend({\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * An opaque token representing the current pagination position.\n         * If provided, the server should return results starting after this cursor.\n         */\n        cursor: zod__WEBPACK_IMPORTED_MODULE_0__.optional(CursorSchema),\n    }).optional(),\n});\nconst PaginatedResultSchema = ResultSchema.extend({\n    /**\n     * An opaque token representing the pagination position after the last returned result.\n     * If present, there may be more results available.\n     */\n    nextCursor: zod__WEBPACK_IMPORTED_MODULE_0__.optional(CursorSchema),\n});\n/* Resources */\n/**\n * The contents of a specific resource or sub-resource.\n */\nconst ResourceContentsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * The URI of this resource.\n     */\n    uri: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    /**\n     * The MIME type of this resource, if known.\n     */\n    mimeType: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n})\n    .passthrough();\nconst TextResourceContentsSchema = ResourceContentsSchema.extend({\n    /**\n     * The text of the item. This must only be set if the item can actually be represented as text (not binary data).\n     */\n    text: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n});\n/**\n * A Zod schema for validating Base64 strings that is more performant and\n * robust for very large inputs than the default regex-based check. It avoids\n * stack overflows by using the native `atob` function for validation.\n */\nconst Base64Schema = zod__WEBPACK_IMPORTED_MODULE_0__.string().refine((val) => {\n    try {\n        // atob throws a DOMException if the string contains characters\n        // that are not part of the Base64 character set.\n        atob(val);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}, { message: \"Invalid Base64 string\" });\nconst BlobResourceContentsSchema = ResourceContentsSchema.extend({\n    /**\n     * A base64-encoded string representing the binary data of the item.\n     */\n    blob: Base64Schema,\n});\n/**\n * A known resource that the server is capable of reading.\n */\nconst ResourceSchema = BaseMetadataSchema.extend({\n    /**\n     * The URI of this resource.\n     */\n    uri: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    /**\n     * A description of what this resource represents.\n     *\n     * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a \"hint\" to the model.\n     */\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    /**\n     * The MIME type of this resource, if known.\n     */\n    mimeType: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    /**\n     * An optional list of icons for this resource.\n     */\n    icons: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.array(IconSchema)),\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n});\n/**\n * A template description for resources available on the server.\n */\nconst ResourceTemplateSchema = BaseMetadataSchema.extend({\n    /**\n     * A URI template (according to RFC 6570) that can be used to construct resource URIs.\n     */\n    uriTemplate: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    /**\n     * A description of what this template is for.\n     *\n     * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a \"hint\" to the model.\n     */\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    /**\n     * The MIME type for all resources that match this template. This should only be included if all resources matching this template have the same type.\n     */\n    mimeType: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n});\n/**\n * Sent from the client to request a list of resources the server has.\n */\nconst ListResourcesRequestSchema = PaginatedRequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"resources/list\"),\n});\n/**\n * The server's response to a resources/list request from the client.\n */\nconst ListResourcesResultSchema = PaginatedResultSchema.extend({\n    resources: zod__WEBPACK_IMPORTED_MODULE_0__.array(ResourceSchema),\n});\n/**\n * Sent from the client to request a list of resource templates the server has.\n */\nconst ListResourceTemplatesRequestSchema = PaginatedRequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"resources/templates/list\"),\n});\n/**\n * The server's response to a resources/templates/list request from the client.\n */\nconst ListResourceTemplatesResultSchema = PaginatedResultSchema.extend({\n    resourceTemplates: zod__WEBPACK_IMPORTED_MODULE_0__.array(ResourceTemplateSchema),\n});\n/**\n * Sent from the client to the server, to read a specific resource URI.\n */\nconst ReadResourceRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"resources/read\"),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The URI of the resource to read. The URI can use any protocol; it is up to the server how to interpret it.\n         */\n        uri: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    }),\n});\n/**\n * The server's response to a resources/read request from the client.\n */\nconst ReadResourceResultSchema = ResultSchema.extend({\n    contents: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.union([TextResourceContentsSchema, BlobResourceContentsSchema])),\n});\n/**\n * An optional notification from the server to the client, informing it that the list of resources it can read from has changed. This may be issued by servers without any previous subscription from the client.\n */\nconst ResourceListChangedNotificationSchema = NotificationSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"notifications/resources/list_changed\"),\n});\n/**\n * Sent from the client to request resources/updated notifications from the server whenever a particular resource changes.\n */\nconst SubscribeRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"resources/subscribe\"),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The URI of the resource to subscribe to. The URI can use any protocol; it is up to the server how to interpret it.\n         */\n        uri: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    }),\n});\n/**\n * Sent from the client to request cancellation of resources/updated notifications from the server. This should follow a previous resources/subscribe request.\n */\nconst UnsubscribeRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"resources/unsubscribe\"),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The URI of the resource to unsubscribe from.\n         */\n        uri: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    }),\n});\n/**\n * A notification from the server to the client, informing it that a resource has changed and may need to be read again. This should only be sent if the client previously sent a resources/subscribe request.\n */\nconst ResourceUpdatedNotificationSchema = NotificationSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"notifications/resources/updated\"),\n    params: BaseNotificationParamsSchema.extend({\n        /**\n         * The URI of the resource that has been updated. This might be a sub-resource of the one that the client actually subscribed to.\n         */\n        uri: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    }),\n});\n/* Prompts */\n/**\n * Describes an argument that a prompt can accept.\n */\nconst PromptArgumentSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * The name of the argument.\n     */\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    /**\n     * A human-readable description of the argument.\n     */\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    /**\n     * Whether this argument must be provided.\n     */\n    required: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.boolean()),\n})\n    .passthrough();\n/**\n * A prompt or prompt template that the server offers.\n */\nconst PromptSchema = BaseMetadataSchema.extend({\n    /**\n     * An optional description of what this prompt provides\n     */\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    /**\n     * A list of arguments to use for templating the prompt.\n     */\n    arguments: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.array(PromptArgumentSchema)),\n    /**\n     * An optional list of icons for this prompt.\n     */\n    icons: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.array(IconSchema)),\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n});\n/**\n * Sent from the client to request a list of prompts and prompt templates the server has.\n */\nconst ListPromptsRequestSchema = PaginatedRequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"prompts/list\"),\n});\n/**\n * The server's response to a prompts/list request from the client.\n */\nconst ListPromptsResultSchema = PaginatedResultSchema.extend({\n    prompts: zod__WEBPACK_IMPORTED_MODULE_0__.array(PromptSchema),\n});\n/**\n * Used by the client to get a prompt provided by the server.\n */\nconst GetPromptRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"prompts/get\"),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The name of the prompt or prompt template.\n         */\n        name: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        /**\n         * Arguments to use for templating the prompt.\n         */\n        arguments: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.record(zod__WEBPACK_IMPORTED_MODULE_0__.string())),\n    }),\n});\n/**\n * Text provided to or from an LLM.\n */\nconst TextContentSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"text\"),\n    /**\n     * The text content of the message.\n     */\n    text: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n})\n    .passthrough();\n/**\n * An image provided to or from an LLM.\n */\nconst ImageContentSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"image\"),\n    /**\n     * The base64-encoded image data.\n     */\n    data: Base64Schema,\n    /**\n     * The MIME type of the image. Different providers may support different image types.\n     */\n    mimeType: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n})\n    .passthrough();\n/**\n * An Audio provided to or from an LLM.\n */\nconst AudioContentSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"audio\"),\n    /**\n     * The base64-encoded audio data.\n     */\n    data: Base64Schema,\n    /**\n     * The MIME type of the audio. Different providers may support different audio types.\n     */\n    mimeType: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n})\n    .passthrough();\n/**\n * The contents of a resource, embedded into a prompt or tool call result.\n */\nconst EmbeddedResourceSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"resource\"),\n    resource: zod__WEBPACK_IMPORTED_MODULE_0__.union([TextResourceContentsSchema, BlobResourceContentsSchema]),\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n})\n    .passthrough();\n/**\n * A resource that the server is capable of reading, included in a prompt or tool call result.\n *\n * Note: resource links returned by tools are not guaranteed to appear in the results of `resources/list` requests.\n */\nconst ResourceLinkSchema = ResourceSchema.extend({\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"resource_link\"),\n});\n/**\n * A content block that can be used in prompts and tool results.\n */\nconst ContentBlockSchema = zod__WEBPACK_IMPORTED_MODULE_0__.union([\n    TextContentSchema,\n    ImageContentSchema,\n    AudioContentSchema,\n    ResourceLinkSchema,\n    EmbeddedResourceSchema,\n]);\n/**\n * Describes a message returned as part of a prompt.\n */\nconst PromptMessageSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    role: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"user\", \"assistant\"]),\n    content: ContentBlockSchema,\n})\n    .passthrough();\n/**\n * The server's response to a prompts/get request from the client.\n */\nconst GetPromptResultSchema = ResultSchema.extend({\n    /**\n     * An optional description for the prompt.\n     */\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    messages: zod__WEBPACK_IMPORTED_MODULE_0__.array(PromptMessageSchema),\n});\n/**\n * An optional notification from the server to the client, informing it that the list of prompts it offers has changed. This may be issued by servers without any previous subscription from the client.\n */\nconst PromptListChangedNotificationSchema = NotificationSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"notifications/prompts/list_changed\"),\n});\n/* Tools */\n/**\n * Additional properties describing a Tool to clients.\n *\n * NOTE: all properties in ToolAnnotations are **hints**.\n * They are not guaranteed to provide a faithful description of\n * tool behavior (including descriptive properties like `title`).\n *\n * Clients should never make tool use decisions based on ToolAnnotations\n * received from untrusted servers.\n */\nconst ToolAnnotationsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * A human-readable title for the tool.\n     */\n    title: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    /**\n     * If true, the tool does not modify its environment.\n     *\n     * Default: false\n     */\n    readOnlyHint: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.boolean()),\n    /**\n     * If true, the tool may perform destructive updates to its environment.\n     * If false, the tool performs only additive updates.\n     *\n     * (This property is meaningful only when `readOnlyHint == false`)\n     *\n     * Default: true\n     */\n    destructiveHint: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.boolean()),\n    /**\n     * If true, calling the tool repeatedly with the same arguments\n     * will have no additional effect on the its environment.\n     *\n     * (This property is meaningful only when `readOnlyHint == false`)\n     *\n     * Default: false\n     */\n    idempotentHint: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.boolean()),\n    /**\n     * If true, this tool may interact with an \"open world\" of external\n     * entities. If false, the tool's domain of interaction is closed.\n     * For example, the world of a web search tool is open, whereas that\n     * of a memory tool is not.\n     *\n     * Default: true\n     */\n    openWorldHint: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.boolean()),\n})\n    .passthrough();\n/**\n * Definition for a tool the client can call.\n */\nconst ToolSchema = BaseMetadataSchema.extend({\n    /**\n     * A human-readable description of the tool.\n     */\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    /**\n     * A JSON Schema object defining the expected parameters for the tool.\n     */\n    inputSchema: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"object\"),\n        properties: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n        required: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string())),\n    })\n        .passthrough(),\n    /**\n     * An optional JSON Schema object defining the structure of the tool's output returned in\n     * the structuredContent field of a CallToolResult.\n     */\n    outputSchema: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"object\"),\n        properties: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n        required: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string())),\n    })\n        .passthrough()),\n    /**\n     * Optional additional tool information.\n     */\n    annotations: zod__WEBPACK_IMPORTED_MODULE_0__.optional(ToolAnnotationsSchema),\n    /**\n     * An optional list of icons for this tool.\n     */\n    icons: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.array(IconSchema)),\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n});\n/**\n * Sent from the client to request a list of tools the server has.\n */\nconst ListToolsRequestSchema = PaginatedRequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"tools/list\"),\n});\n/**\n * The server's response to a tools/list request from the client.\n */\nconst ListToolsResultSchema = PaginatedResultSchema.extend({\n    tools: zod__WEBPACK_IMPORTED_MODULE_0__.array(ToolSchema),\n});\n/**\n * The server's response to a tool call.\n */\nconst CallToolResultSchema = ResultSchema.extend({\n    /**\n     * A list of content objects that represent the result of the tool call.\n     *\n     * If the Tool does not define an outputSchema, this field MUST be present in the result.\n     * For backwards compatibility, this field is always present, but it may be empty.\n     */\n    content: zod__WEBPACK_IMPORTED_MODULE_0__.array(ContentBlockSchema).default([]),\n    /**\n     * An object containing structured tool output.\n     *\n     * If the Tool defines an outputSchema, this field MUST be present in the result, and contain a JSON object that matches the schema.\n     */\n    structuredContent: zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough().optional(),\n    /**\n     * Whether the tool call ended in an error.\n     *\n     * If not set, this is assumed to be false (the call was successful).\n     *\n     * Any errors that originate from the tool SHOULD be reported inside the result\n     * object, with `isError` set to true, _not_ as an MCP protocol-level error\n     * response. Otherwise, the LLM would not be able to see that an error occurred\n     * and self-correct.\n     *\n     * However, any errors in _finding_ the tool, an error indicating that the\n     * server does not support tool calls, or any other exceptional conditions,\n     * should be reported as an MCP error response.\n     */\n    isError: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.boolean()),\n});\n/**\n * CallToolResultSchema extended with backwards compatibility to protocol version 2024-10-07.\n */\nconst CompatibilityCallToolResultSchema = CallToolResultSchema.or(ResultSchema.extend({\n    toolResult: zod__WEBPACK_IMPORTED_MODULE_0__.unknown(),\n}));\n/**\n * Used by the client to invoke a tool provided by the server.\n */\nconst CallToolRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"tools/call\"),\n    params: BaseRequestParamsSchema.extend({\n        name: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        arguments: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.record(zod__WEBPACK_IMPORTED_MODULE_0__.unknown())),\n    }),\n});\n/**\n * An optional notification from the server to the client, informing it that the list of tools it offers has changed. This may be issued by servers without any previous subscription from the client.\n */\nconst ToolListChangedNotificationSchema = NotificationSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"notifications/tools/list_changed\"),\n});\n/* Logging */\n/**\n * The severity of a log message.\n */\nconst LoggingLevelSchema = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n    \"debug\",\n    \"info\",\n    \"notice\",\n    \"warning\",\n    \"error\",\n    \"critical\",\n    \"alert\",\n    \"emergency\",\n]);\n/**\n * A request from the client to the server, to enable or adjust logging.\n */\nconst SetLevelRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"logging/setLevel\"),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The level of logging that the client wants to receive from the server. The server should send all logs at this level and higher (i.e., more severe) to the client as notifications/logging/message.\n         */\n        level: LoggingLevelSchema,\n    }),\n});\n/**\n * Notification of a log message passed from server to client. If no logging/setLevel request has been sent from the client, the server MAY decide which messages to send automatically.\n */\nconst LoggingMessageNotificationSchema = NotificationSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"notifications/message\"),\n    params: BaseNotificationParamsSchema.extend({\n        /**\n         * The severity of this log message.\n         */\n        level: LoggingLevelSchema,\n        /**\n         * An optional name of the logger issuing this message.\n         */\n        logger: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n        /**\n         * The data to be logged, such as a string message or an object. Any JSON serializable type is allowed here.\n         */\n        data: zod__WEBPACK_IMPORTED_MODULE_0__.unknown(),\n    }),\n});\n/* Sampling */\n/**\n * Hints to use for model selection.\n */\nconst ModelHintSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * A hint for a model name.\n     */\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n})\n    .passthrough();\n/**\n * The server's preferences for model selection, requested of the client during sampling.\n */\nconst ModelPreferencesSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * Optional hints to use for model selection.\n     */\n    hints: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.array(ModelHintSchema)),\n    /**\n     * How much to prioritize cost when selecting a model.\n     */\n    costPriority: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0).max(1)),\n    /**\n     * How much to prioritize sampling speed (latency) when selecting a model.\n     */\n    speedPriority: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0).max(1)),\n    /**\n     * How much to prioritize intelligence and capabilities when selecting a model.\n     */\n    intelligencePriority: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0).max(1)),\n})\n    .passthrough();\n/**\n * Describes a message issued to or received from an LLM API.\n */\nconst SamplingMessageSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    role: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"user\", \"assistant\"]),\n    content: zod__WEBPACK_IMPORTED_MODULE_0__.union([TextContentSchema, ImageContentSchema, AudioContentSchema]),\n})\n    .passthrough();\n/**\n * A request from the server to sample an LLM via the client. The client has full discretion over which model to select. The client should also inform the user before beginning sampling, to allow them to inspect the request (human in the loop) and decide whether to approve it.\n */\nconst CreateMessageRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"sampling/createMessage\"),\n    params: BaseRequestParamsSchema.extend({\n        messages: zod__WEBPACK_IMPORTED_MODULE_0__.array(SamplingMessageSchema),\n        /**\n         * An optional system prompt the server wants to use for sampling. The client MAY modify or omit this prompt.\n         */\n        systemPrompt: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n        /**\n         * A request to include context from one or more MCP servers (including the caller), to be attached to the prompt. The client MAY ignore this request.\n         */\n        includeContext: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"none\", \"thisServer\", \"allServers\"])),\n        temperature: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.number()),\n        /**\n         * The maximum number of tokens to sample, as requested by the server. The client MAY choose to sample fewer tokens than requested.\n         */\n        maxTokens: zod__WEBPACK_IMPORTED_MODULE_0__.number().int(),\n        stopSequences: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string())),\n        /**\n         * Optional metadata to pass through to the LLM provider. The format of this metadata is provider-specific.\n         */\n        metadata: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n        /**\n         * The server's preferences for which model to select.\n         */\n        modelPreferences: zod__WEBPACK_IMPORTED_MODULE_0__.optional(ModelPreferencesSchema),\n    }),\n});\n/**\n * The client's response to a sampling/create_message request from the server. The client should inform the user before returning the sampled message, to allow them to inspect the response (human in the loop) and decide whether to allow the server to see it.\n */\nconst CreateMessageResultSchema = ResultSchema.extend({\n    /**\n     * The name of the model that generated the message.\n     */\n    model: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    /**\n     * The reason why sampling stopped.\n     */\n    stopReason: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"endTurn\", \"stopSequence\", \"maxTokens\"]).or(zod__WEBPACK_IMPORTED_MODULE_0__.string())),\n    role: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"user\", \"assistant\"]),\n    content: zod__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n        TextContentSchema,\n        ImageContentSchema,\n        AudioContentSchema\n    ]),\n});\n/* Elicitation */\n/**\n * Primitive schema definition for boolean fields.\n */\nconst BooleanSchemaSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"boolean\"),\n    title: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    default: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.boolean()),\n})\n    .passthrough();\n/**\n * Primitive schema definition for string fields.\n */\nconst StringSchemaSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"string\"),\n    title: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    minLength: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.number()),\n    maxLength: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.number()),\n    format: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"email\", \"uri\", \"date\", \"date-time\"])),\n})\n    .passthrough();\n/**\n * Primitive schema definition for number fields.\n */\nconst NumberSchemaSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"number\", \"integer\"]),\n    title: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    minimum: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.number()),\n    maximum: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.number()),\n})\n    .passthrough();\n/**\n * Primitive schema definition for enum fields.\n */\nconst EnumSchemaSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"string\"),\n    title: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    enum: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    enumNames: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string())),\n})\n    .passthrough();\n/**\n * Union of all primitive schema definitions.\n */\nconst PrimitiveSchemaDefinitionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.union([\n    BooleanSchemaSchema,\n    StringSchemaSchema,\n    NumberSchemaSchema,\n    EnumSchemaSchema,\n]);\n/**\n * A request from the server to elicit user input via the client.\n * The client should present the message and form fields to the user.\n */\nconst ElicitRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"elicitation/create\"),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The message to present to the user.\n         */\n        message: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        /**\n         * The schema for the requested user input.\n         */\n        requestedSchema: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"object\"),\n            properties: zod__WEBPACK_IMPORTED_MODULE_0__.record(zod__WEBPACK_IMPORTED_MODULE_0__.string(), PrimitiveSchemaDefinitionSchema),\n            required: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string())),\n        })\n            .passthrough(),\n    }),\n});\n/**\n * The client's response to an elicitation/create request from the server.\n */\nconst ElicitResultSchema = ResultSchema.extend({\n    /**\n     * The user's response action.\n     */\n    action: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"accept\", \"decline\", \"cancel\"]),\n    /**\n     * The collected user input content (only present if action is \"accept\").\n     */\n    content: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.record(zod__WEBPACK_IMPORTED_MODULE_0__.string(), zod__WEBPACK_IMPORTED_MODULE_0__.unknown())),\n});\n/* Autocomplete */\n/**\n * A reference to a resource or resource template definition.\n */\nconst ResourceTemplateReferenceSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"ref/resource\"),\n    /**\n     * The URI or URI template of the resource.\n     */\n    uri: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n})\n    .passthrough();\n/**\n * @deprecated Use ResourceTemplateReferenceSchema instead\n */\nconst ResourceReferenceSchema = ResourceTemplateReferenceSchema;\n/**\n * Identifies a prompt.\n */\nconst PromptReferenceSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"ref/prompt\"),\n    /**\n     * The name of the prompt or prompt template\n     */\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n})\n    .passthrough();\n/**\n * A request from the client to the server, to ask for completion options.\n */\nconst CompleteRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"completion/complete\"),\n    params: BaseRequestParamsSchema.extend({\n        ref: zod__WEBPACK_IMPORTED_MODULE_0__.union([PromptReferenceSchema, ResourceTemplateReferenceSchema]),\n        /**\n         * The argument's information\n         */\n        argument: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n            /**\n             * The name of the argument\n             */\n            name: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            /**\n             * The value of the argument to use for completion matching.\n             */\n            value: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        })\n            .passthrough(),\n        context: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({\n            /**\n             * Previously-resolved variables in a URI template or prompt.\n             */\n            arguments: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.record(zod__WEBPACK_IMPORTED_MODULE_0__.string(), zod__WEBPACK_IMPORTED_MODULE_0__.string())),\n        })),\n    }),\n});\n/**\n * The server's response to a completion/complete request\n */\nconst CompleteResultSchema = ResultSchema.extend({\n    completion: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        /**\n         * An array of completion values. Must not exceed 100 items.\n         */\n        values: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).max(100),\n        /**\n         * The total number of completion options available. This can exceed the number of values actually sent in the response.\n         */\n        total: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.number().int()),\n        /**\n         * Indicates whether there are additional completion options beyond those provided in the current response, even if the exact total is unknown.\n         */\n        hasMore: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.boolean()),\n    })\n        .passthrough(),\n});\n/* Roots */\n/**\n * Represents a root directory or file that the server can operate on.\n */\nconst RootSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * The URI identifying the root. This *must* start with file:// for now.\n     */\n    uri: zod__WEBPACK_IMPORTED_MODULE_0__.string().startsWith(\"file://\"),\n    /**\n     * An optional name for the root.\n     */\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n})\n    .passthrough();\n/**\n * Sent from the server to request a list of root URIs from the client.\n */\nconst ListRootsRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"roots/list\"),\n});\n/**\n * The client's response to a roots/list request from the server.\n */\nconst ListRootsResultSchema = ResultSchema.extend({\n    roots: zod__WEBPACK_IMPORTED_MODULE_0__.array(RootSchema),\n});\n/**\n * A notification from the client to the server, informing it that the list of roots has changed.\n */\nconst RootsListChangedNotificationSchema = NotificationSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"notifications/roots/list_changed\"),\n});\n/* Client messages */\nconst ClientRequestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.union([\n    PingRequestSchema,\n    InitializeRequestSchema,\n    CompleteRequestSchema,\n    SetLevelRequestSchema,\n    GetPromptRequestSchema,\n    ListPromptsRequestSchema,\n    ListResourcesRequestSchema,\n    ListResourceTemplatesRequestSchema,\n    ReadResourceRequestSchema,\n    SubscribeRequestSchema,\n    UnsubscribeRequestSchema,\n    CallToolRequestSchema,\n    ListToolsRequestSchema,\n]);\nconst ClientNotificationSchema = zod__WEBPACK_IMPORTED_MODULE_0__.union([\n    CancelledNotificationSchema,\n    ProgressNotificationSchema,\n    InitializedNotificationSchema,\n    RootsListChangedNotificationSchema,\n]);\nconst ClientResultSchema = zod__WEBPACK_IMPORTED_MODULE_0__.union([\n    EmptyResultSchema,\n    CreateMessageResultSchema,\n    ElicitResultSchema,\n    ListRootsResultSchema,\n]);\n/* Server messages */\nconst ServerRequestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.union([\n    PingRequestSchema,\n    CreateMessageRequestSchema,\n    ElicitRequestSchema,\n    ListRootsRequestSchema,\n]);\nconst ServerNotificationSchema = zod__WEBPACK_IMPORTED_MODULE_0__.union([\n    CancelledNotificationSchema,\n    ProgressNotificationSchema,\n    LoggingMessageNotificationSchema,\n    ResourceUpdatedNotificationSchema,\n    ResourceListChangedNotificationSchema,\n    ToolListChangedNotificationSchema,\n    PromptListChangedNotificationSchema,\n]);\nconst ServerResultSchema = zod__WEBPACK_IMPORTED_MODULE_0__.union([\n    EmptyResultSchema,\n    InitializeResultSchema,\n    CompleteResultSchema,\n    GetPromptResultSchema,\n    ListPromptsResultSchema,\n    ListResourcesResultSchema,\n    ListResourceTemplatesResultSchema,\n    ReadResourceResultSchema,\n    CallToolResultSchema,\n    ListToolsResultSchema,\n]);\nclass McpError extends Error {\n    constructor(code, message, data) {\n        super(`MCP error ${code}: ${message}`);\n        this.code = code;\n        this.data = data;\n        this.name = \"McpError\";\n    }\n}\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/types.js\n");

/***/ })

};
;